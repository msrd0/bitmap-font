var searchIndex = JSON.parse('{\
"az":{"doc":"Numeric casts","t":[12,8,8,8,8,8,8,3,8,8,8,8,8,8,10,11,11,11,5,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,5,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,5,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,5,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,5,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,5,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["0","Az","Cast","CheckedAs","CheckedCast","OverflowingAs","OverflowingCast","Round","SaturatingAs","SaturatingCast","UnwrappedAs","UnwrappedCast","WrappingAs","WrappingCast","az","az","borrow","borrow_mut","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","checked_as","checked_as","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","clone","default","eq","fmt","fmt","fmt","fmt","from","into","ne","overflowing_as","overflowing_as","overflowing_cast","overflowing_cast","overflowing_cast","overflowing_cast","overflowing_cast","overflowing_cast","overflowing_cast","overflowing_cast","overflowing_cast","overflowing_cast","overflowing_cast","overflowing_cast","overflowing_cast","overflowing_cast","overflowing_cast","overflowing_cast","overflowing_cast","overflowing_cast","overflowing_cast","overflowing_cast","overflowing_cast","overflowing_cast","overflowing_cast","overflowing_cast","overflowing_cast","overflowing_cast","partial_cmp","saturating_as","saturating_as","saturating_cast","saturating_cast","saturating_cast","saturating_cast","saturating_cast","saturating_cast","saturating_cast","saturating_cast","saturating_cast","saturating_cast","saturating_cast","saturating_cast","saturating_cast","saturating_cast","saturating_cast","saturating_cast","saturating_cast","saturating_cast","saturating_cast","saturating_cast","saturating_cast","saturating_cast","saturating_cast","saturating_cast","saturating_cast","saturating_cast","try_from","try_into","type_id","unwrapped_as","unwrapped_as","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","wrapping_as","wrapping_as","wrapping_cast","wrapping_cast","wrapping_cast","wrapping_cast","wrapping_cast","wrapping_cast","wrapping_cast","wrapping_cast","wrapping_cast","wrapping_cast","wrapping_cast","wrapping_cast","wrapping_cast","wrapping_cast","wrapping_cast","wrapping_cast","wrapping_cast","wrapping_cast","wrapping_cast","wrapping_cast","wrapping_cast","wrapping_cast","wrapping_cast","wrapping_cast","wrapping_cast","wrapping_cast"],"q":["azd":["","Used to cast values.","Used to cast values.","Used for checked casts.","Used for checked casts.","Used for overflowing casts.","Used for overflowing casts.","Used to convert floating-point numbers to integers with …","Used to cast into the destination type, saturating if the …","Used to cast into the destination type, saturating if the …","Used to cast values, panicking if the value does not fit.","Used to cast values, panicking if the value does not fit.","Wrapping cast.","Wrapping cast.","Casts the value.","","","","Casts the value.","Casts the value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Casts the value.","","Casts the value, returning <code>None</code> if the value does not fit.","Casts the value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Casts the value.","","Overflowing cast.","Casts the value.","","","","","","","","","","","","","","","","","","","","","","","","","","Casts the value.","","Casts the value, saturating if the value does not fit.","Casts the value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Casts the value.","","Casts the value, panicking if the value does not fit.","Casts the value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Casts the value.","","Casts the value, wrapping on overflow.","Casts the value.","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[1,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,0,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,1,0,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,6,1,0,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,8,1,0,9,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,10,1,0,11,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,12,1,0,13,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[["cast",8]]],[[]],[[],["isize",15]],[[],[["i8",15],["wrapping",3,["i8"]]]],[[],[["u64",15],["wrapping",3,["u64"]]]],[[],["u64",15]],[[],[["i16",15],["wrapping",3,["i16"]]]],[[],[["u32",15],["wrapping",3,["u32"]]]],[[],["u32",15]],[[],[["wrapping",3,["u16"]],["u16",15]]],[[],["u16",15]],[[],["i16",15]],[[],[["wrapping",3,["u128"]],["u128",15]]],[[],[["i8",15],["wrapping",3,["i8"]]]],[[],["i8",15]],[[],[["u8",15],["wrapping",3,["u8"]]]],[[],["u8",15]],[[],[["wrapping",3,["isize"]],["isize",15]]],[[],["i32",15]],[[],[["wrapping",3,["i128"]],["i128",15]]],[[],["i128",15]],[[],[["wrapping",3,["i64"]],["i64",15]]],[[],["i64",15]],[[],["usize",15]],[[],[["usize",15],["wrapping",3,["usize"]]]],[[],[["i32",15],["wrapping",3,["i32"]]]],[[],["i8",15]],[[],["u128",15]],[[],["i16",15]],[[],[["i16",15],["wrapping",3,["i16"]]]],[[],["i32",15]],[[],[["i32",15],["wrapping",3,["i32"]]]],[[],["i64",15]],[[],[["wrapping",3,["i64"]],["i64",15]]],[[],["i128",15]],[[],[["wrapping",3,["i128"]],["i128",15]]],[[],["isize",15]],[[],[["wrapping",3,["isize"]],["isize",15]]],[[],["u8",15]],[[],[["u8",15],["wrapping",3,["u8"]]]],[[],["u16",15]],[[],[["wrapping",3,["u16"]],["u16",15]]],[[],["u32",15]],[[],[["u32",15],["wrapping",3,["u32"]]]],[[],["u64",15]],[[],[["u64",15],["wrapping",3,["u64"]]]],[[],["u128",15]],[[],[["wrapping",3,["u128"]],["u128",15]]],[[],["usize",15]],[[],[["usize",15],["wrapping",3,["usize"]]]],[[],["option",4]],[[],["option",4]],[[["checkedcast",8]],["option",4]],[[],["option",4]],[[],[["u64",15],["option",4,["u64"]]]],[[],[["option",4,["wrapping"]],["wrapping",3,["u32"]]]],[[],[["wrapping",3,["usize"]],["option",4,["wrapping"]]]],[[],[["usize",15],["option",4,["usize"]]]],[[],[["option",4,["wrapping"]],["wrapping",3,["u128"]]]],[[],[["option",4,["u128"]],["u128",15]]],[[],[["wrapping",3,["u64"]],["option",4,["wrapping"]]]],[[],[["u32",15],["option",4,["u32"]]]],[[],[["wrapping",3,["u16"]],["option",4,["wrapping"]]]],[[],[["option",4,["u16"]],["u16",15]]],[[],[["option",4,["wrapping"]],["wrapping",3,["u8"]]]],[[],[["option",4,["u8"]],["u8",15]]],[[],[["wrapping",3,["isize"]],["option",4,["wrapping"]]]],[[],[["isize",15],["option",4,["isize"]]]],[[],[["wrapping",3,["i128"]],["option",4,["wrapping"]]]],[[],[["option",4,["i128"]],["i128",15]]],[[],[["wrapping",3,["i64"]],["option",4,["wrapping"]]]],[[],[["option",4,["i64"]],["i64",15]]],[[],[["option",4,["wrapping"]],["wrapping",3,["i32"]]]],[[],[["i32",15],["option",4,["i32"]]]],[[],[["i8",15],["option",4,["i8"]]]],[[],[["wrapping",3,["i8"]],["option",4,["wrapping"]]]],[[],[["option",4,["i16"]],["i16",15]]],[[],[["option",4,["wrapping"]],["wrapping",3,["i16"]]]],[[],[["i32",15],["option",4,["i32"]]]],[[],[["option",4,["wrapping"]],["wrapping",3,["i32"]]]],[[],[["option",4,["i64"]],["i64",15]]],[[],[["wrapping",3,["i64"]],["option",4,["wrapping"]]]],[[],[["option",4,["i128"]],["i128",15]]],[[],[["wrapping",3,["i128"]],["option",4,["wrapping"]]]],[[],[["isize",15],["option",4,["isize"]]]],[[],[["wrapping",3,["isize"]],["option",4,["wrapping"]]]],[[],[["option",4,["u8"]],["u8",15]]],[[],[["option",4,["wrapping"]],["wrapping",3,["u8"]]]],[[],[["option",4,["u16"]],["u16",15]]],[[],[["wrapping",3,["u16"]],["option",4,["wrapping"]]]],[[],[["u32",15],["option",4,["u32"]]]],[[],[["option",4,["wrapping"]],["wrapping",3,["u32"]]]],[[],[["u64",15],["option",4,["u64"]]]],[[],[["wrapping",3,["u64"]],["option",4,["wrapping"]]]],[[],[["option",4,["u128"]],["u128",15]]],[[],[["option",4,["wrapping"]],["wrapping",3,["u128"]]]],[[],[["usize",15],["option",4,["usize"]]]],[[],[["wrapping",3,["usize"]],["option",4,["wrapping"]]]],[[],[["i8",15],["option",4,["i8"]]]],[[],[["wrapping",3,["i8"]],["option",4,["wrapping"]]]],[[],[["option",4,["i16"]],["i16",15]]],[[],[["option",4,["wrapping"]],["wrapping",3,["i16"]]]],[[],["round",3]],[[],["round",3]],[[["round",3]],["bool",15]],[[["formatter",3]],["fmtresult",6]],[[["formatter",3]],["fmtresult",6]],[[["formatter",3]],["fmtresult",6]],[[["formatter",3]],["fmtresult",6]],[[]],[[]],[[["round",3]],["bool",15]],[[]],[[]],[[["overflowingcast",8]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["round",3]],[["option",4,["ordering"]],["ordering",4]]],[[]],[[]],[[["saturatingcast",8]]],[[]],[[],["i128",15]],[[],["u128",15]],[[],["u32",15]],[[],["u64",15]],[[],["u128",15]],[[],["usize",15]],[[],["i8",15]],[[],["u8",15]],[[],["isize",15]],[[],["i16",15]],[[],["i64",15]],[[],["i32",15]],[[],["i16",15]],[[],["i8",15]],[[],["usize",15]],[[],["u16",15]],[[],["u64",15]],[[],["u32",15]],[[],["u16",15]],[[],["u8",15]],[[],["isize",15]],[[],["i128",15]],[[],["i64",15]],[[],["i32",15]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[["unwrappedcast",8]]],[[]],[[],[["wrapping",3,["i64"]],["i64",15]]],[[],["u64",15]],[[],[["usize",15],["wrapping",3,["usize"]]]],[[],["usize",15]],[[],[["wrapping",3,["u128"]],["u128",15]]],[[],["u128",15]],[[],[["u64",15],["wrapping",3,["u64"]]]],[[],["u64",15]],[[],[["u32",15],["wrapping",3,["u32"]]]],[[],["u32",15]],[[],[["wrapping",3,["u16"]],["u16",15]]],[[],["u16",15]],[[],[["u8",15],["wrapping",3,["u8"]]]],[[],["u8",15]],[[],[["wrapping",3,["isize"]],["isize",15]]],[[],["isize",15]],[[],[["wrapping",3,["i128"]],["i128",15]]],[[],["i128",15]],[[],[["wrapping",3,["i64"]],["i64",15]]],[[],["i8",15]],[[],[["i8",15],["wrapping",3,["i8"]]]],[[],["i16",15]],[[],[["i16",15],["wrapping",3,["i16"]]]],[[],["i32",15]],[[],[["i32",15],["wrapping",3,["i32"]]]],[[],["i64",15]],[[],["i64",15]],[[],["i128",15]],[[],[["wrapping",3,["i128"]],["i128",15]]],[[],["isize",15]],[[],[["wrapping",3,["isize"]],["isize",15]]],[[],["u8",15]],[[],[["u8",15],["wrapping",3,["u8"]]]],[[],["u16",15]],[[],[["wrapping",3,["u16"]],["u16",15]]],[[],["u32",15]],[[],[["u32",15],["wrapping",3,["u32"]]]],[[],[["i32",15],["wrapping",3,["i32"]]]],[[],[["u64",15],["wrapping",3,["u64"]]]],[[],["u128",15]],[[],[["wrapping",3,["u128"]],["u128",15]]],[[],["usize",15]],[[],[["usize",15],["wrapping",3,["usize"]]]],[[],["i8",15]],[[],[["i8",15],["wrapping",3,["i8"]]]],[[],["i16",15]],[[],[["i16",15],["wrapping",3,["i16"]]]],[[],["i32",15]],[[]],[[]],[[["wrappingcast",8]]],[[]],[[],["u64",15]],[[],["u32",15]],[[],["i64",15]],[[],["i32",15]],[[],["i16",15]],[[],["i8",15]],[[],["usize",15]],[[],["u128",15]],[[],["usize",15]],[[],["u128",15]],[[],["i128",15]],[[],["u64",15]],[[],["u16",15]],[[],["u8",15]],[[],["isize",15]],[[],["isize",15]],[[],["i128",15]],[[],["i64",15]],[[],["i32",15]],[[],["i16",15]],[[],["i8",15]],[[],["u8",15]],[[],["u32",15]],[[],["u16",15]]],"p":[[3,"Round"],[8,"Az"],[8,"Cast"],[8,"CheckedAs"],[8,"CheckedCast"],[8,"OverflowingAs"],[8,"OverflowingCast"],[8,"SaturatingAs"],[8,"SaturatingCast"],[8,"UnwrappedAs"],[8,"UnwrappedCast"],[8,"WrappingAs"],[8,"WrappingCast"]]},\
"bitmap_font":{"doc":"This crate provides bitmap fonts for the <code>embedded-graphics</code>…","t":[3,3,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17],"n":["BitmapFont","TextStyle","az","az","borrow","borrow","borrow_mut","borrow_mut","checked_as","checked_as","clone","clone","color","draw_glyph","draw_string","draw_whitespace","font","from","from","height","into","into","line_height","measure_string","new","overflowing_as","overflowing_as","pixel_double","saturating_as","saturating_as","tamzen","try_from","try_from","try_into","try_into","type_id","type_id","unwrapped_as","unwrapped_as","width","wrapping_as","wrapping_as","FONT_10x18","FONT_10x18_BOLD","FONT_10x20","FONT_10x20_BOLD","FONT_12x24","FONT_12x24_BOLD","FONT_14x26","FONT_14x26_BOLD","FONT_14x28","FONT_14x28_BOLD","FONT_16x30","FONT_16x30_BOLD","FONT_16x32","FONT_16x32_BOLD","FONT_20x40","FONT_20x40_BOLD","FONT_5x9","FONT_5x9_BOLD","FONT_6x12","FONT_6x12_BOLD","FONT_7x13","FONT_7x13_BOLD","FONT_7x14","FONT_7x14_BOLD","FONT_8x15","FONT_8x15_BOLD","FONT_8x16","FONT_8x16_BOLD"],"q":["bitmap_font","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bitmap_font::tamzen","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Stores the font bitmap and some additional info for each …","The equivalent of <code>MonoTextStyle</code> for <code>BitmapFont</code>.","","","","","","","","","","","","Draw a glyph to the <code>target</code> with <code>color</code> at position <code>pos</code>.","","","","","","Return the height of each character.","","","","","","","","Returns a pixel-double version of this font.","","","Tamzen font-based bitmap fonts. The included glyphs are a …","","","","","","","","","Return the width of each character.","","","Pixel-double version of <code>FONT_5x9</code>.","Pixel-double version of <code>FONT_5x9_BOLD</code>.","Tamzen 10x20 Font.","Tamzen 10x20 Bold Font.","Pixel-double version of <code>FONT_6x12</code>.","Pixel-double version of <code>FONT_6x12_BOLD</code>.","Pixel-double version of <code>FONT_7x13</code>.","Pixel-double version of <code>FONT_7x13_BOLD</code>.","Pixel-double version of <code>FONT_7x14</code>.","Pixel-double version of <code>FONT_7x14_BOLD</code>.","Pixel-double version of <code>FONT_8x15</code>.","Pixel-double version of <code>FONT_8x15_BOLD</code>.","Pixel-double version of <code>FONT_8x16</code>.","Pixel-double version of <code>FONT_8x16_BOLD</code>.","Pixel-double version of <code>FONT_10x20</code>.","Pixel-double version of <code>FONT_10x20_BOLD</code>.","Tamzen 5x9 Font.","Tamzen 5x9 Bold Font.","Tamzen 6x12 Font.","Tamzen 6x12 Bold Font.","Tamzen 7x13 Font.","Tamzen 7x13 Bold Font.","Tamzen 7x14 Font.","Tamzen 7x14 Bold Font.","Tamzen 8x15 Font.","Tamzen 8x15 Bold Font.","Tamzen 8x16 Font.","Tamzen 8x16 Bold Font."],"i":[0,0,1,2,1,2,1,2,1,2,1,2,2,1,2,2,2,1,2,1,1,2,2,2,2,1,2,1,1,2,0,1,2,1,2,1,2,1,2,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[],["bitmapfont",3]],[[],["textstyle",3]],null,[[["point",3],["u32",15],["binarycolor",4]],["result",4]],[[["baseline",4],["str",15],["point",3]],[["point",3],["result",4,["point"]]]],[[["baseline",4],["point",3],["u32",15]],[["point",3],["result",4,["point"]]]],null,[[]],[[]],[[],["u32",15]],[[]],[[]],[[],["u32",15]],[[["baseline",4],["str",15],["point",3]],["textmetrics",3]],[[["binarycolor",4],["bitmapfont",3]]],[[]],[[]],[[]],[[]],[[]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[],["u32",15]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"p":[[3,"BitmapFont"],[3,"TextStyle"]]},\
"byteorder":{"doc":"This crate provides convenience methods for encoding and …","t":[6,4,8,6,4,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11,11,10,11,11,10,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11,11,10,11,11,10,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11],"n":["BE","BigEndian","ByteOrder","LE","LittleEndian","NativeEndian","NetworkEndian","borrow","borrow","borrow_mut","borrow_mut","clone","clone","cmp","cmp","default","default","eq","eq","fmt","fmt","from","from","from_slice_f32","from_slice_f32","from_slice_f32","from_slice_f64","from_slice_f64","from_slice_f64","from_slice_i128","from_slice_i16","from_slice_i32","from_slice_i64","from_slice_u128","from_slice_u128","from_slice_u128","from_slice_u16","from_slice_u16","from_slice_u16","from_slice_u32","from_slice_u32","from_slice_u32","from_slice_u64","from_slice_u64","from_slice_u64","hash","hash","into","into","partial_cmp","partial_cmp","read_f32","read_f32_into","read_f32_into_unchecked","read_f64","read_f64_into","read_f64_into_unchecked","read_i128","read_i128_into","read_i16","read_i16_into","read_i24","read_i32","read_i32_into","read_i48","read_i64","read_i64_into","read_int","read_int128","read_u128","read_u128","read_u128","read_u128_into","read_u128_into","read_u128_into","read_u16","read_u16","read_u16","read_u16_into","read_u16_into","read_u16_into","read_u24","read_u32","read_u32","read_u32","read_u32_into","read_u32_into","read_u32_into","read_u48","read_u64","read_u64","read_u64","read_u64_into","read_u64_into","read_u64_into","read_uint","read_uint","read_uint","read_uint128","read_uint128","read_uint128","try_from","try_from","try_into","try_into","type_id","type_id","write_f32","write_f32_into","write_f64","write_f64_into","write_i128","write_i128_into","write_i16","write_i16_into","write_i24","write_i32","write_i32_into","write_i48","write_i64","write_i64_into","write_i8_into","write_int","write_int128","write_u128","write_u128","write_u128","write_u128_into","write_u128_into","write_u128_into","write_u16","write_u16","write_u16","write_u16_into","write_u16_into","write_u16_into","write_u24","write_u32","write_u32","write_u32","write_u32_into","write_u32_into","write_u32_into","write_u48","write_u64","write_u64","write_u64","write_u64_into","write_u64_into","write_u64_into","write_uint","write_uint","write_uint","write_uint128","write_uint128","write_uint128"],"q":["byteorder","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A type alias for <code>BigEndian</code>.","Defines big-endian serialization.","<code>ByteOrder</code> describes types that can serialize integers as …","A type alias for <code>LittleEndian</code>.","Defines little-endian serialization.","Defines system native-endian serialization.","Defines network byte order serialization.","","","","","","","","","","","","","","","","","Converts the given slice of IEEE754 single-precision (4 …","","","Converts the given slice of IEEE754 double-precision (8 …","","","Converts the given slice of signed 128 bit integers to a …","Converts the given slice of signed 16 bit integers to a …","Converts the given slice of signed 32 bit integers to a …","Converts the given slice of signed 64 bit integers to a …","Converts the given slice of unsigned 128 bit integers to …","","","Converts the given slice of unsigned 16 bit integers to a …","","","Converts the given slice of unsigned 32 bit integers to a …","","","Converts the given slice of unsigned 64 bit integers to a …","","","","","","","","","Reads a IEEE754 single-precision (4 bytes) floating point …","Reads IEEE754 single-precision (4 bytes) floating point …","<strong>DEPRECATED</strong>.","Reads a IEEE754 double-precision (8 bytes) floating point …","Reads IEEE754 single-precision (4 bytes) floating point …","<strong>DEPRECATED</strong>.","Reads a signed 128 bit integer from <code>buf</code>.","Reads signed 128 bit integers from <code>src</code> into <code>dst</code>.","Reads a signed 16 bit integer from <code>buf</code>.","Reads signed 16 bit integers from <code>src</code> to <code>dst</code>.","Reads a signed 24 bit integer from <code>buf</code>, stored in i32.","Reads a signed 32 bit integer from <code>buf</code>.","Reads signed 32 bit integers from <code>src</code> into <code>dst</code>.","Reads a signed 48 bit integer from <code>buf</code>, stored in i64.","Reads a signed 64 bit integer from <code>buf</code>.","Reads signed 64 bit integers from <code>src</code> into <code>dst</code>.","Reads a signed n-bytes integer from <code>buf</code>.","Reads a signed n-bytes integer from <code>buf</code>.","Reads an unsigned 128 bit integer from <code>buf</code>.","","","Reads unsigned 128 bit integers from <code>src</code> into <code>dst</code>.","","","Reads an unsigned 16 bit integer from <code>buf</code>.","","","Reads unsigned 16 bit integers from <code>src</code> into <code>dst</code>.","","","Reads an unsigned 24 bit integer from <code>buf</code>, stored in u32.","Reads an unsigned 32 bit integer from <code>buf</code>.","","","Reads unsigned 32 bit integers from <code>src</code> into <code>dst</code>.","","","Reads an unsigned 48 bit integer from <code>buf</code>, stored in u64.","Reads an unsigned 64 bit integer from <code>buf</code>.","","","Reads unsigned 64 bit integers from <code>src</code> into <code>dst</code>.","","","Reads an unsigned n-bytes integer from <code>buf</code>.","","","Reads an unsigned n-bytes integer from <code>buf</code>.","","","","","","","","","Writes a IEEE754 single-precision (4 bytes) floating …","Writes IEEE754 single-precision (4 bytes) floating point …","Writes a IEEE754 double-precision (8 bytes) floating …","Writes IEEE754 double-precision (8 bytes) floating point …","Writes a signed 128 bit integer <code>n</code> to <code>buf</code>.","Writes signed 128 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed 16 bit integer <code>n</code> to <code>buf</code>.","Writes signed 16 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed 24 bit integer <code>n</code> to <code>buf</code>, stored in i32.","Writes a signed 32 bit integer <code>n</code> to <code>buf</code>.","Writes signed 32 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed 48 bit integer <code>n</code> to <code>buf</code>, stored in i64.","Writes a signed 64 bit integer <code>n</code> to <code>buf</code>.","Writes signed 64 bit integers from <code>src</code> into <code>dst</code>.","Writes signed 8 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","Writes a signed integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","Writes an unsigned 128 bit integer <code>n</code> to <code>buf</code>.","","","Writes unsigned 128 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned 16 bit integer <code>n</code> to <code>buf</code>.","","","Writes unsigned 16 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned 24 bit integer <code>n</code> to <code>buf</code>, stored in u32.","Writes an unsigned 32 bit integer <code>n</code> to <code>buf</code>.","","","Writes unsigned 32 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned 48 bit integer <code>n</code> to <code>buf</code>, stored in u64.","Writes an unsigned 64 bit integer <code>n</code> to <code>buf</code>.","","","Writes unsigned 64 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","","","Writes an unsigned integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","",""],"i":[0,0,0,0,0,0,0,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,1,2,3,1,2,3,3,3,3,3,1,2,3,1,2,3,1,2,3,1,2,1,2,1,2,1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,2,3,1,2,3,1,2,3,1,2,3,3,1,2,3,1,2,3,3,1,2,3,1,2,3,1,2,3,1,2,1,2,1,2,1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,2,3,1,2,3,1,2,3,1,2,3,3,1,2,3,1,2,3,3,1,2,3,1,2,3,1,2,3,1,2],"f":[null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["bigendian",4]],[[],["littleendian",4]],[[["bigendian",4]],["ordering",4]],[[["littleendian",4]],["ordering",4]],[[],["bigendian",4]],[[],["littleendian",4]],[[["bigendian",4]],["bool",15]],[[["littleendian",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["bigendian",4]],[["option",4,["ordering"]],["ordering",4]]],[[["littleendian",4]],[["option",4,["ordering"]],["ordering",4]]],[[],["f32",15]],[[]],[[]],[[],["f64",15]],[[]],[[]],[[],["i128",15]],[[]],[[],["i16",15]],[[]],[[],["i32",15]],[[],["i32",15]],[[]],[[],["i64",15]],[[],["i64",15]],[[]],[[["usize",15]],["i64",15]],[[["usize",15]],["i128",15]],[[],["u128",15]],[[],["u128",15]],[[],["u128",15]],[[]],[[]],[[]],[[],["u16",15]],[[],["u16",15]],[[],["u16",15]],[[]],[[]],[[]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[]],[[]],[[]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[]],[[]],[[]],[[["usize",15]],["u64",15]],[[["usize",15]],["u64",15]],[[["usize",15]],["u64",15]],[[["usize",15]],["u128",15]],[[["usize",15]],["u128",15]],[[["usize",15]],["u128",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["f32",15]]],[[]],[[["f64",15]]],[[]],[[["i128",15]]],[[]],[[["i16",15]]],[[]],[[["i32",15]]],[[["i32",15]]],[[]],[[["i64",15]]],[[["i64",15]]],[[]],[[]],[[["usize",15],["i64",15]]],[[["usize",15],["i128",15]]],[[["u128",15]]],[[["u128",15]]],[[["u128",15]]],[[]],[[]],[[]],[[["u16",15]]],[[["u16",15]]],[[["u16",15]]],[[]],[[]],[[]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[]],[[]],[[]],[[["u64",15]]],[[["u64",15]]],[[["u64",15]]],[[["u64",15]]],[[]],[[]],[[]],[[["u64",15],["usize",15]]],[[["u64",15],["usize",15]]],[[["u64",15],["usize",15]]],[[["usize",15],["u128",15]]],[[["usize",15],["u128",15]]],[[["usize",15],["u128",15]]]],"p":[[4,"BigEndian"],[4,"LittleEndian"],[8,"ByteOrder"]]},\
"embedded_graphics":{"doc":"Embedded-graphics is a 2D graphics library that is …","t":[12,12,16,8,16,3,11,11,11,11,11,11,11,10,11,0,11,0,11,11,0,11,0,11,0,0,0,11,11,11,0,0,0,11,0,0,11,11,11,11,11,3,16,3,3,8,8,16,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,3,8,13,13,13,13,13,13,8,8,3,3,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,11,11,12,11,11,11,11,11,16,3,8,8,3,6,6,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,8,0,10,10,0,0,10,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,3,18,18,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,0,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,11,12,12,11,11,11,11,11,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,13,8,17,17,17,17,17,17,17,17,17,17,17,17,13,13,13,13,13,13,13,13,13,13,13,13,17,13,4,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,18,18,3,3,3,3,4,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,3,3,3,8,8,18,18,18,18,13,13,8,18,16,3,3,3,3,8,16,18,18,8,18,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,4,8,16,4,8,3,3,3,3,3,3,3,3,16,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,16,8,3,3,13,16,8,16,13,8,8,3,3,4,3,8,8,0,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,10,11,11,11,11,11,10,0,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,10,0,12,0,11,11,0,11,11,11,11,0,11,12,11,11,12,11,12,12,10,12,12,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,4,13,4,13,13,13,4,13,4,13,13,13,13,13,3,13,3,3,13,11,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,0,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,16,16,3,8,11,11,11,12,11,11,11,10,10,11,11,11,11,11,10,10,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,10,10],"n":["0","1","Color","Drawable","Output","Pixel","az","borrow","borrow_mut","checked_as","clone","cmp","default","draw","draw","draw_target","eq","examples","fmt","from","geometry","hash","image","into","iterator","mock_display","mono_font","ne","overflowing_as","partial_cmp","pixelcolor","prelude","primitives","saturating_as","text","transform","try_from","try_into","type_id","unwrapped_as","wrapping_as","Clipped","Color","ColorConverted","Cropped","DrawTarget","DrawTargetExt","Error","Translated","az","az","az","az","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounding_box","bounding_box","bounding_box","bounding_box","checked_as","checked_as","checked_as","checked_as","clear","clear","clear","clipped","clipped","clipped","clipped","clipped","color_converted","color_converted","color_converted","color_converted","color_converted","cropped","cropped","cropped","cropped","cropped","draw_iter","draw_iter","draw_iter","draw_iter","draw_iter","fill_contiguous","fill_contiguous","fill_contiguous","fill_contiguous","fill_contiguous","fill_solid","fill_solid","fill_solid","fill_solid","fill_solid","fmt","fmt","fmt","fmt","from","from","from","from","into","into","into","into","overflowing_as","overflowing_as","overflowing_as","overflowing_as","saturating_as","saturating_as","saturating_as","saturating_as","size","translated","translated","translated","translated","translated","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","AnchorPoint","Angle","AngleUnit","BottomCenter","BottomLeft","BottomRight","Center","CenterLeft","CenterRight","Dimensions","OriginDimensions","Point","Size","TopCenter","TopLeft","TopRight","abs","abs","add","add","add","add","add_assign","add_assign","add_assign","add_assign","az","az","az","az","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounding_box","checked_as","checked_as","checked_as","checked_as","clone","clone","clone","clone","cmp","cmp","cmp","component_div","component_div","component_max","component_max","component_min","component_min","component_mul","component_mul","default","default","deg","div","div","div_assign","div_assign","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_degrees","from_radians","hash","hash","hash","height","index","index","into","into","into","into","mul","mul","mul_assign","mul_assign","ne","ne","ne","neg","neg","new","new","new_equal","new_equal","normalize","overflowing_as","overflowing_as","overflowing_as","overflowing_as","partial_cmp","partial_cmp","partial_cmp","partial_cmp","rad","saturating_add","saturating_as","saturating_as","saturating_as","saturating_as","saturating_sub","size","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","to_degrees","to_radians","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","width","wrapping_as","wrapping_as","wrapping_as","wrapping_as","x","x_axis","x_axis","y","y_axis","y_axis","zero","zero","zero","Color","Image","ImageDrawable","ImageDrawableExt","ImageRaw","ImageRawBE","ImageRawLE","SubImage","az","az","az","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","bounding_box","bounding_box","bounding_box","checked_as","checked_as","checked_as","clone","clone","cmp","draw","draw","draw","draw","draw_sub_image","draw_sub_image","draw_sub_image","eq","fmt","fmt","fmt","from","from","from","hash","into","into","into","ne","new","new","new_binary","overflowing_as","overflowing_as","overflowing_as","partial_cmp","saturating_as","saturating_as","saturating_as","size","size","sub_image","translate","translate_mut","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","wrapping_as","wrapping_as","wrapping_as","ContiguousIteratorExt","PixelIteratorExt","contiguous","draw","into_pixels","pixel","raw","translated","IntoPixels","az","borrow","borrow_mut","checked_as","draw","fmt","from","into","into_iter","next","overflowing_as","saturating_as","translated","try_from","try_into","type_id","unwrapped_as","wrapping_as","Translated","az","borrow","borrow_mut","checked_as","draw","eq","fmt","from","into","into_iter","ne","next","overflowing_as","saturating_as","translated","try_from","try_into","type_id","unwrapped_as","wrapping_as","BitsIterator","ByteIterator","BytesIterator","RawDataSlice","az","az","az","az","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","checked_as","checked_as","checked_as","checked_as","clone","cmp","draw","draw","eq","fmt","fmt","fmt","fmt","from","from","from","from","hash","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","ne","new","next","next","next","next","next","next","next","next","next","next","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","overflowing_as","overflowing_as","overflowing_as","overflowing_as","partial_cmp","saturating_as","saturating_as","saturating_as","saturating_as","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","translated","translated","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","ColorMapping","MockDisplay","NONE_COLOR","NONE_COLOR","affected_area","assert_eq","assert_eq_with_message","assert_pattern","assert_pattern_with_message","az","borrow","borrow_mut","bounding_box","char_to_color","checked_as","clipped","clone","color_converted","color_to_char","cropped","default","diff","draw_iter","draw_pixel","eq","fmt","from","from_pattern","from_points","get_pixel","into","map","new","overflowing_as","saturating_as","set_allow_out_of_bounds_drawing","set_allow_overdraw","set_pixel","set_pixels","size","swap_xy","translated","try_from","try_into","type_id","unwrapped_as","wrapping_as","DecorationDimensions","MonoFont","MonoTextStyle","MonoTextStyleBuilder","ascii","az","az","az","az","background_color","background_color","baseline","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","character_size","character_spacing","checked_as","checked_as","checked_as","checked_as","clone","clone","clone","clone","cmp","default","default_strikethrough","default_underline","draw_string","draw_whitespace","eq","eq","eq","fmt","fmt","fmt","fmt","font","font","from","from","from","from","from","glyph_mapping","hash","height","image","into","into","into","into","is_transparent","iso_8859_1","iso_8859_10","iso_8859_13","iso_8859_14","iso_8859_15","iso_8859_16","iso_8859_2","iso_8859_3","iso_8859_4","iso_8859_5","iso_8859_7","iso_8859_9","jis_x0201","line_height","mapping","measure_string","ne","ne","new","new","new","offset","overflowing_as","overflowing_as","overflowing_as","overflowing_as","partial_cmp","reset_background_color","reset_strikethrough","reset_text_color","reset_underline","saturating_as","saturating_as","saturating_as","saturating_as","set_background_color","set_strikethrough_color","set_text_color","set_underline_color","strikethrough","strikethrough","strikethrough_color","strikethrough_with_color","text_color","text_color","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","underline","underline","underline_color","underline_with_color","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","FONT_10X20","FONT_4X6","FONT_5X7","FONT_5X8","FONT_6X10","FONT_6X12","FONT_6X13","FONT_6X13_BOLD","FONT_6X13_ITALIC","FONT_6X9","FONT_7X13","FONT_7X13_BOLD","FONT_7X13_ITALIC","FONT_7X14","FONT_7X14_BOLD","FONT_8X13","FONT_8X13_BOLD","FONT_8X13_ITALIC","FONT_9X15","FONT_9X15_BOLD","FONT_9X18","FONT_9X18_BOLD","FONT_10X20","FONT_4X6","FONT_5X7","FONT_5X8","FONT_6X10","FONT_6X12","FONT_6X13","FONT_6X13_BOLD","FONT_6X13_ITALIC","FONT_6X9","FONT_7X13","FONT_7X13_BOLD","FONT_7X13_ITALIC","FONT_7X14","FONT_7X14_BOLD","FONT_8X13","FONT_8X13_BOLD","FONT_8X13_ITALIC","FONT_9X15","FONT_9X15_BOLD","FONT_9X18","FONT_9X18_BOLD","FONT_10X20","FONT_4X6","FONT_5X7","FONT_5X8","FONT_6X10","FONT_6X12","FONT_6X13","FONT_6X13_BOLD","FONT_6X13_ITALIC","FONT_6X9","FONT_7X13","FONT_7X13_BOLD","FONT_7X13_ITALIC","FONT_7X14","FONT_7X14_BOLD","FONT_8X13","FONT_8X13_BOLD","FONT_8X13_ITALIC","FONT_9X15","FONT_9X15_BOLD","FONT_9X18","FONT_9X18_BOLD","FONT_10X20","FONT_4X6","FONT_5X7","FONT_5X8","FONT_6X10","FONT_6X12","FONT_6X13","FONT_6X13_BOLD","FONT_6X13_ITALIC","FONT_6X9","FONT_7X13","FONT_7X13_BOLD","FONT_7X13_ITALIC","FONT_7X14","FONT_7X14_BOLD","FONT_8X13","FONT_8X13_BOLD","FONT_8X13_ITALIC","FONT_9X15","FONT_9X15_BOLD","FONT_9X18","FONT_9X18_BOLD","FONT_10X20","FONT_4X6","FONT_5X7","FONT_5X8","FONT_6X10","FONT_6X12","FONT_6X13","FONT_6X13_BOLD","FONT_6X13_ITALIC","FONT_6X9","FONT_7X13","FONT_7X13_BOLD","FONT_7X13_ITALIC","FONT_7X14","FONT_7X14_BOLD","FONT_8X13","FONT_8X13_BOLD","FONT_8X13_ITALIC","FONT_9X15","FONT_9X15_BOLD","FONT_9X18","FONT_9X18_BOLD","FONT_10X20","FONT_4X6","FONT_5X7","FONT_5X8","FONT_6X10","FONT_6X12","FONT_6X13","FONT_6X13_BOLD","FONT_6X13_ITALIC","FONT_6X9","FONT_7X13","FONT_7X13_BOLD","FONT_7X13_ITALIC","FONT_7X14","FONT_7X14_BOLD","FONT_8X13","FONT_8X13_BOLD","FONT_8X13_ITALIC","FONT_9X15","FONT_9X15_BOLD","FONT_9X18","FONT_9X18_BOLD","FONT_10X20","FONT_4X6","FONT_5X7","FONT_5X8","FONT_6X10","FONT_6X12","FONT_6X13","FONT_6X13_BOLD","FONT_6X13_ITALIC","FONT_6X9","FONT_7X13","FONT_7X13_BOLD","FONT_7X13_ITALIC","FONT_7X14","FONT_7X14_BOLD","FONT_8X13","FONT_8X13_BOLD","FONT_8X13_ITALIC","FONT_9X15","FONT_9X15_BOLD","FONT_9X18","FONT_9X18_BOLD","FONT_10X20","FONT_4X6","FONT_5X7","FONT_5X8","FONT_6X10","FONT_6X12","FONT_6X13","FONT_6X13_BOLD","FONT_6X13_ITALIC","FONT_6X9","FONT_7X13","FONT_7X13_BOLD","FONT_7X13_ITALIC","FONT_7X14","FONT_7X14_BOLD","FONT_8X13","FONT_8X13_BOLD","FONT_8X13_ITALIC","FONT_9X15","FONT_9X15_BOLD","FONT_9X18","FONT_9X18_BOLD","FONT_10X20","FONT_4X6","FONT_5X7","FONT_5X8","FONT_6X10","FONT_6X12","FONT_6X13","FONT_6X13_BOLD","FONT_6X13_ITALIC","FONT_6X9","FONT_7X13","FONT_7X13_BOLD","FONT_7X13_ITALIC","FONT_7X14","FONT_7X14_BOLD","FONT_8X13","FONT_8X13_BOLD","FONT_8X13_ITALIC","FONT_9X15","FONT_9X15_BOLD","FONT_9X18","FONT_9X18_BOLD","FONT_10X20","FONT_4X6","FONT_5X7","FONT_5X8","FONT_6X10","FONT_6X12","FONT_6X13","FONT_6X13_BOLD","FONT_6X13_ITALIC","FONT_6X9","FONT_7X13","FONT_7X13_BOLD","FONT_7X13_ITALIC","FONT_7X14","FONT_7X14_BOLD","FONT_8X13","FONT_8X13_BOLD","FONT_8X13_ITALIC","FONT_9X15","FONT_9X15_BOLD","FONT_9X18","FONT_9X18_BOLD","FONT_10X20","FONT_4X6","FONT_5X7","FONT_5X8","FONT_6X10","FONT_6X12","FONT_6X13","FONT_6X13_BOLD","FONT_6X13_ITALIC","FONT_6X9","FONT_7X13","FONT_7X13_BOLD","FONT_7X13_ITALIC","FONT_7X14","FONT_7X14_BOLD","FONT_8X13","FONT_8X13_BOLD","FONT_8X13_ITALIC","FONT_9X15","FONT_9X15_BOLD","FONT_9X18","FONT_9X18_BOLD","FONT_10X20","FONT_4X6","FONT_5X7","FONT_5X8","FONT_6X10","FONT_6X12","FONT_6X13","FONT_6X13_BOLD","FONT_6X13_ITALIC","FONT_6X9","FONT_7X13","FONT_7X13_BOLD","FONT_7X13_ITALIC","FONT_7X14","FONT_7X14_BOLD","FONT_8X13","FONT_8X13_BOLD","FONT_8X13_ITALIC","FONT_9X15","FONT_9X15_BOLD","FONT_9X18","FONT_9X18_BOLD","FONT_10X20","FONT_4X6","FONT_5X7","FONT_5X8","FONT_6X10","FONT_6X12","FONT_6X13","FONT_6X13_BOLD","FONT_6X13_ITALIC","FONT_6X9","FONT_7X13","FONT_7X13_BOLD","FONT_7X13_ITALIC","FONT_7X14","FONT_7X14_BOLD","FONT_8X13","FONT_8X13_BOLD","FONT_8X13_ITALIC","FONT_9X15","FONT_9X15_BOLD","FONT_9X18","FONT_9X18_BOLD","FONT_10X20","FONT_6X13","FONT_7X14","FONT_8X13","FONT_9X15","FONT_9X18","ASCII","Ascii","GlyphMapping","ISO_8859_1","ISO_8859_10","ISO_8859_13","ISO_8859_14","ISO_8859_15","ISO_8859_16","ISO_8859_2","ISO_8859_3","ISO_8859_4","ISO_8859_5","ISO_8859_7","ISO_8859_9","Iso8859_1","Iso8859_10","Iso8859_13","Iso8859_14","Iso8859_15","Iso8859_16","Iso8859_2","Iso8859_3","Iso8859_4","Iso8859_5","Iso8859_7","Iso8859_9","JIS_X0201","JisX0201","Mapping","StrGlyphMapping","az","az","borrow","borrow","borrow_mut","borrow_mut","chars","checked_as","checked_as","clone","clone","cmp","cmp","contains","eq","eq","fmt","fmt","from","from","glyph_mapping","hash","hash","index","index","into","into","iter","mime","ne","new","overflowing_as","overflowing_as","partial_cmp","partial_cmp","ranges","saturating_as","saturating_as","try_from","try_from","try_into","try_into","type_id","type_id","unwrapped_as","unwrapped_as","wrapping_as","wrapping_as","BLACK","BLACK","BLUE","Bgr555","Bgr565","Bgr666","Bgr888","BinaryColor","CSS_ALICE_BLUE","CSS_ANTIQUE_WHITE","CSS_AQUA","CSS_AQUAMARINE","CSS_AZURE","CSS_BEIGE","CSS_BISQUE","CSS_BLACK","CSS_BLANCHED_ALMOND","CSS_BLUE","CSS_BLUE_VIOLET","CSS_BROWN","CSS_BURLY_WOOD","CSS_CADET_BLUE","CSS_CHARTREUSE","CSS_CHOCOLATE","CSS_CORAL","CSS_CORNFLOWER_BLUE","CSS_CORNSILK","CSS_CRIMSON","CSS_CYAN","CSS_DARK_BLUE","CSS_DARK_CYAN","CSS_DARK_GOLDENROD","CSS_DARK_GRAY","CSS_DARK_GREEN","CSS_DARK_KHAKI","CSS_DARK_MAGENTA","CSS_DARK_OLIVE_GREEN","CSS_DARK_ORANGE","CSS_DARK_ORCHID","CSS_DARK_RED","CSS_DARK_SALMON","CSS_DARK_SEA_GREEN","CSS_DARK_SLATE_BLUE","CSS_DARK_SLATE_GRAY","CSS_DARK_TURQUOISE","CSS_DARK_VIOLET","CSS_DEEP_PINK","CSS_DEEP_SKY_BLUE","CSS_DIM_GRAY","CSS_DODGER_BLUE","CSS_FIRE_BRICK","CSS_FLORAL_WHITE","CSS_FOREST_GREEN","CSS_FUCHSIA","CSS_GAINSBORO","CSS_GHOST_WHITE","CSS_GOLD","CSS_GOLDENROD","CSS_GRAY","CSS_GREEN","CSS_GREEN_YELLOW","CSS_HONEYDEW","CSS_HOT_PINK","CSS_INDIAN_RED","CSS_INDIGO","CSS_IVORY","CSS_KHAKI","CSS_LAVENDER","CSS_LAVENDER_BLUSH","CSS_LAWN_GREEN","CSS_LEMON_CHIFFON","CSS_LIGHT_BLUE","CSS_LIGHT_CORAL","CSS_LIGHT_CYAN","CSS_LIGHT_GOLDENROD_YELLOW","CSS_LIGHT_GRAY","CSS_LIGHT_GREEN","CSS_LIGHT_PINK","CSS_LIGHT_SALMON","CSS_LIGHT_SEA_GREEN","CSS_LIGHT_SKY_BLUE","CSS_LIGHT_SLATE_GRAY","CSS_LIGHT_STEEL_BLUE","CSS_LIGHT_YELLOW","CSS_LIME","CSS_LIME_GREEN","CSS_LINEN","CSS_MAGENTA","CSS_MAROON","CSS_MEDIUM_AQUAMARINE","CSS_MEDIUM_BLUE","CSS_MEDIUM_ORCHID","CSS_MEDIUM_PURPLE","CSS_MEDIUM_SEA_GREEN","CSS_MEDIUM_SLATE_BLUE","CSS_MEDIUM_SPRING_GREEN","CSS_MEDIUM_TURQUOISE","CSS_MEDIUM_VIOLET_RED","CSS_MIDNIGHT_BLUE","CSS_MINT_CREAM","CSS_MISTY_ROSE","CSS_MOCCASIN","CSS_NAVAJO_WHITE","CSS_NAVY","CSS_OLD_LACE","CSS_OLIVE","CSS_OLIVE_DRAB","CSS_ORANGE","CSS_ORANGE_RED","CSS_ORCHID","CSS_PALE_GOLDENROD","CSS_PALE_GREEN","CSS_PALE_TURQUOISE","CSS_PALE_VIOLET_RED","CSS_PAPAYA_WHIP","CSS_PEACH_PUFF","CSS_PERU","CSS_PINK","CSS_PLUM","CSS_POWDER_BLUE","CSS_PURPLE","CSS_REBECCAPURPLE","CSS_RED","CSS_ROSY_BROWN","CSS_ROYAL_BLUE","CSS_SADDLE_BROWN","CSS_SALMON","CSS_SANDY_BROWN","CSS_SEASHELL","CSS_SEA_GREEN","CSS_SIENNA","CSS_SILVER","CSS_SKY_BLUE","CSS_SLATE_BLUE","CSS_SLATE_GRAY","CSS_SNOW","CSS_SPRING_GREEN","CSS_STEEL_BLUE","CSS_TAN","CSS_TEAL","CSS_THISTLE","CSS_TOMATO","CSS_TURQUOISE","CSS_VIOLET","CSS_WHEAT","CSS_WHITE","CSS_WHITE_SMOKE","CSS_YELLOW","CSS_YELLOW_GREEN","CYAN","GREEN","Gray2","Gray4","Gray8","GrayColor","IntoStorage","MAGENTA","MAX_B","MAX_G","MAX_R","Off","On","PixelColor","RED","Raw","Rgb555","Rgb565","Rgb666","Rgb888","RgbColor","Storage","WHITE","WHITE","WebColors","YELLOW","az","az","az","az","az","az","az","az","az","az","az","az","b","b","b","b","b","b","b","b","b","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","char_to_color","char_to_color","char_to_color","char_to_color","char_to_color","char_to_color","char_to_color","char_to_color","char_to_color","char_to_color","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","color_to_char","color_to_char","color_to_char","color_to_char","color_to_char","color_to_char","color_to_char","color_to_char","color_to_char","color_to_char","default","default","default","default","default","default","default","default","default","default","default","default","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","g","g","g","g","g","g","g","g","g","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","into","into","into","into","into","into","into","into","into","into","into","into","into_storage","invert","is_off","is_on","luma","luma","luma","luma","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","new","new","new","new","new","new","new","new","new","new","new","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","r","r","r","r","r","r","r","r","r","raw","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","BITS_PER_PIXEL","BigEndian","ByteOrder","Bytes","LittleEndian","RawData","RawU1","RawU16","RawU18","RawU2","RawU24","RawU32","RawU4","RawU8","Storage","ToBytes","az","az","az","az","az","az","az","az","az","az","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","default","default","default","default","default","default","default","default","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","into","into","into","into","into","into","into","into","into","into","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","ne","ne","ne","ne","ne","ne","ne","ne","new","new","new","new","new","new","new","new","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","Center","Color","ContainsPoint","CornerRadii","CornerRadiiBuilder","Inside","Iter","OffsetOutline","Output","Outside","PointsIter","Primitive","PrimitiveStyle","PrimitiveStyleBuilder","StrokeAlignment","Styled","StyledDimensions","StyledDrawable","arc","az","az","az","az","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bottom_left","bottom_right","bounding_box","build","checked_as","checked_as","checked_as","checked_as","circle","clone","clone","clone","clone","cmp","cmp","cmp","cmp","contains","default","default","default","default","draw","draw_styled","ellipse","eq","eq","eq","eq","fill_area","fill_color","fill_color","fmt","fmt","fmt","fmt","from","from","from","from","from","hash","hash","hash","hash","into","into","into","into","into_styled","is_transparent","line","ne","ne","ne","new","new","new","offset","overflowing_as","overflowing_as","overflowing_as","overflowing_as","partial_cmp","partial_cmp","partial_cmp","partial_cmp","pixels","points","polyline","primitive","rectangle","reset_fill_color","reset_stroke_color","rounded_rectangle","saturating_as","saturating_as","saturating_as","saturating_as","sector","stroke_alignment","stroke_alignment","stroke_area","stroke_color","stroke_color","stroke_width","stroke_width","style","styled_bounding_box","top_left","top_right","translate","translate_mut","triangle","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","with_fill","with_stroke","wrapping_as","wrapping_as","wrapping_as","wrapping_as","Arc","Points","StyledPixelsIterator","angle_start","angle_sweep","az","az","az","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","bounding_box","center","checked_as","checked_as","checked_as","clone","clone","clone","diameter","draw","draw_styled","eq","eq","eq","fmt","fmt","fmt","from","from","from","from_circle","into","into","into","into_iter","into_iter","ne","ne","ne","new","next","next","overflowing_as","overflowing_as","overflowing_as","partial_cmp","points","saturating_as","saturating_as","saturating_as","styled_bounding_box","to_circle","top_left","translate","translate_mut","translated","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","with_center","wrapping_as","wrapping_as","wrapping_as","Circle","Points","StyledPixelsIterator","az","az","az","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","bounding_box","center","checked_as","checked_as","checked_as","clone","clone","clone","cmp","contains","default","diameter","draw","draw_styled","eq","eq","eq","fmt","fmt","fmt","from","from","from","hash","hash","hash","into","into","into","into_iter","into_iter","ne","ne","ne","new","next","next","offset","overflowing_as","overflowing_as","overflowing_as","partial_cmp","points","saturating_as","saturating_as","saturating_as","styled_bounding_box","top_left","translate","translate_mut","translated","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","with_center","wrapping_as","wrapping_as","wrapping_as","Ellipse","Points","StyledPixelsIterator","az","az","az","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","bounding_box","center","checked_as","checked_as","checked_as","clone","clone","clone","cmp","contains","default","draw","draw_styled","eq","eq","eq","fmt","fmt","fmt","from","from","from","hash","hash","hash","into","into","into","into_iter","into_iter","ne","ne","ne","new","next","next","offset","overflowing_as","overflowing_as","overflowing_as","partial_cmp","points","saturating_as","saturating_as","saturating_as","size","styled_bounding_box","top_left","translate","translate_mut","translated","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","with_center","wrapping_as","wrapping_as","wrapping_as","Line","Points","StyledPixelsIterator","az","az","az","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","bounding_box","checked_as","checked_as","checked_as","clone","clone","clone","cmp","cmp","default","delta","draw","draw_styled","end","eq","eq","fmt","fmt","fmt","from","from","from","hash","hash","into","into","into","into_iter","into_iter","midpoint","ne","ne","new","next","next","overflowing_as","overflowing_as","overflowing_as","partial_cmp","partial_cmp","points","saturating_as","saturating_as","saturating_as","start","styled_bounding_box","translate","translate_mut","translated","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","wrapping_as","wrapping_as","wrapping_as","Points","Polyline","StyledPixelsIterator","az","az","az","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","bounding_box","checked_as","checked_as","checked_as","clone","clone","clone","cmp","cmp","default","draw","draw_styled","eq","eq","fmt","fmt","fmt","from","from","from","hash","hash","into","into","into","into_iter","into_iter","ne","ne","new","next","next","overflowing_as","overflowing_as","overflowing_as","partial_cmp","partial_cmp","points","saturating_as","saturating_as","saturating_as","styled_bounding_box","translate","translate","translate_mut","translated","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","vertices","wrapping_as","wrapping_as","wrapping_as","Points","Rectangle","StyledPixelsIterator","anchor_point","az","az","az","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","bottom_right","bounding_box","center","checked_as","checked_as","checked_as","clone","clone","clone","cmp","columns","contains","contains","default","draw","draw_styled","empty","eq","eq","eq","fmt","fmt","fmt","from","from","from","hash","hash","hash","intersection","into","into","into","into_iter","into_iter","is_zero_sized","ne","ne","ne","new","next","next","offset","offset","overflowing_as","overflowing_as","overflowing_as","partial_cmp","points","resized","rows","saturating_as","saturating_as","saturating_as","size","styled_bounding_box","top_left","translate","translate_mut","translated","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","with_center","with_corners","wrapping_as","wrapping_as","wrapping_as","zero","CornerRadii","CornerRadiiBuilder","Points","RoundedRectangle","StyledPixelsIterator","all","az","az","az","az","az","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bottom","bottom_left","bottom_left","bottom_right","bottom_right","bounding_box","build","checked_as","checked_as","checked_as","checked_as","checked_as","clone","clone","clone","clone","clone","cmp","cmp","cmp","confine_radii","contains","corners","default","default","draw","draw_styled","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","hash","hash","hash","hash","hash","into","into","into","into","into","into_iter","into_iter","left","ne","ne","ne","ne","ne","new","new","new","next","next","offset","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","partial_cmp","partial_cmp","partial_cmp","points","rectangle","right","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","styled_bounding_box","top","top_left","top_left","top_right","top_right","translate","translate_mut","translated","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","with_equal_corners","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","Points","Sector","StyledPixelsIterator","angle_start","angle_sweep","az","az","az","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","bounding_box","center","checked_as","checked_as","checked_as","clone","clone","clone","contains","diameter","draw","draw_styled","eq","eq","eq","fmt","fmt","fmt","from","from","from","from_circle","into","into","into","into_iter","into_iter","ne","ne","ne","new","next","next","offset","overflowing_as","overflowing_as","overflowing_as","partial_cmp","points","saturating_as","saturating_as","saturating_as","styled_bounding_box","to_circle","top_left","translate","translate_mut","translated","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","with_center","wrapping_as","wrapping_as","wrapping_as","Points","StyledPixelsIterator","Triangle","az","az","az","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","bounding_box","checked_as","checked_as","checked_as","clone","clone","clone","cmp","contains","default","draw","draw_styled","eq","eq","eq","fmt","fmt","fmt","from","from","from","from_slice","hash","hash","hash","into","into","into","into_iter","into_iter","ne","ne","ne","new","next","next","overflowing_as","overflowing_as","overflowing_as","partial_cmp","points","saturating_as","saturating_as","saturating_as","styled_bounding_box","translate","translate_mut","translated","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","vertices","wrapping_as","wrapping_as","wrapping_as","Alignment","Alphabetic","Baseline","Bottom","Center","Custom","DecorationColor","Left","LineHeight","Middle","None","Percent","Pixels","Right","Text","TextColor","TextStyle","TextStyleBuilder","Top","alignment","alignment","az","az","az","az","az","az","az","baseline","baseline","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounding_box","build","character_style","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","clone","clone","clone","clone","clone","clone","clone","cmp","cmp","cmp","cmp","cmp","cmp","default","default","draw","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","hash","hash","hash","hash","hash","hash","into","into","into","into","into","into","into","is_custom","is_none","is_text_color","line_height","line_height","ne","ne","ne","ne","ne","new","new","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","position","renderer","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","text","text_style","to_absolute","translate","translate_mut","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","with_alignment","with_alignment","with_baseline","with_baseline","with_text_style","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","CharacterStyle","Color","Color","TextMetrics","TextRenderer","az","borrow","borrow_mut","bounding_box","checked_as","clone","cmp","draw_string","draw_whitespace","eq","fmt","from","hash","into","line_height","measure_string","ne","next_position","overflowing_as","partial_cmp","saturating_as","set_background_color","set_background_color","set_strikethrough_color","set_strikethrough_color","set_text_color","set_text_color","set_underline_color","set_underline_color","try_from","try_into","type_id","unwrapped_as","wrapping_as","Transform","translate","translate_mut"],"q":["embedded_graphics","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","embedded_graphics::draw_target","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","embedded_graphics::geometryembedded_graphics::image","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","embedded_graphics::iterator","","","","","","","","embedded_graphics::iterator::contiguous","","","","","","","","","","","","","","","","","","","embedded_graphics::iterator::pixel","","","","","","","","","","","","","","","","","","","","","embedded_graphics::iterator::raw","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","embedded_graphics::mock_display","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","embedded_graphics::mono_font","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","embedded_graphics::mono_font::ascii","","","","","","","","","","","","","","","","","","","","","","embedded_graphics::mono_font::iso_8859_1","","","","","","","","","","","","","","","","","","","","","","embedded_graphics::mono_font::iso_8859_10","","","","","","","","","","","","","","","","","","","","","","embedded_graphics::mono_font::iso_8859_13","","","","","","","","","","","","","","","","","","","","","","embedded_graphics::mono_font::iso_8859_14","","","","","","","","","","","","","","","","","","","","","","embedded_graphics::mono_font::iso_8859_15","","","","","","","","","","","","","","","","","","","","","","embedded_graphics::mono_font::iso_8859_16","","","","","","","","","","","","","","","","","","","","","","embedded_graphics::mono_font::iso_8859_2","","","","","","","","","","","","","","","","","","","","","","embedded_graphics::mono_font::iso_8859_3","","","","","","","","","","","","","","","","","","","","","","embedded_graphics::mono_font::iso_8859_4","","","","","","","","","","","","","","","","","","","","","","embedded_graphics::mono_font::iso_8859_5","","","","","","","","","","","","","","","","","","","","","","embedded_graphics::mono_font::iso_8859_7","","","","","","","","","","","","","","","","","","","","","","embedded_graphics::mono_font::iso_8859_9","","","","","","","","","","","","","","","","","","","","","","embedded_graphics::mono_font::jis_x0201","","","","","","embedded_graphics::mono_font::mapping","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","embedded_graphics::pixelcolorembedded_graphics::pixelcolor::rawembedded_graphics::primitives","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","embedded_graphics::primitives::arc","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","embedded_graphics::primitives::circle","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","embedded_graphics::primitives::ellipse","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","embedded_graphics::primitives::line","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","embedded_graphics::primitives::polyline","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","embedded_graphics::primitives::rectangle","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","embedded_graphics::primitives::rounded_rectangle","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","embedded_graphics::primitives::sector","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","embedded_graphics::primitives::triangle","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","embedded_graphics::text","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","embedded_graphics::text::renderer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","embedded_graphics::transform","",""],"d":["","","The pixel color type.","Marks an object as “drawable”. Must be implemented …","The return type of the <code>draw</code> method.","A single pixel.","","","","","","","","Draw the graphics object using the supplied DrawTarget.","","A target for embedded-graphics drawing operations.","","Drawing examples","","","Geometry module.","","Image support for embedded-graphics","","Iterators.","Mock display for use in tests.","Monospaced bitmap fonts.","","","","Pixel color types.","Prelude","Graphics primitives","","Text drawing.","Transformations for graphics objects","","","","","","Clipped draw target.","The pixel color type the targetted display supports.","Color conversion draw target.","Cropped draw target.","A target for embedded-graphics drawing operations.","Extension trait for <code>DrawTarget</code>s.","Error type to return when a drawing operation fails.","Translated draw target.","","","","","","","","","","","","","","","","","","","","","","","Fill the entire display with a solid color.","Creates a clipped draw target based on this draw target.","","","","","Creates a color conversion draw target.","","","","","Creates a cropped draw target based on this draw target.","","","","","Draw individual pixels to the display without a defined …","","","","","","","","","Fill a given area with an iterator providing a contiguous …","","","","","Fill a given area with a solid color.","","","","","","","","","","","","","","","","","","","","","","Creates a translated draw target based on this draw …","","","","","","","","","","","","","","","","","","","","","","","","","Anchor point.","Angle.","AngleUnit trait.","Bottom center.","Bottom left.","Bottom right.","Center.","Center left.","Center right.","Adds the ability to get the bounding box of an item.","Dimensions with <code>top_left</code> of the bounding box at <code>(0, 0)</code>.","2D point.","2D size.","Top center.","Top left.","Top right.","Compute the absolute value of the angle.","Remove the sign from a coordinate","","Offsets a point by adding a size.","","","","Offsets a point by adding a size.","","","","","","","","","","","","","","","Returns the bounding box.","","","","","","","","","","","","Returns the componentwise division of two <code>Points</code>s.","Returns the componentwise division of two <code>Size</code>s.","Returns the componentwise maximum of two <code>Point</code>s","Returns the componentwise maximum of two <code>Size</code>s.","Returns the componentwise minimum of two <code>Point</code>s","Returns the componentwise minimum of two <code>Size</code>s.","Returns the componentwise multiplication of two <code>Point</code>s.","Returns the componentwise multiplication of two <code>Size</code>s.","","","Convert a number (interpreted as degrees) to an <code>Angle</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Creates an angle defined in degrees.","Creates an angle defined in radians.","","","","The height.","","","","","","","","","","","","","","","","Creates a point from  X and Y coordinates.","Creates a size from a width and a height.","Creates a point with X and Y values set to an equal value.","Creates a size with width and height set to an equal …","Normalize the angle to less than one full rotation (ie. …","","","","","","","","","Convert a number (interpreted as radians) to an <code>Angle</code>.","Saturating addition.","","","","","Saturating subtraction.","Returns the size of the bounding box.","","Offsets a point by subtracting a size.","","","","","Offsets a point by subtracting a size.","","Return numerical value of the angle in degree","Return numerical value of the angle in radian","","","","","","","","","","","","","","","","","","","","The width.","","","","","The x coordinate.","Returns a point with equal <code>x</code> value and <code>y</code> set to <code>0</code>.","Returns a size with equal <code>width</code> value and <code>height</code> set to <code>0</code>.","The y coordinate.","Returns a point with equal <code>y</code> value and <code>x</code> set to <code>0</code>.","Returns a size with equal <code>height</code> value and <code>width</code> set to <code>0</code>.","Creates a zero degree angle.","Creates a point with X and Y equal to zero.","Creates a size with width and height equal to zero.","The color type.","Image object.","Image drawable.","Extension trait for image drawables.","An image constructed from a slice of raw pixel data.","Image with big endian data.","Image with little endian data.","Sub image.","","","","","","","","","","","","","","","","","","","Draws the entire image to the target.","","","","Draws a part of the image to the target.","","","","","","","","","","","","","","","Creates a new image.","Creates a new <code>Image</code>.","Creates a new binary image.","","","","","","","","","","Returns a sub image of this image drawable.","Translate the image by a given delta, returning a new …","Translate the image by a given delta, modifying the …","","","","","","","","","","","","","","","","Extension trait for contiguous iterators.","Extension trait for pixel iterators.","Contiguous iterator.","Draws the pixel iterator to a draw target.","Converts a contiguous iterator into a pixel iterator.","Pixel iterator.","Raw data iterator.","Returns a translated version of the iterator.","Converts a contiguous iterator into a pixel iterator.","","","","","","","","","","","","","","","","","","","Translated pixel iterator.","","","","","","","","","","","","","","","","","","","","","Iterator for raw data slices with less than 8 BPP.","Iterator for raw data slices with 8 BPP.","Iterator for raw data slices more than 8 BPP.","Raw data slice.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new raw data slice.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Mapping between <code>char</code>s and colors.","Mock display struct","Color used to display <code>None</code> values when <code>EG_FANCY_PANIC</code> is …","Color used to display <code>None</code> values when <code>EG_FANCY_PANIC</code> is …","Returns the area that was affected by drawing operations.","Checks if the displays are equal.","Checks if the displays are equal.","Checks if the display is equal to the given pattern.","Checks if the display is equal to the given pattern.","","","","","Converts a char into a color of type <code>C</code>.","","","","","Converts a color of type <code>C</code> into a char.","","","Compares the display to another display.","","Changes the color of a pixel.","","","","Creates a new mock display from a character pattern.","Create a mock display from an iterator of <code>Point</code>s.","Returns the color of a pixel.","","Maps a <code>MockDisplay<C>\' to a </code>MockDisplay` by applying a …","Creates a new empty mock display.","","","Sets if out of bounds drawing is allowed.","Sets if overdrawing is allowed.","Changes the value of a pixel without bounds checking.","Sets the points in an iterator to the given color.","","Returns a copy of with the content mirrored by swapping x …","","","","","","","Decoration dimensions.","Monospaced bitmap font.","Style properties for text using a monospaced font.","Text style builder for monospaced fonts.","ASCII glyph subset.","","","","","Sets the background color.","Background color.","The baseline.","","","","","","","","","Builds the text style.","Size of a single character in pixel.","Spacing between characters.","","","","","","","","","","","Creates a new default strikethrough decoration for the …","Creates a new default underline decoration for the given …","","","","","","","","","","Sets the font.","Font.","","","","","","Glyph mapping.","","Height of the decoration.","Raw image data containing the font.","","","","","Returns <code>true</code> if the style is transparent.","ISO_8859_1 glyph subset.","ISO_8859_10 glyph subset.","ISO_8859_13 glyph subset.","ISO_8859_14 glyph subset.","ISO_8859_15 glyph subset.","ISO_8859_16 glyph subset.","ISO_8859_2 glyph subset.","ISO_8859_3 glyph subset.","ISO_8859_4 glyph subset.","ISO_8859_5 glyph subset.","ISO_8859_7 glyph subset.","ISO_8859_9 glyph subset.","JIS_X0201 glyph subset.","","Glyph mapping.","","","","Creates a text style with transparent background.","Creates a new text style builder.","Creates new decoration dimensions.","Offset from the top of the character to the top of the …","","","","","","Resets the background color to transparent.","Removes the strikethrough decoration.","Resets the text color to transparent.","Removes the underline decoration.","","","","","","","","","Enables strikethrough using the text color.","Strikethrough decoration dimensions.","Strikethrough color.","Enables strikethrough with a custom color.","Sets the text color.","Text color.","","","","","","","","","","","","","Enables underline using the text color.","Underline decoration dimensions.","Underline color.","Enables underline with a custom color.","","","","","","","","","10x20 pixel monospace font.","4x6 pixel monospace font.","5x7 pixel monospace font.","5x8 pixel monospace font.","6x10 pixel monospace font.","6x12 pixel monospace font.","6x13 pixel monospace font.","6x13 pixel monospace font.","6x13 pixel monospace font.","6x9 pixel monospace font.","7x13 pixel monospace font.","7x13 pixel monospace font.","7x13 pixel monospace font.","7x14 pixel monospace font.","7x14 pixel monospace font.","8x13 pixel monospace font.","8x13 pixel monospace font.","8x13 pixel monospace font.","9x15 pixel monospace font.","9x15 pixel monospace font.","9x18 pixel monospace font.","9x18 pixel monospace font.","10x20 pixel monospace font.","4x6 pixel monospace font.","5x7 pixel monospace font.","5x8 pixel monospace font.","6x10 pixel monospace font.","6x12 pixel monospace font.","6x13 pixel monospace font.","6x13 pixel monospace font.","6x13 pixel monospace font.","6x9 pixel monospace font.","7x13 pixel monospace font.","7x13 pixel monospace font.","7x13 pixel monospace font.","7x14 pixel monospace font.","7x14 pixel monospace font.","8x13 pixel monospace font.","8x13 pixel monospace font.","8x13 pixel monospace font.","9x15 pixel monospace font.","9x15 pixel monospace font.","9x18 pixel monospace font.","9x18 pixel monospace font.","10x20 pixel monospace font.","4x6 pixel monospace font.","5x7 pixel monospace font.","5x8 pixel monospace font.","6x10 pixel monospace font.","6x12 pixel monospace font.","6x13 pixel monospace font.","6x13 pixel monospace font.","6x13 pixel monospace font.","6x9 pixel monospace font.","7x13 pixel monospace font.","7x13 pixel monospace font.","7x13 pixel monospace font.","7x14 pixel monospace font.","7x14 pixel monospace font.","8x13 pixel monospace font.","8x13 pixel monospace font.","8x13 pixel monospace font.","9x15 pixel monospace font.","9x15 pixel monospace font.","9x18 pixel monospace font.","9x18 pixel monospace font.","10x20 pixel monospace font.","4x6 pixel monospace font.","5x7 pixel monospace font.","5x8 pixel monospace font.","6x10 pixel monospace font.","6x12 pixel monospace font.","6x13 pixel monospace font.","6x13 pixel monospace font.","6x13 pixel monospace font.","6x9 pixel monospace font.","7x13 pixel monospace font.","7x13 pixel monospace font.","7x13 pixel monospace font.","7x14 pixel monospace font.","7x14 pixel monospace font.","8x13 pixel monospace font.","8x13 pixel monospace font.","8x13 pixel monospace font.","9x15 pixel monospace font.","9x15 pixel monospace font.","9x18 pixel monospace font.","9x18 pixel monospace font.","10x20 pixel monospace font.","4x6 pixel monospace font.","5x7 pixel monospace font.","5x8 pixel monospace font.","6x10 pixel monospace font.","6x12 pixel monospace font.","6x13 pixel monospace font.","6x13 pixel monospace font.","6x13 pixel monospace font.","6x9 pixel monospace font.","7x13 pixel monospace font.","7x13 pixel monospace font.","7x13 pixel monospace font.","7x14 pixel monospace font.","7x14 pixel monospace font.","8x13 pixel monospace font.","8x13 pixel monospace font.","8x13 pixel monospace font.","9x15 pixel monospace font.","9x15 pixel monospace font.","9x18 pixel monospace font.","9x18 pixel monospace font.","10x20 pixel monospace font.","4x6 pixel monospace font.","5x7 pixel monospace font.","5x8 pixel monospace font.","6x10 pixel monospace font.","6x12 pixel monospace font.","6x13 pixel monospace font.","6x13 pixel monospace font.","6x13 pixel monospace font.","6x9 pixel monospace font.","7x13 pixel monospace font.","7x13 pixel monospace font.","7x13 pixel monospace font.","7x14 pixel monospace font.","7x14 pixel monospace font.","8x13 pixel monospace font.","8x13 pixel monospace font.","8x13 pixel monospace font.","9x15 pixel monospace font.","9x15 pixel monospace font.","9x18 pixel monospace font.","9x18 pixel monospace font.","10x20 pixel monospace font.","4x6 pixel monospace font.","5x7 pixel monospace font.","5x8 pixel monospace font.","6x10 pixel monospace font.","6x12 pixel monospace font.","6x13 pixel monospace font.","6x13 pixel monospace font.","6x13 pixel monospace font.","6x9 pixel monospace font.","7x13 pixel monospace font.","7x13 pixel monospace font.","7x13 pixel monospace font.","7x14 pixel monospace font.","7x14 pixel monospace font.","8x13 pixel monospace font.","8x13 pixel monospace font.","8x13 pixel monospace font.","9x15 pixel monospace font.","9x15 pixel monospace font.","9x18 pixel monospace font.","9x18 pixel monospace font.","10x20 pixel monospace font.","4x6 pixel monospace font.","5x7 pixel monospace font.","5x8 pixel monospace font.","6x10 pixel monospace font.","6x12 pixel monospace font.","6x13 pixel monospace font.","6x13 pixel monospace font.","6x13 pixel monospace font.","6x9 pixel monospace font.","7x13 pixel monospace font.","7x13 pixel monospace font.","7x13 pixel monospace font.","7x14 pixel monospace font.","7x14 pixel monospace font.","8x13 pixel monospace font.","8x13 pixel monospace font.","8x13 pixel monospace font.","9x15 pixel monospace font.","9x15 pixel monospace font.","9x18 pixel monospace font.","9x18 pixel monospace font.","10x20 pixel monospace font.","4x6 pixel monospace font.","5x7 pixel monospace font.","5x8 pixel monospace font.","6x10 pixel monospace font.","6x12 pixel monospace font.","6x13 pixel monospace font.","6x13 pixel monospace font.","6x13 pixel monospace font.","6x9 pixel monospace font.","7x13 pixel monospace font.","7x13 pixel monospace font.","7x13 pixel monospace font.","7x14 pixel monospace font.","7x14 pixel monospace font.","8x13 pixel monospace font.","8x13 pixel monospace font.","8x13 pixel monospace font.","9x15 pixel monospace font.","9x15 pixel monospace font.","9x18 pixel monospace font.","9x18 pixel monospace font.","10x20 pixel monospace font.","4x6 pixel monospace font.","5x7 pixel monospace font.","5x8 pixel monospace font.","6x10 pixel monospace font.","6x12 pixel monospace font.","6x13 pixel monospace font.","6x13 pixel monospace font.","6x13 pixel monospace font.","6x9 pixel monospace font.","7x13 pixel monospace font.","7x13 pixel monospace font.","7x13 pixel monospace font.","7x14 pixel monospace font.","7x14 pixel monospace font.","8x13 pixel monospace font.","8x13 pixel monospace font.","8x13 pixel monospace font.","9x15 pixel monospace font.","9x15 pixel monospace font.","9x18 pixel monospace font.","9x18 pixel monospace font.","10x20 pixel monospace font.","4x6 pixel monospace font.","5x7 pixel monospace font.","5x8 pixel monospace font.","6x10 pixel monospace font.","6x12 pixel monospace font.","6x13 pixel monospace font.","6x13 pixel monospace font.","6x13 pixel monospace font.","6x9 pixel monospace font.","7x13 pixel monospace font.","7x13 pixel monospace font.","7x13 pixel monospace font.","7x14 pixel monospace font.","7x14 pixel monospace font.","8x13 pixel monospace font.","8x13 pixel monospace font.","8x13 pixel monospace font.","9x15 pixel monospace font.","9x15 pixel monospace font.","9x18 pixel monospace font.","9x18 pixel monospace font.","10x20 pixel monospace font.","4x6 pixel monospace font.","5x7 pixel monospace font.","5x8 pixel monospace font.","6x10 pixel monospace font.","6x12 pixel monospace font.","6x13 pixel monospace font.","6x13 pixel monospace font.","6x13 pixel monospace font.","6x9 pixel monospace font.","7x13 pixel monospace font.","7x13 pixel monospace font.","7x13 pixel monospace font.","7x14 pixel monospace font.","7x14 pixel monospace font.","8x13 pixel monospace font.","8x13 pixel monospace font.","8x13 pixel monospace font.","9x15 pixel monospace font.","9x15 pixel monospace font.","9x18 pixel monospace font.","9x18 pixel monospace font.","10x20 pixel monospace font.","4x6 pixel monospace font.","5x7 pixel monospace font.","5x8 pixel monospace font.","6x10 pixel monospace font.","6x12 pixel monospace font.","6x13 pixel monospace font.","6x13 pixel monospace font.","6x13 pixel monospace font.","6x9 pixel monospace font.","7x13 pixel monospace font.","7x13 pixel monospace font.","7x13 pixel monospace font.","7x14 pixel monospace font.","7x14 pixel monospace font.","8x13 pixel monospace font.","8x13 pixel monospace font.","8x13 pixel monospace font.","9x15 pixel monospace font.","9x15 pixel monospace font.","9x18 pixel monospace font.","9x18 pixel monospace font.","10x20 pixel monospace font.","6x13 pixel monospace font.","7x14 pixel monospace font.","8x13 pixel monospace font.","9x15 pixel monospace font.","9x18 pixel monospace font.","ASCII.","ASCII.","Mapping from characters to glyph indices.","ISO/IEC 8859 Part 1: Latin-1, Western European.","ISO/IEC 8859 Part 10: Latin-6, Nordic.","ISO/IEC 8859 Part 13: Latin-7, Baltic Rim.","ISO/IEC 8859 Part 14: Latin-8, Celtic.","ISO/IEC 8859 Part 15: Latin-9 (revised Latin-1).","ISO/IEC 8859 Part 16: Latin-10: South-East European.","ISO/IEC 8859 Part 2: Latin-2, Central European.","ISO/IEC 8859 Part 3: Latin-3, South European.","ISO/IEC 8859 Part 4: Latin-4, North European.","ISO/IEC 8859 Part 5: Latin/Cyrillic.","ISO/IEC 8859 Part 7: Latin/Greek.","ISO/IEC 8859 Part 9: Latin-5, Turkish.","ISO/IEC 8859 Part 1: Latin-1, Western European.","ISO/IEC 8859 Part 10: Latin-6, Nordic.","ISO/IEC 8859 Part 13: Latin-7, Baltic Rim.","ISO/IEC 8859 Part 14: Latin-8, Celtic.","ISO/IEC 8859 Part 15: Latin-9 (revised Latin-1).","ISO/IEC 8859 Part 16: Latin-10: South-East European.","ISO/IEC 8859 Part 2: Latin-2, Central European.","ISO/IEC 8859 Part 3: Latin-3, South European.","ISO/IEC 8859 Part 4: Latin-4, North European.","ISO/IEC 8859 Part 5: Latin/Cyrillic.","ISO/IEC 8859 Part 7: Latin/Greek.","ISO/IEC 8859 Part 9: Latin-5, Turkish.","JIS X 0201: Japanese katakana (halfwidth).","JIS X 0201: Japanese katakana (halfwidth).","Mapping.","Glyph mapping stored as a UTF-8 string.","","","","","","","Returns an iterator over the characters in this mapping.","","","","","","","Returns if the mapping contains the given char.","","","","","","","Returns a glyph mapping for this mapping.","","","Maps a character to a glyph index.","","","","Returns an iterator over all mappings.","Returns the MIME identifier for this mapping.","","Creates a new glyph mapping.","","","","","Returns an iterator over the character ranges.","","","","","","","","","","","","","Black color (0% luma).","Black color (R: 0%, G: 0%, B: 0%)","Blue color (R: 0%, G: 0%, B: 100%)","Bgr555 color.","Bgr565 color.","Bgr666 color.","Bgr888 color.","Binary color."," Alice Blue"," Antique White"," Aqua"," Aquamarine"," Azure"," Beige"," Bisque"," Black"," Blanched Almond"," Blue"," Blue Violet"," Brown"," Burly Wood"," Cadet Blue"," Chartreuse"," Chocolate"," Coral"," Cornflower Blue"," Cornsilk"," Crimson"," Cyan"," Dark Blue"," Dark Cyan"," Dark Goldenrod"," Dark Gray"," Dark Green"," Dark Khaki"," Dark Magenta"," Dark Olive Green"," Dark Orange"," Dark Orchid"," Dark Red"," Dark Salmon"," Dark Sea Green"," Dark Slate Blue"," Dark Slate Gray"," Dark Turquoise"," Dark Violet"," Deep Pink"," Deep Sky Blue"," Dim Gray"," Dodger Blue"," Fire Brick"," Floral White"," Forest Green"," Fuchsia"," Gainsboro"," Ghost White"," Gold"," Goldenrod"," Gray"," Green"," Green Yellow"," Honeydew"," Hot Pink"," Indian Red"," Indigo"," Ivory"," Khaki"," Lavender"," Lavender Blush"," Lawn Green"," Lemon Chiffon"," Light Blue"," Light Coral"," Light Cyan"," Light Goldenrod Yellow"," Light Gray"," Light Green"," Light Pink"," Light Salmon"," Light Sea Green"," Light Sky Blue"," Light Slate Gray"," Light Steel Blue"," Light Yellow"," Lime"," Lime Green"," Linen"," Magenta"," Maroon"," Medium Aquamarine"," Medium Blue"," Medium Orchid"," Medium Purple"," Medium Sea Green"," Medium Slate Blue"," Medium Spring Green"," Medium Turquoise"," Medium Violet Red"," Midnight Blue"," Mint Cream"," Misty Rose"," Moccasin"," Navajo White"," Navy"," Old Lace"," Olive"," Olive Drab"," Orange"," Orange Red"," Orchid"," Pale Goldenrod"," Pale Green"," Pale Turquoise"," Pale Violet Red"," Papaya Whip"," Peach Puff"," Peru"," Pink"," Plum"," Powder Blue"," Purple"," Rebeccapurple"," Red"," Rosy Brown"," Royal Blue"," Saddle Brown"," Salmon"," Sandy Brown"," Seashell"," Sea Green"," Sienna"," Silver"," Sky Blue"," Slate Blue"," Slate Gray"," Snow"," Spring Green"," Steel Blue"," Tan"," Teal"," Thistle"," Tomato"," Turquoise"," Violet"," Wheat"," White"," White Smoke"," Yellow"," Yellow Green","Cyan color (R: 0%, G: 100%, B: 100%)","Green color (R: 0%, G: 100%, B: 0%)","2 bit grayscale color.","4 bit grayscale color.","8 bit grayscale color.","Grayscale color.","Convert a <code>PixelColor</code> into its underlying storage type","Magenta color (R: 100%, G: 0%, B: 100%)","The maximum value in the blue channel.","The maximum value in the green channel.","The maximum value in the red channel.","Inactive pixel.","Active pixel.","Pixel color trait.","Red color (R: 100%, G: 0%, B: 0%)","Raw data type.","Rgb555 color.","Rgb565 color.","Rgb666 color.","Rgb888 color.","RGB color.","The underlying storage type for the pixel color","White color (100% luma).","White color (R: 100%, G: 100%, B: 100%)","Named colors as defined in the CSS specification.","Yellow color (R: 100%, G: 100%, B: 0%)","","","","","","","","","","","","","Returns the blue channel valueeturns the green channel value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Convert the <code>PixelColor</code> into its raw storage form","Inverts the color.","Returns <code>true</code> if this color is <code>Off</code>.","Returns <code>true</code> if this color is <code>On</code>.","Returns the luma channel value.","","","","","","","","","","","","","","","Creates a new grayscale color.","Creates a new grayscale color.","Creates a new grayscale color.","Creates a new Rgb555 color. Too large channel values will …","Creates a new Bgr555 color. Too large channel values will …","Creates a new Rgb565 color. Too large channel values will …","Creates a new Bgr565 color. Too large channel values will …","Creates a new Rgb666 color. Too large channel values will …","Creates a new Bgr666 color. Too large channel values will …","Creates a new Rgb888 color. Too large channel values will …","Creates a new Bgr888 color. Too large channel values will …","","","","","","","","","","","","","","","","","","","","","","","","","Returns the red channel value.","","","","","","","","","Raw color types.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Bits per pixel.","Big endian byte order marker.","Raw data byte order.","Return type of methods in this trait.","Little endian byte order marker.","Trait implemented by all <code>RawUx</code> types.","1 bit per pixel raw data.","16 bits per pixel raw data.","18 bits per pixel raw data.","2 bits per pixel raw data.","24 bits per pixel raw data.","32 bits per pixel raw data.","4 bits per pixel raw data.","8 bits per pixel raw data.","Storage type.","Trait to convert colors into a byte array.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts a <code>u32</code> into a <code>RawData</code> type.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts this raw data into the storage type.","","","","","","","","","","","","","","","","","Creates a new color from the least significant","Creates a new color from the least significant","Creates a new color from the least significant","Creates a new color from the least significant","Creates a new color from the least significant","Creates a new color from the least significant","Creates a new color from the least significant","Creates a new color from the least significant","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts a color into a byte array with big endian byte …","","","","","","","","","Converts a color into a byte array with little endian …","","","","","","","","","Converts a color into a byte array with native byte order.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Center.","Color type.","Trait to check if a point is inside a closed shape.","The definition of each corner radius for a rounded …","<code>CornerRadii</code> builder.","Inside.","Iterator over all points inside the primitive.","Offset outline trait.","Output type.","Outside.","Create an iterator over all points in the primitive.","Primitive trait","Style properties for primitives.","Primitive style builder.","Stroke alignment.","Styled.","Styled dimensions.","Styled drawable.","The arc primitive","","","","","","","","","","","","","Bottom left corner radius","Bottom right corner radius","","Builds the primitive style.","","","","","The circle primitive","","","","","","","","","Returns <code>true</code> if the given point is inside the shape.","","","","","","Draws the primitive using the given style.","The ellipse primitive","","","","","Returns the fill area.","Sets the fill color.","Fill color of the primitive.","","","","","","","","","","","","","","","","","","Converts this primitive into a <code>Styled</code>.","Returns if a primitive drawn with this style is …","The line primitive","","","","Creates a primitive style without fill and stroke.","Creates a new primitive style builder.","Creates a styled.","Offsets the outline of the shape.","","","","","","","","","Returns an iterator over the pixels in this styled …","Returns an iterator over all points inside the primitive.","The polyline primitive","Primitive.","The rectangle primitive. Also good for drawing squares.","Resets the fill color to transparent.","Resets the stroke color to transparent.","The rounded rectangle primitive.","","","","","The sector primitive","Sets the stroke alignment.","Stroke alignment.","Returns the stroke area.","Sets the stroke color.","Stroke color of the primitive.","Sets the stroke width.","Stroke width in pixels.","Style.","Returns the bounding box using the given style.","Top left corner radius","Top right corner radius","","","The triangle primitive.","","","","","","","","","","","","","","","","","Creates a fill primitive style.","Creates a stroke primitive style.","","","","","Arc primitive","Iterator over all points on the arc line.","Pixel iterator for each pixel in the arc border","Angle at which the arc starts","Angle defining the arc sweep starting at angle_start","","","","","","","","","","","Return the center point of the arc.","","","","","","","Diameter of the circle supporting the arc","","","","","","","","","","","","Creates an arc based on a circle.","","","","","","","","","Create a new arc delimited with a top-left point with a …","","","","","","","","","","","","Returns a circle with the same <code>top_left</code> and <code>diameter</code> as …","Top-left point of the bounding-box of the circle …","Translate the arc from its current position to a new …","Translate the arc from its current position to a new …","","","","","","","","","","","","","","Create a new arc centered around a given point with a …","","","","Circle primitive","Iterator over all points inside the circle.","Pixel iterator for each pixel in the circle border","","","","","","","","","","","Return the center point of the circle","","","","","","","","","","Diameter of the circle","","","","","","","","","","","","","","","","","","","","","","","Create a new circle delimited with a top-left point with …","","","","","","","","","","","","","Top-left point of circle’s bounding box","Translate the circle from its current position to a new …","Translate the circle from its current position to a new …","","","","","","","","","","","","","","Create a new circle centered around a given point with a …","","","","Ellipse primitive","Iterator over all points inside the ellipse","Pixel iterator for each pixel in the ellipse border","","","","","","","","","","","Return the center point of the ellipse","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a new ellipse delimited with a top-left point with …","","","","","","","","","","","","Size of the ellipse","","Top-left point of ellipse’s bounding box","Translate the ellipse from its current position to a new …","Translate the ellipse from its current position to a new …","","","","","","","","","","","","","","Create a new ellipse centered around a given point with a …","","","","Line primitive","Iterator over all points on the line.","Styled line iterator.","","","","","","","","","","","","","","","","","","","","Compute the delta (<code>end - start</code>) of the line.","","","End point","","","","","","","","","","","","","","","","Compute the midpoint of the line.","","","Create a new line","","","","","","","","","","","","Start point","","Translate the line from its current position to a new …","Translate the line from its current position to a new …","","","","","","","","","","","","","","","","","An iterator over all pixel positions on the polyline","Polyline primitive","Pixel iterator for each pixel in the line","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a new polyline from a list of vertices","","","","","","","","","","","","","Translate the polyline from its current position to a new …","An offset to apply to the polyline as a whole","Translate the polyline from its current position to a new …","","","","","","","","","","","","","","All vertices in the line","","","","Iterator over all points inside the rectangle.","Rectangle primitive","Pixel iterator for each pixel in the rect border","Returns an anchor point.","","","","","","","","","","Returns the bottom right corner of this rectangle.","","Returns the center of this rectangle.","","","","","","","","Returns the range of X coordinates in this rectangle.","","Return whether the rectangle contains a given point.","","","","Create a points iterator that returns no items.","","","","","","","","","","","","","Returns a new <code>Rectangle</code> containing the intersection of …","","","","","","Returns <code>true</code> is the rectangle is zero sized.","","","","Creates a new rectangle from the top left point and the …","","","Offset the rectangle by a given value.","","","","","","","Returns a resized copy of this rectangle.","Returns the range of Y coordinates in this rectangle.","","","","Size of the rectangle.","","Top left point of the rectangle.","Translate the rect from its current position to a new …","Translate the rect from its current position to a new …","","","","","","","","","","","","","","Creates a new rectangle from the center point and the …","Creates a new rectangle from two corners.","","","","Returns a zero sized rectangle.","The definition of each corner radius for a rounded …","<code>CornerRadii</code> builder.","Iterator over all points inside the rounded rectangle.","Rounded rectangle primitive.","Pixel iterator for each pixel in the rect border","Set all corner radii to the same value.","","","","","","","","","","","","","","","","Set the bottom left and bottom right corner radii to the …","Set the bottom left corner radius.","Bottom left corner radius","Set the bottom right corner radius.","Bottom right corner radius","","Consume the builder and produce a <code>CornerRadii</code> …","","","","","","","","","","","","","","Return the rounded rectangle with confined corner radii.","","The radius of each corner","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Set the top left and bottom left corner radii to the same …","","","","","","Create a new set of corner radii with all corners having …","Create a new corner radii builder.","Creates a new rounded rectangle with the given corner …","","","","","","","","","","","","","The base rectangle","Set the top right and bottom right corner radii to the …","","","","","","","Set the top left and top right corner radii to the same …","Set the top left corner radius.","Top left corner radius","Set the top right corner radius.","Top right corner radius","Translate the rounded rectangle from its current position …","Translate the rounded rectangle from its current position …","","","","","","","","","","","","","","","","","","","","","","Creates a new rounded rectangle with equal corner radius …","","","","","","Iterator over all points inside the sector.","Sector primitive","Pixel iterator for each pixel in the sector border","Angle at which the sector starts","Angle defining the sector sweep starting at angle_start","","","","","","","","","","","Return the center point of the sector","","","","","","","","Diameter of the circle supporting the sector","","","","","","","","","","","","Creates an arc based on a circle.","","","","","","","","","Create a new sector delimited with a top-left point with …","","","","","","","","","","","","","Returns a circle with the same <code>top_left</code> and <code>diameter</code> as …","Top-left point of the bounding-box of the circle …","Translate the sector from its current position to a new …","Translate the sector from its current position to a new …","","","","","","","","","","","","","","Create a new sector centered around a given point with a …","","","","Iterator over all points inside the triangle.","Pixel iterator for each pixel in the triangle border","Triangle primitive","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new triangle from a <code>Point</code> slice.","","","","","","","","","","","","Create a new triangle with the given vertices.","","","","","","","","","","","","Translate the triangle from its current position to a new …","Translate the triangle from its current position to a new …","","","","","","","","","","","","","","The vertices of the triangle.","","","","Horizontal text alignment.","Alphabetic baseline.","Text baseline.","Bottom.","Center.","Text decoration with a custom color.","Text decoration color.","Left.","Text line height.","Middle.","No text decoration.","Relative line height in percent of the default line …","Absolute line height in pixels.","Right.","Text drawable.","Text decoration with the same color as the text.","Text style.","Builder for text styles.","Top.","Sets the horizontal text alignment.","Horizontal text alignment.","","","","","","","","Sets the text baseline.","Text baseline.","","","","","","","","","","","","","","","","Builds the text style.","The character style.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>true</code> if the decoration_color is <code>Custom</code>.","Returns <code>true</code> if the decoration_color is <code>None</code>.","Returns <code>true</code> if the decoration_color is <code>TextColor</code>.","Sets the line height.","Line height.","","","","","","Creates a text drawable with the default text style.","Creates a new text style builder.","","","","","","","","","","","","","","","The position.","Text renderer.","","","","","","","","The string.","The text style.","Converts the line height to an absolute pixel distance.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a text drawable with the given alignment.","Creates a new text style with the given alignment.","Creates a text drawable with the given baseline.","Creates a new text style with the given baseline.","Creates a text drawable with the given text style.","","","","","","","","Character style.","The color type.","Color type.","Text metrics.","Text renderer.","","","","Bounding box.","","","","Draws a string.","Draws whitespace of the given width.","","","","","","Returns the default line height.","Returns the text metrics for a string.","","The position of the next text.","","","","Sets the background color.","Sets the background color.","Sets the strikethrough color.","Sets the strikethrough color.","Sets the text color.","Sets the text color.","Sets the underline color.","Sets the underline color.","","","","","","Transform operations","Move the origin of an object by a given number of (x, y) …","Move the origin of an object by a given number of (x, y) …"],"i":[1,1,2,0,2,0,1,1,1,1,1,1,1,2,1,0,1,0,1,1,0,1,0,1,0,0,0,1,1,1,0,0,0,1,0,0,1,1,1,1,1,0,3,0,0,0,0,3,0,4,5,6,7,4,5,6,7,4,5,6,7,4,5,6,7,4,5,6,7,5,7,3,8,4,5,6,7,8,4,5,6,7,8,4,5,6,7,3,4,5,6,7,4,5,6,7,3,4,5,6,7,3,4,5,6,7,4,5,6,7,4,5,6,7,4,5,6,7,4,5,6,7,6,8,4,5,6,7,4,5,6,7,4,5,6,7,4,5,6,7,4,5,6,7,4,5,6,7,0,0,0,9,9,9,9,9,9,0,0,0,0,9,9,9,10,11,10,11,11,12,10,11,11,12,10,11,12,9,10,11,12,9,10,11,12,9,13,10,11,12,9,10,11,12,9,11,12,9,11,12,11,12,11,12,11,12,11,12,14,11,12,11,12,10,11,12,9,10,11,11,12,12,9,10,11,11,11,11,12,12,12,12,9,10,10,11,12,9,12,11,12,10,11,12,9,11,12,11,12,10,11,12,10,11,11,12,11,12,10,10,11,12,9,10,11,12,9,14,12,10,11,12,9,12,15,10,11,11,12,10,11,11,12,10,10,10,11,11,11,11,12,9,10,11,12,9,10,11,12,9,10,11,12,9,12,10,11,12,9,11,11,12,11,11,12,10,11,12,16,0,0,0,0,0,0,0,17,18,19,17,18,19,17,18,19,17,18,19,17,18,19,17,19,17,16,17,18,19,16,17,18,17,17,18,19,17,18,19,17,17,18,19,17,17,19,17,17,18,19,17,17,18,19,17,18,20,19,19,17,18,19,17,18,19,17,18,19,17,18,19,17,18,19,0,0,0,21,22,0,0,21,0,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,0,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,0,0,0,0,25,26,27,28,25,26,27,28,25,26,27,28,25,26,27,28,25,25,26,28,25,25,26,27,28,25,26,27,28,25,25,26,27,28,25,25,25,25,25,25,25,25,25,25,26,27,28,25,25,26,26,26,27,28,28,28,28,28,28,26,26,26,27,28,28,28,28,28,28,25,26,27,28,25,25,26,27,28,26,26,26,27,28,28,28,28,28,28,26,28,25,26,27,28,25,26,27,28,25,26,27,28,25,26,27,28,25,26,27,28,0,0,29,29,30,30,30,30,30,30,30,30,30,29,30,30,30,30,29,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,0,0,0,0,0,31,32,33,34,32,31,33,31,32,33,34,31,32,33,34,32,33,33,31,32,33,34,31,32,33,34,34,34,34,34,31,31,31,33,34,31,32,33,34,32,31,31,32,32,33,34,33,34,34,33,31,32,33,34,31,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,31,31,34,31,32,34,34,31,32,33,34,34,32,32,32,32,31,32,33,34,31,31,31,31,32,33,31,32,32,31,31,32,33,34,31,32,33,34,31,32,33,34,32,33,31,32,31,32,33,34,31,32,33,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,35,0,0,0,0,0,0,0,0,0,0,0,0,0,35,35,35,35,35,35,35,35,35,35,35,35,0,35,0,0,36,35,36,35,36,35,36,36,35,36,35,36,35,36,36,35,36,35,36,35,35,36,35,37,36,36,35,35,35,36,36,36,35,36,35,36,36,35,36,35,36,35,36,35,36,35,36,35,38,39,39,0,0,0,0,0,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,39,39,0,0,0,0,0,39,39,39,39,41,41,0,39,42,0,0,0,0,0,43,38,39,0,39,41,44,45,46,47,48,49,50,51,52,53,54,39,47,48,49,50,51,52,53,54,41,44,45,46,47,48,49,50,51,52,53,54,41,44,45,46,47,48,49,50,51,52,53,54,41,44,45,46,47,48,49,50,53,54,41,44,45,46,47,48,49,50,51,52,53,54,41,44,45,46,47,48,49,50,51,52,53,54,41,44,45,46,47,48,49,50,51,52,53,54,41,44,45,46,47,48,49,50,53,54,41,44,45,46,47,48,49,50,51,52,53,54,41,44,45,46,47,48,49,50,51,52,53,54,41,44,45,46,47,48,49,50,51,52,53,54,41,41,41,41,41,41,41,41,41,41,41,41,44,44,44,44,44,44,44,44,44,44,44,45,45,45,45,45,45,45,45,45,45,45,46,46,46,46,46,46,46,46,46,46,46,47,47,47,47,47,47,47,47,47,47,47,48,48,48,48,48,48,48,48,48,48,48,49,49,49,49,49,49,49,49,49,49,49,50,50,50,50,50,50,50,50,50,50,50,51,51,52,52,53,53,53,53,53,53,53,53,53,53,53,54,54,54,54,54,54,54,54,54,54,54,39,47,48,49,50,51,52,53,54,41,44,45,46,47,48,49,50,51,52,53,54,41,44,45,46,47,48,49,50,51,52,53,54,43,41,41,41,38,44,45,46,44,45,46,47,48,49,50,51,52,53,54,44,45,46,47,48,49,50,51,52,53,54,41,44,45,46,47,48,49,50,51,52,53,54,41,44,45,46,47,48,49,50,51,52,53,54,39,47,48,49,50,51,52,53,54,0,41,44,45,46,47,48,49,50,51,52,53,54,41,44,45,46,47,48,49,50,51,52,53,54,41,44,45,46,47,48,49,50,51,52,53,54,41,44,45,46,47,48,49,50,51,52,53,54,41,44,45,46,47,48,49,50,51,52,53,54,41,44,45,46,47,48,49,50,51,52,53,54,41,44,45,46,47,48,49,50,51,52,53,54,41,44,45,46,47,48,49,50,51,52,53,54,41,44,45,46,47,48,49,50,51,52,53,54,55,0,0,56,0,0,0,0,0,0,0,0,0,0,55,0,57,58,59,60,61,62,63,64,65,66,57,58,59,60,61,62,63,64,65,66,57,58,59,60,61,62,63,64,65,66,57,58,59,60,61,62,63,64,65,66,57,58,59,60,61,62,63,64,65,66,57,58,59,60,61,62,63,64,65,66,57,58,59,60,61,62,63,64,57,58,59,60,61,62,63,64,65,66,57,58,59,60,61,62,63,64,65,66,57,57,57,58,58,58,59,59,59,60,60,60,61,61,61,61,61,61,62,62,62,62,63,63,63,63,64,64,65,66,55,57,58,59,60,61,62,63,64,57,58,59,60,61,62,63,64,65,66,57,58,59,60,61,62,63,64,65,66,55,57,58,59,60,61,62,63,64,57,58,59,60,61,62,63,64,57,58,59,60,61,62,63,64,57,58,59,60,61,62,63,64,65,66,57,58,59,60,61,62,63,64,65,66,57,58,59,60,61,62,63,64,65,66,56,57,58,59,60,61,62,63,64,56,57,58,59,60,61,62,63,64,56,57,58,59,60,61,62,63,64,57,58,59,60,61,62,63,64,65,66,57,58,59,60,61,62,63,64,65,66,57,58,59,60,61,62,63,64,65,66,57,58,59,60,61,62,63,64,65,66,57,58,59,60,61,62,63,64,65,66,67,68,0,0,0,67,69,0,68,67,0,0,0,0,0,0,0,0,0,70,71,67,72,70,71,67,72,70,71,67,72,73,73,72,71,70,71,67,72,0,70,71,67,72,70,71,67,72,74,70,71,67,72,72,68,0,70,71,67,72,72,71,70,70,71,67,72,70,71,71,67,72,70,71,67,72,70,71,67,72,75,70,0,70,71,72,70,71,72,76,70,71,67,72,70,71,67,72,72,69,0,72,0,71,71,0,70,71,67,72,0,71,70,72,71,70,71,70,72,77,73,73,72,72,0,70,71,67,72,70,71,67,72,70,71,67,72,70,71,67,72,70,70,70,71,67,72,0,0,0,78,78,79,80,78,79,80,78,79,80,78,78,78,79,80,78,79,80,78,78,80,78,79,80,78,79,80,78,79,80,78,78,79,80,78,79,80,79,80,78,78,79,80,79,80,78,78,78,79,80,78,78,78,78,78,78,80,79,80,78,79,80,78,79,80,78,79,80,78,78,79,80,78,0,0,0,81,82,83,81,82,83,81,82,83,83,83,81,82,83,81,82,83,83,83,83,83,82,83,81,82,83,81,82,83,81,82,83,81,82,83,81,82,83,81,82,81,82,83,83,81,82,83,81,82,83,83,83,81,82,83,83,83,83,83,82,81,82,83,81,82,83,81,82,83,81,82,83,83,81,82,83,0,0,0,84,85,86,84,85,86,84,85,86,86,86,84,85,86,84,85,86,86,86,86,85,86,84,85,86,84,85,86,84,85,86,84,85,86,84,85,86,84,85,84,85,86,86,84,85,86,84,85,86,86,86,84,85,86,86,86,86,86,86,85,84,85,86,84,85,86,84,85,86,84,85,86,86,84,85,86,0,0,0,87,88,89,87,88,89,87,88,89,89,87,88,89,87,88,89,87,89,89,89,88,89,89,87,89,87,88,89,87,88,89,87,89,87,88,89,87,88,89,87,89,89,87,88,87,88,89,87,89,89,87,88,89,89,89,89,89,88,87,88,89,87,88,89,87,88,89,87,88,89,87,88,89,0,0,0,90,91,92,90,91,92,90,91,92,92,90,91,92,90,91,92,90,92,92,91,92,90,92,90,91,92,90,91,92,90,92,90,91,92,90,91,90,92,92,90,91,90,91,92,90,92,92,90,91,92,92,92,92,92,91,90,91,92,90,91,92,90,91,92,90,91,92,92,90,91,92,0,0,0,93,94,95,93,94,95,93,94,95,93,93,93,93,94,95,93,94,95,93,93,93,93,93,93,94,93,95,94,95,93,94,95,93,94,95,93,94,95,93,93,94,95,93,94,95,93,94,95,93,93,94,95,93,93,94,95,93,93,93,93,93,94,95,93,93,93,93,93,93,94,94,95,93,94,95,93,94,95,93,94,95,93,93,93,94,95,93,93,0,0,0,0,0,96,73,96,97,98,99,73,96,97,98,99,73,96,97,98,99,96,96,73,96,73,99,96,73,96,97,98,99,73,96,97,98,99,73,96,99,99,99,99,73,96,98,99,73,96,97,98,99,73,96,97,98,99,73,96,96,97,98,99,73,96,97,98,99,73,96,97,98,99,97,98,96,73,96,97,98,99,73,96,99,97,98,99,73,96,97,98,99,73,96,99,99,99,96,73,96,97,98,99,99,96,96,73,96,73,99,99,98,73,96,97,98,99,73,96,97,98,99,73,96,97,98,99,73,96,97,98,99,99,73,96,97,98,99,0,0,0,100,100,101,102,100,101,102,100,101,102,100,100,100,101,102,100,101,102,100,100,100,102,100,101,102,100,101,102,100,101,102,100,100,101,102,100,101,102,101,102,100,100,101,102,100,101,102,100,100,100,101,102,100,100,100,100,100,100,102,101,102,100,101,102,100,101,102,100,101,102,100,100,101,102,100,0,0,0,103,104,105,103,104,105,103,104,105,105,103,104,105,103,104,105,105,105,105,104,105,103,104,105,103,104,105,103,104,105,105,103,104,105,103,104,105,103,104,103,104,105,105,103,104,103,104,105,105,105,103,104,105,105,105,105,104,103,104,105,103,104,105,103,104,105,103,104,105,105,103,104,105,0,106,0,106,107,108,0,107,0,106,108,109,109,107,0,108,0,0,106,110,111,112,111,110,106,107,108,109,110,111,112,111,110,106,107,108,109,112,111,110,106,107,108,109,112,110,112,112,111,110,106,107,108,109,112,111,110,106,107,108,109,112,111,106,107,108,109,111,109,112,112,111,110,106,107,108,109,112,111,110,106,107,108,109,112,111,110,110,106,107,108,109,112,111,106,107,108,109,112,111,110,106,107,108,109,108,108,108,110,111,112,111,110,108,109,112,110,112,111,110,106,107,108,109,112,111,110,106,107,108,109,112,0,112,111,110,106,107,108,109,112,112,109,112,112,112,111,110,106,107,108,109,112,111,110,106,107,108,109,112,111,110,106,107,108,109,112,111,110,106,107,108,109,112,111,112,111,112,112,111,110,106,107,108,109,0,113,114,0,0,115,115,115,115,115,115,115,114,114,115,115,115,115,115,114,114,115,115,115,115,115,113,113,113,113,113,113,113,113,115,115,115,115,115,0,116,116],"f":[null,null,null,null,null,null,[[]],[[]],[[]],[[],["option",4]],[[],["pixel",3]],[[["pixel",3]],["ordering",4]],[[],["pixel",3]],[[],["result",4]],[[],["result",4]],null,[[["pixel",3]],["bool",15]],null,[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[]],null,[[]],null,[[]],null,null,null,[[["pixel",3]],["bool",15]],[[]],[[["pixel",3]],[["option",4,["ordering"]],["ordering",4]]],null,null,null,[[]],null,null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["rectangle",3]],[[],["rectangle",3]],[[],["rectangle",3]],[[],["rectangle",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["rectangle",3]],["clipped",3]],[[["rectangle",3]],["clipped",3]],[[["rectangle",3]],["clipped",3]],[[["rectangle",3]],["clipped",3]],[[["rectangle",3]],["clipped",3]],[[],["colorconverted",3]],[[],["colorconverted",3]],[[],["colorconverted",3]],[[],["colorconverted",3]],[[],["colorconverted",3]],[[["rectangle",3]],["cropped",3]],[[["rectangle",3]],["cropped",3]],[[["rectangle",3]],["cropped",3]],[[["rectangle",3]],["cropped",3]],[[["rectangle",3]],["cropped",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["rectangle",3]],["result",4]],[[["rectangle",3]],["result",4]],[[["rectangle",3]],["result",4]],[[["rectangle",3]],["result",4]],[[["rectangle",3]],["result",4]],[[["rectangle",3]],["result",4]],[[["rectangle",3]],["result",4]],[[["rectangle",3]],["result",4]],[[["rectangle",3]],["result",4]],[[["rectangle",3]],["result",4]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["size",3]],[[["point",3]],["translated",3]],[[["point",3]],["translated",3]],[[["point",3]],["translated",3]],[[["point",3]],["translated",3]],[[["point",3]],["translated",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[],["point",3]],[[["angle",3]],["angle",3]],[[["size",3]],["point",3]],[[["point",3]],["point",3]],[[["size",3]],["size",3]],[[["angle",3]]],[[["size",3]]],[[["point",3]]],[[["size",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["rectangle",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["angle",3]],[[],["point",3]],[[],["size",3]],[[],["anchorpoint",4]],[[["point",3]],["ordering",4]],[[["size",3]],["ordering",4]],[[["anchorpoint",4]],["ordering",4]],[[["point",3]],["point",3]],[[["size",3]],["size",3]],[[["point",3]],["point",3]],[[["size",3]],["size",3]],[[["point",3]],["point",3]],[[["size",3]],["size",3]],[[["point",3]],["point",3]],[[["size",3]],["size",3]],[[],["point",3]],[[],["size",3]],[[],["angle",3]],[[["i32",15]],["point",3]],[[["u32",15]],["size",3]],[[["i32",15]]],[[["u32",15]]],[[["angle",3]],["bool",15]],[[["point",3]],["bool",15]],[[["size",3]],["bool",15]],[[["anchorpoint",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[]],[[],["point",3]],[[]],[[],["point",3]],[[],["point",3]],[[],["size",3]],[[],["size",3]],[[],["size",3]],[[]],[[]],[[["f32",15]]],[[["f32",15]]],[[]],[[]],[[]],null,[[["usize",15]],["i32",15]],[[["usize",15]],["u32",15]],[[]],[[]],[[]],[[]],[[["i32",15]],["point",3]],[[["u32",15]],["size",3]],[[["i32",15]]],[[["u32",15]]],[[["angle",3]],["bool",15]],[[["point",3]],["bool",15]],[[["size",3]],["bool",15]],[[],["angle",3]],[[]],[[["i32",15]],["point",3]],[[["u32",15]],["size",3]],[[["i32",15]],["point",3]],[[["u32",15]],["size",3]],[[]],[[]],[[]],[[]],[[]],[[["angle",3]],[["option",4,["ordering"]],["ordering",4]]],[[["point",3]],[["option",4,["ordering"]],["ordering",4]]],[[["size",3]],[["option",4,["ordering"]],["ordering",4]]],[[["anchorpoint",4]],[["option",4,["ordering"]],["ordering",4]]],[[],["angle",3]],[[["size",3]],["size",3]],[[]],[[]],[[]],[[]],[[["size",3]],["size",3]],[[],["size",3]],[[["angle",3]],["angle",3]],[[["size",3]],["point",3]],[[["point",3]],["point",3]],[[["size",3]],["size",3]],[[["angle",3]]],[[["point",3]]],[[["size",3]]],[[["size",3]]],[[],["f32",15]],[[],["f32",15]],[[],["result",4]],[[],[["result",4,["point"]],["point",3]]],[[],["result",4]],[[],[["point",3],["result",4,["point"]]]],[[],[["point",3],["result",4,["point"]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],null,[[],["point",3]],[[],["size",3]],null,[[],["point",3]],[[],["size",3]],[[]],[[],["point",3]],[[],["size",3]],null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["rectangle",3]],[[],["rectangle",3]],[[],["rectangle",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["imageraw",3]],[[],["image",3]],[[["imageraw",3]],["ordering",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["rectangle",3]],["result",4]],[[["rectangle",3]],["result",4]],[[["rectangle",3]],["result",4]],[[["imageraw",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["imageraw",3]],["bool",15]],[[["u32",15]]],[[["point",3]]],[[["u32",15]]],[[]],[[]],[[]],[[["imageraw",3]],[["option",4,["ordering"]],["ordering",4]]],[[]],[[]],[[]],[[],["size",3]],[[],["size",3]],[[["rectangle",3]],["subimage",3]],[[["point",3]]],[[["point",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[],["result",4]],[[["rectangle",3]],["intopixels",3]],null,null,[[["point",3]],["translated",3]],null,[[]],[[]],[[]],[[],["option",4]],[[],["result",4]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["option",4]],[[]],[[]],[[["point",3]],["translated",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],null,[[]],[[]],[[]],[[],["option",4]],[[],["result",4]],[[["translated",3]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["translated",3]],["bool",15]],[[],["option",4]],[[]],[[]],[[["point",3]],["translated",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["rawdataslice",3]],[[["rawdataslice",3]],["ordering",4]],[[],["result",4]],[[],["result",4]],[[["rawdataslice",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["rawdataslice",3]],["bool",15]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[]],[[]],[[]],[[]],[[["rawdataslice",3]],[["option",4,["ordering"]],["ordering",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["point",3]],["translated",3]],[[["point",3]],["translated",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,[[],["rectangle",3]],[[["mockdisplay",3]]],[[["mockdisplay",3]]],[[]],[[]],[[]],[[]],[[]],[[],["rectangle",3]],[[["char",15]]],[[],["option",4]],[[["rectangle",3]],["clipped",3]],[[],["mockdisplay",3]],[[],["colorconverted",3]],[[],["char",15]],[[["rectangle",3]],["cropped",3]],[[]],[[["mockdisplay",3]],[["rgb888",3],["mockdisplay",3,["rgb888"]]]],[[],["result",4]],[[["point",3]]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[],["mockdisplay",3]],[[]],[[["point",3]],["option",4]],[[]],[[],["mockdisplay",3]],[[]],[[]],[[]],[[["bool",15]]],[[["bool",15]]],[[["point",3],["option",4]]],[[["option",4]]],[[],["size",3]],[[],["mockdisplay",3]],[[["point",3]],["translated",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["monotextstyle",3]],null,null,[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["monotextstyle",3]],[[],["monotextstylebuilder",3]],[[],["monofont",3]],[[],["decorationdimensions",3]],[[["decorationdimensions",3]],["ordering",4]],[[],["decorationdimensions",3]],[[["u32",15]]],[[["u32",15]]],[[["str",15],["point",3],["baseline",4]],[["point",3],["result",4,["point"]]]],[[["baseline",4],["u32",15],["point",3]],[["point",3],["result",4,["point"]]]],[[["monotextstyle",3]],["bool",15]],[[],["bool",15]],[[["decorationdimensions",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["monofont",3]],["monotextstylebuilder",3]],null,[[]],[[["monotextstyle",3]]],[[]],[[]],[[]],null,[[]],null,null,[[]],[[]],[[]],[[]],[[],["bool",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["u32",15]],null,[[["str",15],["point",3],["baseline",4]],["textmetrics",3]],[[["monotextstyle",3]],["bool",15]],[[["decorationdimensions",3]],["bool",15]],[[["monofont",3]]],[[]],[[["u32",15]]],null,[[]],[[]],[[]],[[]],[[["decorationdimensions",3]],[["option",4,["ordering"]],["ordering",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["option",4]]],[[["decorationcolor",4]]],[[["option",4]]],[[["decorationcolor",4]]],[[]],null,null,[[]],[[]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[],["strglyphmapping",3]],[[],["mapping",4]],[[["strglyphmapping",3]],["ordering",4]],[[["mapping",4]],["ordering",4]],[[["char",15]],["bool",15]],[[["strglyphmapping",3]],["bool",15]],[[["mapping",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["strglyphmapping",3]],[[]],[[]],[[["char",15]],["usize",15]],[[["char",15]],["usize",15]],[[]],[[]],[[]],[[],["str",15]],[[["strglyphmapping",3]],["bool",15]],[[["usize",15],["str",15]]],[[]],[[]],[[["strglyphmapping",3]],[["option",4,["ordering"]],["ordering",4]]],[[["mapping",4]],[["option",4,["ordering"]],["ordering",4]]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["u8",15]],[[],["u8",15]],[[],["u8",15]],[[],["u8",15]],[[],["u8",15]],[[],["u8",15]],[[],["u8",15]],[[],["u8",15]],[[],["u8",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["char",15]]],[[["char",15]]],[[["char",15]]],[[["char",15]]],[[["char",15]]],[[["char",15]]],[[["char",15]]],[[["char",15]]],[[["char",15]]],[[["char",15]]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["binarycolor",4]],[[],["gray2",3]],[[],["gray4",3]],[[],["gray8",3]],[[],["rgb555",3]],[[],["bgr555",3]],[[],["rgb565",3]],[[],["bgr565",3]],[[],["rgb666",3]],[[],["bgr666",3]],[[],["rgb888",3]],[[],["bgr888",3]],[[["binarycolor",4]],["ordering",4]],[[["gray2",3]],["ordering",4]],[[["gray4",3]],["ordering",4]],[[["gray8",3]],["ordering",4]],[[["rgb555",3]],["ordering",4]],[[["bgr555",3]],["ordering",4]],[[["rgb565",3]],["ordering",4]],[[["bgr565",3]],["ordering",4]],[[["rgb666",3]],["ordering",4]],[[["bgr666",3]],["ordering",4]],[[["rgb888",3]],["ordering",4]],[[["bgr888",3]],["ordering",4]],[[],["char",15]],[[],["char",15]],[[],["char",15]],[[],["char",15]],[[],["char",15]],[[],["char",15]],[[],["char",15]],[[],["char",15]],[[],["char",15]],[[],["char",15]],[[],["binarycolor",4]],[[],["gray2",3]],[[],["gray4",3]],[[],["gray8",3]],[[],["rgb555",3]],[[],["bgr555",3]],[[],["rgb565",3]],[[],["bgr565",3]],[[],["rgb666",3]],[[],["bgr666",3]],[[],["rgb888",3]],[[],["bgr888",3]],[[["binarycolor",4]],["bool",15]],[[["gray2",3]],["bool",15]],[[["gray4",3]],["bool",15]],[[["gray8",3]],["bool",15]],[[["rgb555",3]],["bool",15]],[[["bgr555",3]],["bool",15]],[[["rgb565",3]],["bool",15]],[[["bgr565",3]],["bool",15]],[[["rgb666",3]],["bool",15]],[[["bgr666",3]],["bool",15]],[[["rgb888",3]],["bool",15]],[[["bgr888",3]],["bool",15]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[]],[[["rawu1",3]],["binarycolor",4]],[[["gray8",3]],["binarycolor",4]],[[["bool",15]],["binarycolor",4]],[[["bgr565",3]],["binarycolor",4]],[[["rgb888",3]],["binarycolor",4]],[[["rgb565",3]],["binarycolor",4]],[[["bgr888",3]],["binarycolor",4]],[[["bgr555",3]],["binarycolor",4]],[[["gray2",3]],["binarycolor",4]],[[["rgb555",3]],["binarycolor",4]],[[["gray4",3]],["binarycolor",4]],[[["bgr565",3]],["gray2",3]],[[["bgr888",3]],["gray2",3]],[[["binarycolor",4]],["gray2",3]],[[["rawu2",3]],["gray2",3]],[[["rgb888",3]],["gray2",3]],[[["bgr555",3]],["gray2",3]],[[]],[[["gray8",3]],["gray2",3]],[[["rgb555",3]],["gray2",3]],[[["gray4",3]],["gray2",3]],[[["rgb565",3]],["gray2",3]],[[["binarycolor",4]],["gray4",3]],[[["rgb555",3]],["gray4",3]],[[["bgr565",3]],["gray4",3]],[[["rawu4",3]],["gray4",3]],[[["bgr888",3]],["gray4",3]],[[["rgb888",3]],["gray4",3]],[[["gray8",3]],["gray4",3]],[[["bgr555",3]],["gray4",3]],[[]],[[["rgb565",3]],["gray4",3]],[[["gray2",3]],["gray4",3]],[[["bgr565",3]],["gray8",3]],[[["gray2",3]],["gray8",3]],[[["bgr888",3]],["gray8",3]],[[]],[[["bgr555",3]],["gray8",3]],[[["gray4",3]],["gray8",3]],[[["rawu8",3]],["gray8",3]],[[["rgb888",3]],["gray8",3]],[[["rgb565",3]],["gray8",3]],[[["binarycolor",4]],["gray8",3]],[[["rgb555",3]],["gray8",3]],[[["bgr565",3]],["rgb555",3]],[[]],[[["bgr555",3]],["rgb555",3]],[[["rgb565",3]],["rgb555",3]],[[["bgr888",3]],["rgb555",3]],[[["gray8",3]],["rgb555",3]],[[["rawu16",3]],["rgb555",3]],[[["binarycolor",4]],["rgb555",3]],[[["gray4",3]],["rgb555",3]],[[["rgb888",3]],["rgb555",3]],[[["gray2",3]],["rgb555",3]],[[["bgr565",3]],["bgr555",3]],[[["rgb555",3]],["bgr555",3]],[[["rgb565",3]],["bgr555",3]],[[["gray2",3]],["bgr555",3]],[[]],[[["bgr888",3]],["bgr555",3]],[[["binarycolor",4]],["bgr555",3]],[[["gray8",3]],["bgr555",3]],[[["rgb888",3]],["bgr555",3]],[[["rawu16",3]],["bgr555",3]],[[["gray4",3]],["bgr555",3]],[[["gray2",3]],["rgb565",3]],[[["rgb888",3]],["rgb565",3]],[[["rawu16",3]],["rgb565",3]],[[["rgb555",3]],["rgb565",3]],[[["binarycolor",4]],["rgb565",3]],[[]],[[["bgr555",3]],["rgb565",3]],[[["bgr565",3]],["rgb565",3]],[[["gray4",3]],["rgb565",3]],[[["bgr888",3]],["rgb565",3]],[[["gray8",3]],["rgb565",3]],[[["binarycolor",4]],["bgr565",3]],[[["bgr888",3]],["bgr565",3]],[[["gray2",3]],["bgr565",3]],[[]],[[["rgb555",3]],["bgr565",3]],[[["gray4",3]],["bgr565",3]],[[["rgb888",3]],["bgr565",3]],[[["rawu16",3]],["bgr565",3]],[[["rgb565",3]],["bgr565",3]],[[["bgr555",3]],["bgr565",3]],[[["gray8",3]],["bgr565",3]],[[]],[[["rawu18",3]],["rgb666",3]],[[["rawu18",3]],["bgr666",3]],[[]],[[["gray8",3]],["rgb888",3]],[[["rawu24",3]],["rgb888",3]],[[["rgb555",3]],["rgb888",3]],[[["rgb565",3]],["rgb888",3]],[[["bgr555",3]],["rgb888",3]],[[["bgr888",3]],["rgb888",3]],[[["binarycolor",4]],["rgb888",3]],[[["gray4",3]],["rgb888",3]],[[]],[[["bgr565",3]],["rgb888",3]],[[["gray2",3]],["rgb888",3]],[[["rawu24",3]],["bgr888",3]],[[["rgb888",3]],["bgr888",3]],[[["bgr565",3]],["bgr888",3]],[[["rgb555",3]],["bgr888",3]],[[["rgb565",3]],["bgr888",3]],[[["binarycolor",4]],["bgr888",3]],[[["gray4",3]],["bgr888",3]],[[["gray2",3]],["bgr888",3]],[[]],[[["gray8",3]],["bgr888",3]],[[["bgr555",3]],["bgr888",3]],[[],["u8",15]],[[],["u8",15]],[[],["u8",15]],[[],["u8",15]],[[],["u8",15]],[[],["u8",15]],[[],["u8",15]],[[],["u8",15]],[[],["u8",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["binarycolor",4]],[[],["bool",15]],[[],["bool",15]],[[],["u8",15]],[[],["u8",15]],[[],["u8",15]],[[],["u8",15]],[[["gray2",3]],["bool",15]],[[["gray4",3]],["bool",15]],[[["gray8",3]],["bool",15]],[[["rgb555",3]],["bool",15]],[[["bgr555",3]],["bool",15]],[[["rgb565",3]],["bool",15]],[[["bgr565",3]],["bool",15]],[[["rgb666",3]],["bool",15]],[[["bgr666",3]],["bool",15]],[[["rgb888",3]],["bool",15]],[[["bgr888",3]],["bool",15]],[[["u8",15]],["gray2",3]],[[["u8",15]],["gray4",3]],[[["u8",15]],["gray8",3]],[[["u8",15]],["rgb555",3]],[[["u8",15]],["bgr555",3]],[[["u8",15]],["rgb565",3]],[[["u8",15]],["bgr565",3]],[[["u8",15]],["rgb666",3]],[[["u8",15]],["bgr666",3]],[[["u8",15]],["rgb888",3]],[[["u8",15]],["bgr888",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["binarycolor",4]],[["option",4,["ordering"]],["ordering",4]]],[[["gray2",3]],[["option",4,["ordering"]],["ordering",4]]],[[["gray4",3]],[["option",4,["ordering"]],["ordering",4]]],[[["gray8",3]],[["option",4,["ordering"]],["ordering",4]]],[[["rgb555",3]],[["option",4,["ordering"]],["ordering",4]]],[[["bgr555",3]],[["option",4,["ordering"]],["ordering",4]]],[[["rgb565",3]],[["option",4,["ordering"]],["ordering",4]]],[[["bgr565",3]],[["option",4,["ordering"]],["ordering",4]]],[[["rgb666",3]],[["option",4,["ordering"]],["ordering",4]]],[[["bgr666",3]],[["option",4,["ordering"]],["ordering",4]]],[[["rgb888",3]],[["option",4,["ordering"]],["ordering",4]]],[[["bgr888",3]],[["option",4,["ordering"]],["ordering",4]]],[[],["u8",15]],[[],["u8",15]],[[],["u8",15]],[[],["u8",15]],[[],["u8",15]],[[],["u8",15]],[[],["u8",15]],[[],["u8",15]],[[],["u8",15]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["rawu1",3]],[[],["rawu2",3]],[[],["rawu4",3]],[[],["rawu8",3]],[[],["rawu16",3]],[[],["rawu18",3]],[[],["rawu24",3]],[[],["rawu32",3]],[[],["littleendian",4]],[[],["bigendian",4]],[[["rawu1",3]],["ordering",4]],[[["rawu2",3]],["ordering",4]],[[["rawu4",3]],["ordering",4]],[[["rawu8",3]],["ordering",4]],[[["rawu16",3]],["ordering",4]],[[["rawu18",3]],["ordering",4]],[[["rawu24",3]],["ordering",4]],[[["rawu32",3]],["ordering",4]],[[["littleendian",4]],["ordering",4]],[[["bigendian",4]],["ordering",4]],[[],["rawu1",3]],[[],["rawu2",3]],[[],["rawu4",3]],[[],["rawu8",3]],[[],["rawu16",3]],[[],["rawu18",3]],[[],["rawu24",3]],[[],["rawu32",3]],[[["rawu1",3]],["bool",15]],[[["rawu2",3]],["bool",15]],[[["rawu4",3]],["bool",15]],[[["rawu8",3]],["bool",15]],[[["rawu16",3]],["bool",15]],[[["rawu18",3]],["bool",15]],[[["rawu24",3]],["bool",15]],[[["rawu32",3]],["bool",15]],[[["littleendian",4]],["bool",15]],[[["bigendian",4]],["bool",15]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[]],[[["binarycolor",4]],["rawu1",3]],[[["u8",15]],["rawu1",3]],[[]],[[["u8",15]],["rawu2",3]],[[["gray2",3]],["rawu2",3]],[[["gray4",3]],["rawu4",3]],[[["u8",15]],["rawu4",3]],[[]],[[]],[[["gray8",3]],["rawu8",3]],[[["u8",15]],["rawu8",3]],[[]],[[["rgb565",3]],["rawu16",3]],[[["rgb555",3]],["rawu16",3]],[[["u16",15]],["rawu16",3]],[[["bgr555",3]],["rawu16",3]],[[["bgr565",3]],["rawu16",3]],[[["rgb666",3]],["rawu18",3]],[[]],[[["u32",15]],["rawu18",3]],[[["bgr666",3]],["rawu18",3]],[[]],[[["bgr888",3]],["rawu24",3]],[[["u32",15]],["rawu24",3]],[[["rgb888",3]],["rawu24",3]],[[["u32",15]],["rawu32",3]],[[]],[[]],[[]],[[["u32",15]]],[[["u32",15]],["rawu1",3]],[[["u32",15]],["rawu2",3]],[[["u32",15]],["rawu4",3]],[[["u32",15]],["rawu8",3]],[[["u32",15]],["rawu16",3]],[[["u32",15]],["rawu18",3]],[[["u32",15]],["rawu24",3]],[[["u32",15]],["rawu32",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["rawu1",3]],["bool",15]],[[["rawu2",3]],["bool",15]],[[["rawu4",3]],["bool",15]],[[["rawu8",3]],["bool",15]],[[["rawu16",3]],["bool",15]],[[["rawu18",3]],["bool",15]],[[["rawu24",3]],["bool",15]],[[["rawu32",3]],["bool",15]],[[["u8",15]],["rawu1",3]],[[["u8",15]],["rawu2",3]],[[["u8",15]],["rawu4",3]],[[["u8",15]],["rawu8",3]],[[["u16",15]],["rawu16",3]],[[["u32",15]],["rawu18",3]],[[["u32",15]],["rawu24",3]],[[["u32",15]],["rawu32",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["rawu1",3]],[["option",4,["ordering"]],["ordering",4]]],[[["rawu2",3]],[["option",4,["ordering"]],["ordering",4]]],[[["rawu4",3]],[["option",4,["ordering"]],["ordering",4]]],[[["rawu8",3]],[["option",4,["ordering"]],["ordering",4]]],[[["rawu16",3]],[["option",4,["ordering"]],["ordering",4]]],[[["rawu18",3]],[["option",4,["ordering"]],["ordering",4]]],[[["rawu24",3]],[["option",4,["ordering"]],["ordering",4]]],[[["rawu32",3]],[["option",4,["ordering"]],["ordering",4]]],[[["littleendian",4]],[["option",4,["ordering"]],["ordering",4]]],[[["bigendian",4]],[["option",4,["ordering"]],["ordering",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[],["rectangle",3]],[[],["primitivestyle",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],null,[[],["primitivestyle",3]],[[],["primitivestylebuilder",3]],[[],["strokealignment",4]],[[],["styled",3]],[[["primitivestyle",3]],["ordering",4]],[[["primitivestylebuilder",3]],["ordering",4]],[[["strokealignment",4]],["ordering",4]],[[["styled",3]],["ordering",4]],[[["point",3]],["bool",15]],[[]],[[],["primitivestylebuilder",3]],[[]],[[],["styled",3]],[[],["result",4]],[[],["result",4]],null,[[["primitivestyle",3]],["bool",15]],[[["primitivestylebuilder",3]],["bool",15]],[[["strokealignment",4]],["bool",15]],[[["styled",3]],["bool",15]],[[]],[[]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["primitivestyle",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["styled",3]],[[],["bool",15]],null,[[["primitivestyle",3]],["bool",15]],[[["primitivestylebuilder",3]],["bool",15]],[[["styled",3]],["bool",15]],[[]],[[]],[[]],[[["i32",15]]],[[]],[[]],[[]],[[]],[[["primitivestyle",3]],[["option",4,["ordering"]],["ordering",4]]],[[["primitivestylebuilder",3]],[["option",4,["ordering"]],["ordering",4]]],[[["strokealignment",4]],[["option",4,["ordering"]],["ordering",4]]],[[["styled",3]],[["option",4,["ordering"]],["ordering",4]]],[[]],[[]],null,null,null,[[]],[[]],null,[[]],[[]],[[]],[[]],null,[[["strokealignment",4]]],null,[[]],[[]],null,[[["u32",15]]],null,null,[[],["rectangle",3]],null,null,[[["point",3]]],[[["point",3]]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[["u32",15]]],[[]],[[]],[[]],[[]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["rectangle",3]],[[],["point",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["points",3]],[[],["styledpixelsiterator",3]],[[],["arc",3]],null,[[],["result",4]],[[["primitivestyle",3]],["result",4]],[[["points",3]],["bool",15]],[[["styledpixelsiterator",3]],["bool",15]],[[["arc",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["angle",3],["circle",3]]],[[]],[[]],[[]],[[]],[[]],[[["points",3]],["bool",15]],[[["styledpixelsiterator",3]],["bool",15]],[[["arc",3]],["bool",15]],[[["point",3],["u32",15],["angle",3]]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[["arc",3]],[["option",4,["ordering"]],["ordering",4]]],[[]],[[]],[[]],[[]],[[["primitivestyle",3]],["rectangle",3]],[[],["circle",3]],null,[[["point",3]]],[[["point",3]]],[[["point",3]],["translated",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[["point",3],["u32",15],["angle",3]]],[[]],[[]],[[]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["rectangle",3]],[[],["point",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["points",3]],[[],["styledpixelsiterator",3]],[[],["circle",3]],[[["circle",3]],["ordering",4]],[[["point",3]],["bool",15]],[[],["circle",3]],null,[[],["result",4]],[[["primitivestyle",3]],["result",4]],[[["points",3]],["bool",15]],[[["styledpixelsiterator",3]],["bool",15]],[[["circle",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["points",3]],["bool",15]],[[["styledpixelsiterator",3]],["bool",15]],[[["circle",3]],["bool",15]],[[["point",3],["u32",15]]],[[],["option",4]],[[],["option",4]],[[["i32",15]]],[[]],[[]],[[]],[[["circle",3]],[["option",4,["ordering"]],["ordering",4]]],[[]],[[]],[[]],[[]],[[["primitivestyle",3]],["rectangle",3]],null,[[["point",3]]],[[["point",3]]],[[["point",3]],["translated",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[["point",3],["u32",15]]],[[]],[[]],[[]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["rectangle",3]],[[],["point",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["points",3]],[[],["styledpixelsiterator",3]],[[],["ellipse",3]],[[["ellipse",3]],["ordering",4]],[[["point",3]],["bool",15]],[[],["ellipse",3]],[[],["result",4]],[[["primitivestyle",3]],["result",4]],[[["points",3]],["bool",15]],[[["styledpixelsiterator",3]],["bool",15]],[[["ellipse",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["points",3]],["bool",15]],[[["styledpixelsiterator",3]],["bool",15]],[[["ellipse",3]],["bool",15]],[[["point",3],["size",3]]],[[],["option",4]],[[],["option",4]],[[["i32",15]]],[[]],[[]],[[]],[[["ellipse",3]],[["option",4,["ordering"]],["ordering",4]]],[[]],[[]],[[]],[[]],null,[[["primitivestyle",3]],["rectangle",3]],null,[[["point",3]]],[[["point",3]]],[[["point",3]],["translated",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[["point",3],["size",3]]],[[]],[[]],[[]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["rectangle",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["points",3]],[[],["styledpixelsiterator",3]],[[],["line",3]],[[["points",3]],["ordering",4]],[[["line",3]],["ordering",4]],[[],["line",3]],[[],["point",3]],[[],["result",4]],[[["primitivestyle",3]],["result",4]],null,[[["points",3]],["bool",15]],[[["line",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["point",3]],[[["points",3]],["bool",15]],[[["line",3]],["bool",15]],[[["point",3]]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[["points",3]],[["option",4,["ordering"]],["ordering",4]]],[[["line",3]],[["option",4,["ordering"]],["ordering",4]]],[[]],[[]],[[]],[[]],null,[[["primitivestyle",3]],["rectangle",3]],[[["point",3]]],[[["point",3]]],[[["point",3]],["translated",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["rectangle",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["points",3]],[[],["styledpixelsiterator",3]],[[],["polyline",3]],[[["points",3]],["ordering",4]],[[["polyline",3]],["ordering",4]],[[],["polyline",3]],[[],["result",4]],[[["primitivestyle",3]],["result",4]],[[["points",3]],["bool",15]],[[["polyline",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["points",3]],["bool",15]],[[["polyline",3]],["bool",15]],[[]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[["points",3]],[["option",4,["ordering"]],["ordering",4]]],[[["polyline",3]],[["option",4,["ordering"]],["ordering",4]]],[[]],[[]],[[]],[[]],[[["primitivestyle",3]],["rectangle",3]],[[["point",3]]],null,[[["point",3]]],[[["point",3]],["translated",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],null,[[]],[[]],[[]],null,null,null,[[["anchorpoint",4]],["point",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["option",4,["point"]],["point",3]]],[[],["rectangle",3]],[[],["point",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["styledpixelsiterator",3]],[[],["points",3]],[[],["rectangle",3]],[[["rectangle",3]],["ordering",4]],[[],[["range",3,["i32"]],["i32",15]]],[[["point",3]],["bool",15]],[[["point",3]],["bool",15]],[[],["rectangle",3]],[[],["result",4]],[[["primitivestyle",3]],["result",4]],[[],["points",3]],[[["styledpixelsiterator",3]],["bool",15]],[[["points",3]],["bool",15]],[[["rectangle",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["rectangle",3]],["rectangle",3]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[["styledpixelsiterator",3]],["bool",15]],[[["points",3]],["bool",15]],[[["rectangle",3]],["bool",15]],[[["point",3],["size",3]],["rectangle",3]],[[],["option",4]],[[],["option",4]],[[["i32",15]],["rectangle",3]],[[["i32",15]]],[[]],[[]],[[]],[[["rectangle",3]],[["option",4,["ordering"]],["ordering",4]]],[[]],[[["anchorpoint",4],["size",3]],["rectangle",3]],[[],[["range",3,["i32"]],["i32",15]]],[[]],[[]],[[]],null,[[["primitivestyle",3]],["rectangle",3]],null,[[["point",3]]],[[["point",3]]],[[["point",3]],["translated",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[["point",3],["size",3]],["rectangle",3]],[[["point",3]],["rectangle",3]],[[]],[[]],[[]],[[],["rectangle",3]],null,null,null,null,null,[[["size",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["size",3]]],[[["size",3]]],null,[[["size",3]]],null,[[],["rectangle",3]],[[],["cornerradii",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["cornerradii",3]],[[],["cornerradiibuilder",3]],[[],["points",3]],[[],["styledpixelsiterator",3]],[[],["roundedrectangle",3]],[[["cornerradii",3]],["ordering",4]],[[["cornerradiibuilder",3]],["ordering",4]],[[["roundedrectangle",3]],["ordering",4]],[[]],[[["point",3]],["bool",15]],null,[[],["cornerradii",3]],[[],["cornerradiibuilder",3]],[[],["result",4]],[[["primitivestyle",3]],["result",4]],[[["cornerradii",3]],["bool",15]],[[["cornerradiibuilder",3]],["bool",15]],[[["points",3]],["bool",15]],[[["styledpixelsiterator",3]],["bool",15]],[[["roundedrectangle",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["cornerradii",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["size",3]]],[[["cornerradii",3]],["bool",15]],[[["cornerradiibuilder",3]],["bool",15]],[[["points",3]],["bool",15]],[[["styledpixelsiterator",3]],["bool",15]],[[["roundedrectangle",3]],["bool",15]],[[["size",3]]],[[]],[[["cornerradii",3],["rectangle",3]]],[[],["option",4]],[[],["option",4]],[[["i32",15]]],[[]],[[]],[[]],[[]],[[]],[[["cornerradii",3]],[["option",4,["ordering"]],["ordering",4]]],[[["cornerradiibuilder",3]],[["option",4,["ordering"]],["ordering",4]]],[[["roundedrectangle",3]],[["option",4,["ordering"]],["ordering",4]]],[[]],null,[[["size",3]]],[[]],[[]],[[]],[[]],[[]],[[["primitivestyle",3]],["rectangle",3]],[[["size",3]]],[[["size",3]]],null,[[["size",3]]],null,[[["point",3]]],[[["point",3]]],[[["point",3]],["translated",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[["rectangle",3],["size",3]]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["rectangle",3]],[[],["point",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["points",3]],[[],["styledpixelsiterator",3]],[[],["sector",3]],[[["point",3]],["bool",15]],null,[[],["result",4]],[[["primitivestyle",3]],["result",4]],[[["points",3]],["bool",15]],[[["styledpixelsiterator",3]],["bool",15]],[[["sector",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["angle",3],["circle",3]]],[[]],[[]],[[]],[[]],[[]],[[["points",3]],["bool",15]],[[["styledpixelsiterator",3]],["bool",15]],[[["sector",3]],["bool",15]],[[["point",3],["u32",15],["angle",3]]],[[],["option",4]],[[],["option",4]],[[["i32",15]]],[[]],[[]],[[]],[[["sector",3]],[["option",4,["ordering"]],["ordering",4]]],[[]],[[]],[[]],[[]],[[["primitivestyle",3]],["rectangle",3]],[[],["circle",3]],null,[[["point",3]]],[[["point",3]]],[[["point",3]],["translated",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[["point",3],["u32",15],["angle",3]]],[[]],[[]],[[]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["rectangle",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["points",3]],[[],["styledpixelsiterator",3]],[[],["triangle",3]],[[["triangle",3]],["ordering",4]],[[["point",3]],["bool",15]],[[],["triangle",3]],[[],["result",4]],[[["primitivestyle",3]],["result",4]],[[["points",3]],["bool",15]],[[["styledpixelsiterator",3]],["bool",15]],[[["triangle",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["points",3]],["bool",15]],[[["styledpixelsiterator",3]],["bool",15]],[[["triangle",3]],["bool",15]],[[["point",3]]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[["triangle",3]],[["option",4,["ordering"]],["ordering",4]]],[[]],[[]],[[]],[[]],[[["primitivestyle",3]],["rectangle",3]],[[["point",3]]],[[["point",3]]],[[["point",3]],["translated",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],null,[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["alignment",4]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["baseline",4]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["rectangle",3]],[[],["textstyle",3]],null,[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["text",3]],[[],["textstyle",3]],[[],["textstylebuilder",3]],[[],["baseline",4]],[[],["alignment",4]],[[],["decorationcolor",4]],[[],["lineheight",4]],[[["text",3]],["ordering",4]],[[["textstyle",3]],["ordering",4]],[[["baseline",4]],["ordering",4]],[[["alignment",4]],["ordering",4]],[[["decorationcolor",4]],["ordering",4]],[[["lineheight",4]],["ordering",4]],[[]],[[]],[[],[["point",3],["result",4,["point"]]]],[[["text",3]],["bool",15]],[[["textstyle",3]],["bool",15]],[[["textstylebuilder",3]],["bool",15]],[[["baseline",4]],["bool",15]],[[["alignment",4]],["bool",15]],[[["decorationcolor",4]],["bool",15]],[[["lineheight",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["textstyle",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["lineheight",4]]],null,[[["text",3]],["bool",15]],[[["textstyle",3]],["bool",15]],[[["textstylebuilder",3]],["bool",15]],[[["decorationcolor",4]],["bool",15]],[[["lineheight",4]],["bool",15]],[[["str",15],["point",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["text",3]],[["option",4,["ordering"]],["ordering",4]]],[[["textstyle",3]],[["option",4,["ordering"]],["ordering",4]]],[[["textstylebuilder",3]],[["option",4,["ordering"]],["ordering",4]]],[[["baseline",4]],[["option",4,["ordering"]],["ordering",4]]],[[["alignment",4]],[["option",4,["ordering"]],["ordering",4]]],[[["decorationcolor",4]],[["option",4,["ordering"]],["ordering",4]]],[[["lineheight",4]],[["option",4,["ordering"]],["ordering",4]]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[["u32",15]],["u32",15]],[[["point",3]]],[[["point",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["str",15],["point",3],["alignment",4]]],[[["alignment",4]]],[[["str",15],["point",3],["baseline",4]]],[[["baseline",4]]],[[["str",15],["point",3],["textstyle",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,[[]],[[]],[[]],null,[[],["option",4]],[[],["textmetrics",3]],[[["textmetrics",3]],["ordering",4]],[[["str",15],["point",3],["baseline",4]],[["point",3],["result",4,["point"]]]],[[["baseline",4],["u32",15],["point",3]],[["point",3],["result",4,["point"]]]],[[["textmetrics",3]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["u32",15]],[[["str",15],["point",3],["baseline",4]],["textmetrics",3]],[[["textmetrics",3]],["bool",15]],null,[[]],[[["textmetrics",3]],[["option",4,["ordering"]],["ordering",4]]],[[]],[[["option",4]]],[[["option",4]]],[[["decorationcolor",4]]],[[["decorationcolor",4]]],[[["option",4]]],[[["option",4]]],[[["decorationcolor",4]]],[[["decorationcolor",4]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],null,[[["point",3]]],[[["point",3]]]],"p":[[3,"Pixel"],[8,"Drawable"],[8,"DrawTarget"],[3,"Clipped"],[3,"ColorConverted"],[3,"Cropped"],[3,"Translated"],[8,"DrawTargetExt"],[4,"AnchorPoint"],[3,"Angle"],[3,"Point"],[3,"Size"],[8,"Dimensions"],[8,"AngleUnit"],[8,"OriginDimensions"],[8,"ImageDrawable"],[3,"ImageRaw"],[3,"SubImage"],[3,"Image"],[8,"ImageDrawableExt"],[8,"PixelIteratorExt"],[8,"ContiguousIteratorExt"],[3,"IntoPixels"],[3,"Translated"],[3,"RawDataSlice"],[3,"BitsIterator"],[3,"ByteIterator"],[3,"BytesIterator"],[8,"ColorMapping"],[3,"MockDisplay"],[3,"MonoTextStyle"],[3,"MonoTextStyleBuilder"],[3,"MonoFont"],[3,"DecorationDimensions"],[4,"Mapping"],[3,"StrGlyphMapping"],[8,"GlyphMapping"],[8,"GrayColor"],[8,"RgbColor"],[8,"WebColors"],[4,"BinaryColor"],[8,"PixelColor"],[8,"IntoStorage"],[3,"Gray2"],[3,"Gray4"],[3,"Gray8"],[3,"Rgb555"],[3,"Bgr555"],[3,"Rgb565"],[3,"Bgr565"],[3,"Rgb666"],[3,"Bgr666"],[3,"Rgb888"],[3,"Bgr888"],[8,"RawData"],[8,"ToBytes"],[3,"RawU1"],[3,"RawU2"],[3,"RawU4"],[3,"RawU8"],[3,"RawU16"],[3,"RawU18"],[3,"RawU24"],[3,"RawU32"],[4,"LittleEndian"],[4,"BigEndian"],[4,"StrokeAlignment"],[8,"StyledDrawable"],[8,"PointsIter"],[3,"PrimitiveStyle"],[3,"PrimitiveStyleBuilder"],[3,"Styled"],[3,"CornerRadii"],[8,"ContainsPoint"],[8,"Primitive"],[8,"OffsetOutline"],[8,"StyledDimensions"],[3,"Arc"],[3,"Points"],[3,"StyledPixelsIterator"],[3,"Points"],[3,"StyledPixelsIterator"],[3,"Circle"],[3,"Points"],[3,"StyledPixelsIterator"],[3,"Ellipse"],[3,"Points"],[3,"StyledPixelsIterator"],[3,"Line"],[3,"Points"],[3,"StyledPixelsIterator"],[3,"Polyline"],[3,"Rectangle"],[3,"StyledPixelsIterator"],[3,"Points"],[3,"CornerRadiiBuilder"],[3,"Points"],[3,"StyledPixelsIterator"],[3,"RoundedRectangle"],[3,"Sector"],[3,"Points"],[3,"StyledPixelsIterator"],[3,"Points"],[3,"StyledPixelsIterator"],[3,"Triangle"],[4,"Baseline"],[4,"Alignment"],[4,"DecorationColor"],[4,"LineHeight"],[3,"TextStyleBuilder"],[3,"TextStyle"],[3,"Text"],[8,"CharacterStyle"],[8,"TextRenderer"],[3,"TextMetrics"],[8,"Transform"]]},\
"embedded_graphics_core":{"doc":"embedded-graphics-core contains the core components of …","t":[12,12,16,8,16,3,11,11,11,11,11,11,11,10,11,0,11,11,11,0,11,0,11,11,11,11,0,0,0,11,11,11,11,11,11,16,8,16,11,10,11,11,4,13,13,13,13,13,13,8,8,3,3,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,11,11,12,11,11,11,11,16,8,10,10,18,18,18,18,18,18,3,3,3,3,4,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,3,3,3,8,8,18,18,18,18,18,18,18,18,13,13,8,18,18,16,3,3,3,3,8,16,18,18,18,18,8,18,18,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,4,8,16,4,8,3,3,3,3,3,3,3,3,16,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,16,8,10,0,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["0","1","Color","Drawable","Output","Pixel","az","borrow","borrow_mut","checked_as","clone","cmp","default","draw","draw","draw_target","eq","fmt","from","geometry","hash","image","into","ne","overflowing_as","partial_cmp","pixelcolor","prelude","primitives","saturating_as","try_from","try_into","type_id","unwrapped_as","wrapping_as","Color","DrawTarget","Error","clear","draw_iter","fill_contiguous","fill_solid","AnchorPoint","BottomCenter","BottomLeft","BottomRight","Center","CenterLeft","CenterRight","Dimensions","OriginDimensions","Point","Size","TopCenter","TopLeft","TopRight","abs","add","add","add","add_assign","add_assign","add_assign","az","az","az","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","bounding_box","checked_as","checked_as","checked_as","clone","clone","clone","cmp","cmp","cmp","component_div","component_div","component_max","component_max","component_min","component_min","component_mul","component_mul","default","default","div","div","div_assign","div_assign","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","hash","hash","hash","height","index","index","into","into","into","mul","mul","mul_assign","mul_assign","ne","ne","neg","new","new","new_equal","new_equal","overflowing_as","overflowing_as","overflowing_as","partial_cmp","partial_cmp","partial_cmp","saturating_add","saturating_as","saturating_as","saturating_as","saturating_sub","size","sub","sub","sub","sub_assign","sub_assign","sub_assign","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","width","wrapping_as","wrapping_as","wrapping_as","x","x_axis","x_axis","y","y_axis","y_axis","zero","zero","Color","ImageDrawable","draw","draw_sub_image","BLACK","BLACK","BLACK","BLACK","BLUE","BLUE","Bgr555","Bgr565","Bgr666","Bgr888","BinaryColor","CSS_ALICE_BLUE","CSS_ALICE_BLUE","CSS_ANTIQUE_WHITE","CSS_ANTIQUE_WHITE","CSS_AQUA","CSS_AQUA","CSS_AQUAMARINE","CSS_AQUAMARINE","CSS_AZURE","CSS_AZURE","CSS_BEIGE","CSS_BEIGE","CSS_BISQUE","CSS_BISQUE","CSS_BLACK","CSS_BLACK","CSS_BLANCHED_ALMOND","CSS_BLANCHED_ALMOND","CSS_BLUE","CSS_BLUE","CSS_BLUE_VIOLET","CSS_BLUE_VIOLET","CSS_BROWN","CSS_BROWN","CSS_BURLY_WOOD","CSS_BURLY_WOOD","CSS_CADET_BLUE","CSS_CADET_BLUE","CSS_CHARTREUSE","CSS_CHARTREUSE","CSS_CHOCOLATE","CSS_CHOCOLATE","CSS_CORAL","CSS_CORAL","CSS_CORNFLOWER_BLUE","CSS_CORNFLOWER_BLUE","CSS_CORNSILK","CSS_CORNSILK","CSS_CRIMSON","CSS_CRIMSON","CSS_CYAN","CSS_CYAN","CSS_DARK_BLUE","CSS_DARK_BLUE","CSS_DARK_CYAN","CSS_DARK_CYAN","CSS_DARK_GOLDENROD","CSS_DARK_GOLDENROD","CSS_DARK_GRAY","CSS_DARK_GRAY","CSS_DARK_GREEN","CSS_DARK_GREEN","CSS_DARK_KHAKI","CSS_DARK_KHAKI","CSS_DARK_MAGENTA","CSS_DARK_MAGENTA","CSS_DARK_OLIVE_GREEN","CSS_DARK_OLIVE_GREEN","CSS_DARK_ORANGE","CSS_DARK_ORANGE","CSS_DARK_ORCHID","CSS_DARK_ORCHID","CSS_DARK_RED","CSS_DARK_RED","CSS_DARK_SALMON","CSS_DARK_SALMON","CSS_DARK_SEA_GREEN","CSS_DARK_SEA_GREEN","CSS_DARK_SLATE_BLUE","CSS_DARK_SLATE_BLUE","CSS_DARK_SLATE_GRAY","CSS_DARK_SLATE_GRAY","CSS_DARK_TURQUOISE","CSS_DARK_TURQUOISE","CSS_DARK_VIOLET","CSS_DARK_VIOLET","CSS_DEEP_PINK","CSS_DEEP_PINK","CSS_DEEP_SKY_BLUE","CSS_DEEP_SKY_BLUE","CSS_DIM_GRAY","CSS_DIM_GRAY","CSS_DODGER_BLUE","CSS_DODGER_BLUE","CSS_FIRE_BRICK","CSS_FIRE_BRICK","CSS_FLORAL_WHITE","CSS_FLORAL_WHITE","CSS_FOREST_GREEN","CSS_FOREST_GREEN","CSS_FUCHSIA","CSS_FUCHSIA","CSS_GAINSBORO","CSS_GAINSBORO","CSS_GHOST_WHITE","CSS_GHOST_WHITE","CSS_GOLD","CSS_GOLD","CSS_GOLDENROD","CSS_GOLDENROD","CSS_GRAY","CSS_GRAY","CSS_GREEN","CSS_GREEN","CSS_GREEN_YELLOW","CSS_GREEN_YELLOW","CSS_HONEYDEW","CSS_HONEYDEW","CSS_HOT_PINK","CSS_HOT_PINK","CSS_INDIAN_RED","CSS_INDIAN_RED","CSS_INDIGO","CSS_INDIGO","CSS_IVORY","CSS_IVORY","CSS_KHAKI","CSS_KHAKI","CSS_LAVENDER","CSS_LAVENDER","CSS_LAVENDER_BLUSH","CSS_LAVENDER_BLUSH","CSS_LAWN_GREEN","CSS_LAWN_GREEN","CSS_LEMON_CHIFFON","CSS_LEMON_CHIFFON","CSS_LIGHT_BLUE","CSS_LIGHT_BLUE","CSS_LIGHT_CORAL","CSS_LIGHT_CORAL","CSS_LIGHT_CYAN","CSS_LIGHT_CYAN","CSS_LIGHT_GOLDENROD_YELLOW","CSS_LIGHT_GOLDENROD_YELLOW","CSS_LIGHT_GRAY","CSS_LIGHT_GRAY","CSS_LIGHT_GREEN","CSS_LIGHT_GREEN","CSS_LIGHT_PINK","CSS_LIGHT_PINK","CSS_LIGHT_SALMON","CSS_LIGHT_SALMON","CSS_LIGHT_SEA_GREEN","CSS_LIGHT_SEA_GREEN","CSS_LIGHT_SKY_BLUE","CSS_LIGHT_SKY_BLUE","CSS_LIGHT_SLATE_GRAY","CSS_LIGHT_SLATE_GRAY","CSS_LIGHT_STEEL_BLUE","CSS_LIGHT_STEEL_BLUE","CSS_LIGHT_YELLOW","CSS_LIGHT_YELLOW","CSS_LIME","CSS_LIME","CSS_LIME_GREEN","CSS_LIME_GREEN","CSS_LINEN","CSS_LINEN","CSS_MAGENTA","CSS_MAGENTA","CSS_MAROON","CSS_MAROON","CSS_MEDIUM_AQUAMARINE","CSS_MEDIUM_AQUAMARINE","CSS_MEDIUM_BLUE","CSS_MEDIUM_BLUE","CSS_MEDIUM_ORCHID","CSS_MEDIUM_ORCHID","CSS_MEDIUM_PURPLE","CSS_MEDIUM_PURPLE","CSS_MEDIUM_SEA_GREEN","CSS_MEDIUM_SEA_GREEN","CSS_MEDIUM_SLATE_BLUE","CSS_MEDIUM_SLATE_BLUE","CSS_MEDIUM_SPRING_GREEN","CSS_MEDIUM_SPRING_GREEN","CSS_MEDIUM_TURQUOISE","CSS_MEDIUM_TURQUOISE","CSS_MEDIUM_VIOLET_RED","CSS_MEDIUM_VIOLET_RED","CSS_MIDNIGHT_BLUE","CSS_MIDNIGHT_BLUE","CSS_MINT_CREAM","CSS_MINT_CREAM","CSS_MISTY_ROSE","CSS_MISTY_ROSE","CSS_MOCCASIN","CSS_MOCCASIN","CSS_NAVAJO_WHITE","CSS_NAVAJO_WHITE","CSS_NAVY","CSS_NAVY","CSS_OLD_LACE","CSS_OLD_LACE","CSS_OLIVE","CSS_OLIVE","CSS_OLIVE_DRAB","CSS_OLIVE_DRAB","CSS_ORANGE","CSS_ORANGE","CSS_ORANGE_RED","CSS_ORANGE_RED","CSS_ORCHID","CSS_ORCHID","CSS_PALE_GOLDENROD","CSS_PALE_GOLDENROD","CSS_PALE_GREEN","CSS_PALE_GREEN","CSS_PALE_TURQUOISE","CSS_PALE_TURQUOISE","CSS_PALE_VIOLET_RED","CSS_PALE_VIOLET_RED","CSS_PAPAYA_WHIP","CSS_PAPAYA_WHIP","CSS_PEACH_PUFF","CSS_PEACH_PUFF","CSS_PERU","CSS_PERU","CSS_PINK","CSS_PINK","CSS_PLUM","CSS_PLUM","CSS_POWDER_BLUE","CSS_POWDER_BLUE","CSS_PURPLE","CSS_PURPLE","CSS_REBECCAPURPLE","CSS_REBECCAPURPLE","CSS_RED","CSS_RED","CSS_ROSY_BROWN","CSS_ROSY_BROWN","CSS_ROYAL_BLUE","CSS_ROYAL_BLUE","CSS_SADDLE_BROWN","CSS_SADDLE_BROWN","CSS_SALMON","CSS_SALMON","CSS_SANDY_BROWN","CSS_SANDY_BROWN","CSS_SEASHELL","CSS_SEASHELL","CSS_SEA_GREEN","CSS_SEA_GREEN","CSS_SIENNA","CSS_SIENNA","CSS_SILVER","CSS_SILVER","CSS_SKY_BLUE","CSS_SKY_BLUE","CSS_SLATE_BLUE","CSS_SLATE_BLUE","CSS_SLATE_GRAY","CSS_SLATE_GRAY","CSS_SNOW","CSS_SNOW","CSS_SPRING_GREEN","CSS_SPRING_GREEN","CSS_STEEL_BLUE","CSS_STEEL_BLUE","CSS_TAN","CSS_TAN","CSS_TEAL","CSS_TEAL","CSS_THISTLE","CSS_THISTLE","CSS_TOMATO","CSS_TOMATO","CSS_TURQUOISE","CSS_TURQUOISE","CSS_VIOLET","CSS_VIOLET","CSS_WHEAT","CSS_WHEAT","CSS_WHITE","CSS_WHITE","CSS_WHITE_SMOKE","CSS_WHITE_SMOKE","CSS_YELLOW","CSS_YELLOW","CSS_YELLOW_GREEN","CSS_YELLOW_GREEN","CYAN","CYAN","GREEN","GREEN","Gray2","Gray4","Gray8","GrayColor","IntoStorage","MAGENTA","MAGENTA","MAX_B","MAX_B","MAX_G","MAX_G","MAX_R","MAX_R","Off","On","PixelColor","RED","RED","Raw","Rgb555","Rgb565","Rgb666","Rgb888","RgbColor","Storage","WHITE","WHITE","WHITE","WHITE","WebColors","YELLOW","YELLOW","az","az","az","az","az","az","az","az","az","az","az","az","b","b","b","b","b","b","b","b","b","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","default","default","default","default","default","default","default","default","default","default","default","default","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","g","g","g","g","g","g","g","g","g","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","into","into","into","into","into","into","into","into","into","into","into","into","into_storage","invert","is_off","is_on","luma","luma","luma","luma","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","new","new","new","new","new","new","new","new","new","new","new","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","r","r","r","r","r","r","r","r","r","raw","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","BITS_PER_PIXEL","BigEndian","ByteOrder","Bytes","LittleEndian","RawData","RawU1","RawU16","RawU18","RawU2","RawU24","RawU32","RawU4","RawU8","Storage","ToBytes","az","az","az","az","az","az","az","az","az","az","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","default","default","default","default","default","default","default","default","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","into","into","into","into","into","into","into","into","into","into","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","ne","ne","ne","ne","ne","ne","ne","ne","new","new","new","new","new","new","new","new","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","Iter","PointsIter","points","rectangle","Points","Rectangle","anchor_point","az","az","borrow","borrow","borrow_mut","borrow_mut","bottom_right","bounding_box","center","checked_as","checked_as","clone","clone","cmp","columns","contains","default","empty","eq","eq","fmt","fmt","from","from","hash","hash","intersection","into","into","into_iter","is_zero_sized","ne","ne","new","next","offset","overflowing_as","overflowing_as","partial_cmp","points","resized","rows","saturating_as","saturating_as","size","top_left","try_from","try_from","try_into","try_into","type_id","type_id","unwrapped_as","unwrapped_as","with_center","with_corners","wrapping_as","wrapping_as","zero"],"q":["embedded_graphics_core","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","embedded_graphics_core::draw_target","","","","","","","embedded_graphics_core::geometry","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","embedded_graphics_core::image","","","","embedded_graphics_core::pixelcolorembedded_graphics_core::pixelcolor::raw","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","embedded_graphics_core::primitives","","","","embedded_graphics_core::primitives::rectangle","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","The pixel color type.","Marks an object as “drawable”. Must be implemented …","The return type of the <code>draw</code> method.","A single pixel.","","","","","","","","Draw the graphics object using the supplied DrawTarget.","","A target for embedded-graphics drawing operations.","","","","Geometry module.","","Image drawable trait.","","","","","Pixel color types.","Prelude","Core primitives.","","","","","","","The pixel color type the targetted display supports.","A target for embedded-graphics drawing operations.","Error type to return when a drawing operation fails.","Fill the entire display with a solid color.","Draw individual pixels to the display without a defined …","Fill a given area with an iterator providing a contiguous …","Fill a given area with a solid color.","Anchor point.","Bottom center.","Bottom left.","Bottom right.","Center.","Center left.","Center right.","Adds the ability to get the bounding box of an item.","Dimensions with <code>top_left</code> of the bounding box at <code>(0, 0)</code>.","2D point.","2D size.","Top center.","Top left.","Top right.","Remove the sign from a coordinate","","Offsets a point by adding a size.","","","Offsets a point by adding a size.","","","","","","","","","","","Returns the bounding box.","","","","","","","","","","Returns the componentwise division of two <code>Points</code>s.","Returns the componentwise division of two <code>Size</code>s.","Returns the componentwise maximum of two <code>Point</code>s","Returns the componentwise maximum of two <code>Size</code>s.","Returns the componentwise minimum of two <code>Point</code>s","Returns the componentwise minimum of two <code>Size</code>s.","Returns the componentwise multiplication of two <code>Point</code>s.","Returns the componentwise multiplication of two <code>Size</code>s.","","","","","","","","","","","","","","","","","","","","","","","","","","","The height.","","","","","","","","","","","","","Creates a point from  X and Y coordinates.","Creates a size from a width and a height.","Creates a point with X and Y values set to an equal value.","Creates a size with width and height set to an equal …","","","","","","","Saturating addition.","","","","Saturating subtraction.","Returns the size of the bounding box.","","Offsets a point by subtracting a size.","","","Offsets a point by subtracting a size.","","","","","","","","","","","","","","","","","The width.","","","","The x coordinate.","Returns a point with equal <code>x</code> value and <code>y</code> set to <code>0</code>.","Returns a size with equal <code>width</code> value and <code>height</code> set to <code>0</code>.","The y coordinate.","Returns a point with equal <code>y</code> value and <code>x</code> set to <code>0</code>.","Returns a size with equal <code>height</code> value and <code>width</code> set to <code>0</code>.","Creates a point with X and Y equal to zero.","Creates a size with width and height equal to zero.","The color type.","Image drawable.","Draws the entire image to the target.","Draws a part of the image to the target.","Black color (0% luma).","Black color (0% luma).","Black color (R: 0%, G: 0%, B: 0%)","Black color (R: 0%, G: 0%, B: 0%)","Blue color (R: 0%, G: 0%, B: 100%)","Blue color (R: 0%, G: 0%, B: 100%)","Bgr555 color.","Bgr565 color.","Bgr666 color.","Bgr888 color.","Binary color."," Alice Blue"," Alice Blue"," Antique White"," Antique White"," Aqua"," Aqua"," Aquamarine"," Aquamarine"," Azure"," Azure"," Beige"," Beige"," Bisque"," Bisque"," Black"," Black"," Blanched Almond"," Blanched Almond"," Blue"," Blue"," Blue Violet"," Blue Violet"," Brown"," Brown"," Burly Wood"," Burly Wood"," Cadet Blue"," Cadet Blue"," Chartreuse"," Chartreuse"," Chocolate"," Chocolate"," Coral"," Coral"," Cornflower Blue"," Cornflower Blue"," Cornsilk"," Cornsilk"," Crimson"," Crimson"," Cyan"," Cyan"," Dark Blue"," Dark Blue"," Dark Cyan"," Dark Cyan"," Dark Goldenrod"," Dark Goldenrod"," Dark Gray"," Dark Gray"," Dark Green"," Dark Green"," Dark Khaki"," Dark Khaki"," Dark Magenta"," Dark Magenta"," Dark Olive Green"," Dark Olive Green"," Dark Orange"," Dark Orange"," Dark Orchid"," Dark Orchid"," Dark Red"," Dark Red"," Dark Salmon"," Dark Salmon"," Dark Sea Green"," Dark Sea Green"," Dark Slate Blue"," Dark Slate Blue"," Dark Slate Gray"," Dark Slate Gray"," Dark Turquoise"," Dark Turquoise"," Dark Violet"," Dark Violet"," Deep Pink"," Deep Pink"," Deep Sky Blue"," Deep Sky Blue"," Dim Gray"," Dim Gray"," Dodger Blue"," Dodger Blue"," Fire Brick"," Fire Brick"," Floral White"," Floral White"," Forest Green"," Forest Green"," Fuchsia"," Fuchsia"," Gainsboro"," Gainsboro"," Ghost White"," Ghost White"," Gold"," Gold"," Goldenrod"," Goldenrod"," Gray"," Gray"," Green"," Green"," Green Yellow"," Green Yellow"," Honeydew"," Honeydew"," Hot Pink"," Hot Pink"," Indian Red"," Indian Red"," Indigo"," Indigo"," Ivory"," Ivory"," Khaki"," Khaki"," Lavender"," Lavender"," Lavender Blush"," Lavender Blush"," Lawn Green"," Lawn Green"," Lemon Chiffon"," Lemon Chiffon"," Light Blue"," Light Blue"," Light Coral"," Light Coral"," Light Cyan"," Light Cyan"," Light Goldenrod Yellow"," Light Goldenrod Yellow"," Light Gray"," Light Gray"," Light Green"," Light Green"," Light Pink"," Light Pink"," Light Salmon"," Light Salmon"," Light Sea Green"," Light Sea Green"," Light Sky Blue"," Light Sky Blue"," Light Slate Gray"," Light Slate Gray"," Light Steel Blue"," Light Steel Blue"," Light Yellow"," Light Yellow"," Lime"," Lime"," Lime Green"," Lime Green"," Linen"," Linen"," Magenta"," Magenta"," Maroon"," Maroon"," Medium Aquamarine"," Medium Aquamarine"," Medium Blue"," Medium Blue"," Medium Orchid"," Medium Orchid"," Medium Purple"," Medium Purple"," Medium Sea Green"," Medium Sea Green"," Medium Slate Blue"," Medium Slate Blue"," Medium Spring Green"," Medium Spring Green"," Medium Turquoise"," Medium Turquoise"," Medium Violet Red"," Medium Violet Red"," Midnight Blue"," Midnight Blue"," Mint Cream"," Mint Cream"," Misty Rose"," Misty Rose"," Moccasin"," Moccasin"," Navajo White"," Navajo White"," Navy"," Navy"," Old Lace"," Old Lace"," Olive"," Olive"," Olive Drab"," Olive Drab"," Orange"," Orange"," Orange Red"," Orange Red"," Orchid"," Orchid"," Pale Goldenrod"," Pale Goldenrod"," Pale Green"," Pale Green"," Pale Turquoise"," Pale Turquoise"," Pale Violet Red"," Pale Violet Red"," Papaya Whip"," Papaya Whip"," Peach Puff"," Peach Puff"," Peru"," Peru"," Pink"," Pink"," Plum"," Plum"," Powder Blue"," Powder Blue"," Purple"," Purple"," Rebeccapurple"," Rebeccapurple"," Red"," Red"," Rosy Brown"," Rosy Brown"," Royal Blue"," Royal Blue"," Saddle Brown"," Saddle Brown"," Salmon"," Salmon"," Sandy Brown"," Sandy Brown"," Seashell"," Seashell"," Sea Green"," Sea Green"," Sienna"," Sienna"," Silver"," Silver"," Sky Blue"," Sky Blue"," Slate Blue"," Slate Blue"," Slate Gray"," Slate Gray"," Snow"," Snow"," Spring Green"," Spring Green"," Steel Blue"," Steel Blue"," Tan"," Tan"," Teal"," Teal"," Thistle"," Thistle"," Tomato"," Tomato"," Turquoise"," Turquoise"," Violet"," Violet"," Wheat"," Wheat"," White"," White"," White Smoke"," White Smoke"," Yellow"," Yellow"," Yellow Green"," Yellow Green","Cyan color (R: 0%, G: 100%, B: 100%)","Cyan color (R: 0%, G: 100%, B: 100%)","Green color (R: 0%, G: 100%, B: 0%)","Green color (R: 0%, G: 100%, B: 0%)","2 bit grayscale color.","4 bit grayscale color.","8 bit grayscale color.","Grayscale color.","Convert a <code>PixelColor</code> into its underlying storage type","Magenta color (R: 100%, G: 0%, B: 100%)","Magenta color (R: 100%, G: 0%, B: 100%)","The maximum value in the blue channel.","The maximum value in the blue channel.","The maximum value in the green channel.","The maximum value in the green channel.","The maximum value in the red channel.","The maximum value in the red channel.","Inactive pixel.","Active pixel.","Pixel color trait.","Red color (R: 100%, G: 0%, B: 0%)","Red color (R: 100%, G: 0%, B: 0%)","Raw data type.","Rgb555 color.","Rgb565 color.","Rgb666 color.","Rgb888 color.","RGB color.","The underlying storage type for the pixel color","White color (100% luma).","White color (100% luma).","White color (R: 100%, G: 100%, B: 100%)","White color (R: 100%, G: 100%, B: 100%)","Named colors as defined in the CSS specification.","Yellow color (R: 100%, G: 100%, B: 0%)","Yellow color (R: 100%, G: 100%, B: 0%)","","","","","","","","","","","","","Returns the blue channel valueeturns the green channel value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Convert the <code>PixelColor</code> into its raw storage form","Inverts the color.","Returns <code>true</code> if this color is <code>Off</code>.","Returns <code>true</code> if this color is <code>On</code>.","Returns the luma channel value.","","","","","","","","","","","","","","","Creates a new grayscale color.","Creates a new grayscale color.","Creates a new grayscale color.","Creates a new Rgb555 color. Too large channel values will …","Creates a new Bgr555 color. Too large channel values will …","Creates a new Rgb565 color. Too large channel values will …","Creates a new Bgr565 color. Too large channel values will …","Creates a new Rgb666 color. Too large channel values will …","Creates a new Bgr666 color. Too large channel values will …","Creates a new Rgb888 color. Too large channel values will …","Creates a new Bgr888 color. Too large channel values will …","","","","","","","","","","","","","","","","","","","","","","","","","Returns the red channel value.","","","","","","","","","Raw color types.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Bits per pixel.","Big endian byte order marker.","Raw data byte order.","Return type of methods in this trait.","Little endian byte order marker.","Trait implemented by all <code>RawUx</code> types.","1 bit per pixel raw data.","16 bits per pixel raw data.","18 bits per pixel raw data.","2 bits per pixel raw data.","24 bits per pixel raw data.","32 bits per pixel raw data.","4 bits per pixel raw data.","8 bits per pixel raw data.","Storage type.","Trait to convert colors into a byte array.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts a <code>u32</code> into a <code>RawData</code> type.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts this raw data into the storage type.","","","","","","","","","","","","","","","","","Creates a new color from the least significant","Creates a new color from the least significant","Creates a new color from the least significant","Creates a new color from the least significant","Creates a new color from the least significant","Creates a new color from the least significant","Creates a new color from the least significant","Creates a new color from the least significant","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts a color into a byte array with big endian byte …","","","","","","","","","Converts a color into a byte array with little endian …","","","","","","","","","Converts a color into a byte array with native byte order.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Iterator over all points inside the primitive.","Create an iterator over all points in the primitive.","Returns an iterator over all points inside the primitive.","The rectangle primitive.","Iterator over all points inside the rectangle.","Rectangle primitive","Returns an anchor point.","","","","","","","Returns the bottom right corner of this rectangle.","","Returns the center of this rectangle.","","","","","","Returns the range of X coordinates in this rectangle.","Return whether the rectangle contains a given point.","","Create a points iterator that returns no items.","","","","","","","","","Returns a new <code>Rectangle</code> containing the intersection of …","","","","Returns <code>true</code> is the rectangle is zero sized.","","","Creates a new rectangle from the top left point and the …","","Offset the rectangle by a given value.","","","","","Returns a resized copy of this rectangle.","Returns the range of Y coordinates in this rectangle.","","","Size of the rectangle.","Top left point of the rectangle.","","","","","","","","","Creates a new rectangle from the center point and the …","Creates a new rectangle from two corners.","","","Returns a zero sized rectangle."],"i":[1,1,2,0,2,0,1,1,1,1,1,1,1,2,1,0,1,1,1,0,1,0,1,1,1,1,0,0,0,1,1,1,1,1,1,3,0,3,3,3,3,3,0,4,4,4,4,4,4,0,0,0,0,4,4,4,5,5,5,6,5,5,6,5,6,4,5,6,4,5,6,4,7,5,6,4,5,6,4,5,6,4,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,4,5,5,6,6,4,5,5,5,5,6,6,6,6,4,5,6,4,6,5,6,5,6,4,5,6,5,6,5,6,5,5,6,5,6,5,6,4,5,6,4,6,5,6,4,6,8,5,5,6,5,5,6,5,5,5,5,6,4,5,6,4,5,6,4,5,6,4,6,5,6,4,5,5,6,5,5,6,5,6,9,0,9,9,10,10,11,11,11,11,0,0,0,0,0,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,0,0,0,0,0,11,11,11,11,11,11,11,11,13,13,0,11,11,14,0,0,0,0,0,15,10,10,11,11,0,11,11,13,16,17,18,19,20,21,22,23,24,25,26,11,19,20,21,22,23,24,25,26,13,16,17,18,19,20,21,22,23,24,25,26,13,16,17,18,19,20,21,22,23,24,25,26,13,16,17,18,19,20,21,22,23,24,25,26,13,16,17,18,19,20,21,22,23,24,25,26,13,16,17,18,19,20,21,22,23,24,25,26,13,16,17,18,19,20,21,22,23,24,25,26,13,16,17,18,19,20,21,22,23,24,25,26,13,16,17,18,19,20,21,22,23,24,25,26,13,13,13,13,13,13,13,13,13,13,13,13,16,16,16,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,22,22,23,23,24,24,25,25,25,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,26,26,26,11,19,20,21,22,23,24,25,26,13,16,17,18,19,20,21,22,23,24,25,26,13,16,17,18,19,20,21,22,23,24,25,26,15,13,13,13,10,16,17,18,16,17,18,19,20,21,22,23,24,25,26,16,17,18,19,20,21,22,23,24,25,26,13,16,17,18,19,20,21,22,23,24,25,26,13,16,17,18,19,20,21,22,23,24,25,26,11,19,20,21,22,23,24,25,26,0,13,16,17,18,19,20,21,22,23,24,25,26,13,16,17,18,19,20,21,22,23,24,25,26,13,16,17,18,19,20,21,22,23,24,25,26,13,16,17,18,19,20,21,22,23,24,25,26,13,16,17,18,19,20,21,22,23,24,25,26,13,16,17,18,19,20,21,22,23,24,25,26,27,0,0,28,0,0,0,0,0,0,0,0,0,0,27,0,29,30,31,32,33,34,35,36,37,38,29,30,31,32,33,34,35,36,37,38,29,30,31,32,33,34,35,36,37,38,29,30,31,32,33,34,35,36,37,38,29,30,31,32,33,34,35,36,37,38,29,30,31,32,33,34,35,36,37,38,29,30,31,32,33,34,35,36,29,30,31,32,33,34,35,36,37,38,29,30,31,32,33,34,35,36,37,38,29,29,29,30,30,30,31,31,31,32,32,32,33,33,33,33,33,33,34,34,34,34,35,35,35,35,36,36,37,38,27,29,30,31,32,33,34,35,36,29,30,31,32,33,34,35,36,37,38,29,30,31,32,33,34,35,36,37,38,27,29,30,31,32,33,34,35,36,29,30,31,32,33,34,35,36,29,30,31,32,33,34,35,36,29,30,31,32,33,34,35,36,37,38,29,30,31,32,33,34,35,36,37,38,29,30,31,32,33,34,35,36,37,38,28,29,30,31,32,33,34,35,36,28,29,30,31,32,33,34,35,36,28,29,30,31,32,33,34,35,36,29,30,31,32,33,34,35,36,37,38,29,30,31,32,33,34,35,36,37,38,29,30,31,32,33,34,35,36,37,38,29,30,31,32,33,34,35,36,37,38,29,30,31,32,33,34,35,36,37,38,39,0,39,0,0,0,40,41,40,41,40,41,40,40,40,40,41,40,41,40,40,40,40,40,41,41,40,41,40,41,40,41,40,40,41,40,41,40,41,40,40,41,40,41,40,40,40,40,40,41,40,40,40,41,40,41,40,41,40,41,40,40,40,41,40,40],"f":[null,null,null,null,null,null,[[]],[[]],[[]],[[],["option",4]],[[],["pixel",3]],[[["pixel",3]],["ordering",4]],[[],["pixel",3]],[[],["result",4]],[[],["result",4]],null,[[["pixel",3]],["bool",15]],[[["formatter",3]],["result",6]],[[]],null,[[]],null,[[]],[[["pixel",3]],["bool",15]],[[]],[[["pixel",3]],[["option",4,["ordering"]],["ordering",4]]],null,null,null,[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],null,null,null,[[],["result",4]],[[],["result",4]],[[["rectangle",3]],["result",4]],[[["rectangle",3]],["result",4]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[["point",3]],["point",3]],[[["size",3]],["point",3]],[[["size",3]],["size",3]],[[["point",3]]],[[["size",3]]],[[["size",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["rectangle",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["point",3]],[[],["size",3]],[[],["anchorpoint",4]],[[["point",3]],["ordering",4]],[[["size",3]],["ordering",4]],[[["anchorpoint",4]],["ordering",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["point",3]],[[],["size",3]],[[["i32",15]],["point",3]],[[["u32",15]],["size",3]],[[["i32",15]]],[[["u32",15]]],[[["point",3]],["bool",15]],[[["size",3]],["bool",15]],[[["anchorpoint",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["usize",15]],["i32",15]],[[["usize",15]],["u32",15]],[[]],[[]],[[]],[[["i32",15]],["point",3]],[[["u32",15]],["size",3]],[[["i32",15]]],[[["u32",15]]],[[["point",3]],["bool",15]],[[["size",3]],["bool",15]],[[]],[[["i32",15]]],[[["u32",15]]],[[["i32",15]]],[[["u32",15]]],[[]],[[]],[[]],[[["point",3]],[["option",4,["ordering"]],["ordering",4]]],[[["size",3]],[["option",4,["ordering"]],["ordering",4]]],[[["anchorpoint",4]],[["option",4,["ordering"]],["ordering",4]]],[[]],[[]],[[]],[[]],[[]],[[],["size",3]],[[["point",3]],["point",3]],[[["size",3]],["point",3]],[[["size",3]],["size",3]],[[["point",3]]],[[["size",3]]],[[["size",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],null,[[]],[[]],[[]],null,[[]],[[]],null,[[]],[[]],[[]],[[]],null,null,[[],["result",4]],[[["rectangle",3]],["result",4]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["u8",15]],[[],["u8",15]],[[],["u8",15]],[[],["u8",15]],[[],["u8",15]],[[],["u8",15]],[[],["u8",15]],[[],["u8",15]],[[],["u8",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["binarycolor",4]],[[],["gray2",3]],[[],["gray4",3]],[[],["gray8",3]],[[],["rgb555",3]],[[],["bgr555",3]],[[],["rgb565",3]],[[],["bgr565",3]],[[],["rgb666",3]],[[],["bgr666",3]],[[],["rgb888",3]],[[],["bgr888",3]],[[["binarycolor",4]],["ordering",4]],[[["gray2",3]],["ordering",4]],[[["gray4",3]],["ordering",4]],[[["gray8",3]],["ordering",4]],[[["rgb555",3]],["ordering",4]],[[["bgr555",3]],["ordering",4]],[[["rgb565",3]],["ordering",4]],[[["bgr565",3]],["ordering",4]],[[["rgb666",3]],["ordering",4]],[[["bgr666",3]],["ordering",4]],[[["rgb888",3]],["ordering",4]],[[["bgr888",3]],["ordering",4]],[[]],[[],["gray2",3]],[[],["gray4",3]],[[],["gray8",3]],[[],["rgb555",3]],[[],["bgr555",3]],[[],["rgb565",3]],[[],["bgr565",3]],[[],["rgb666",3]],[[],["bgr666",3]],[[],["rgb888",3]],[[],["bgr888",3]],[[["binarycolor",4]],["bool",15]],[[["gray2",3]],["bool",15]],[[["gray4",3]],["bool",15]],[[["gray8",3]],["bool",15]],[[["rgb555",3]],["bool",15]],[[["bgr555",3]],["bool",15]],[[["rgb565",3]],["bool",15]],[[["bgr565",3]],["bool",15]],[[["rgb666",3]],["bool",15]],[[["bgr666",3]],["bool",15]],[[["rgb888",3]],["bool",15]],[[["bgr888",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["gray4",3]]],[[["bool",15]]],[[["rawu1",3]]],[[]],[[["bgr888",3]]],[[["bgr555",3]]],[[["rgb565",3]]],[[["rgb888",3]]],[[["bgr565",3]]],[[["gray2",3]]],[[["rgb555",3]]],[[["gray8",3]]],[[["rgb555",3]]],[[["bgr565",3]]],[[["rgb565",3]]],[[["bgr888",3]]],[[["bgr555",3]]],[[["binarycolor",4]]],[[["gray8",3]]],[[["gray4",3]]],[[["rawu2",3]]],[[["rgb888",3]]],[[]],[[["bgr888",3]]],[[["bgr565",3]]],[[["gray2",3]]],[[["rawu4",3]]],[[["rgb555",3]]],[[["rgb888",3]]],[[["binarycolor",4]]],[[]],[[["bgr555",3]]],[[["gray8",3]]],[[["rgb565",3]]],[[]],[[["gray2",3]]],[[["bgr888",3]]],[[["rgb888",3]]],[[["bgr555",3]]],[[["gray4",3]]],[[["bgr565",3]]],[[["rawu8",3]]],[[["rgb555",3]]],[[["rgb565",3]]],[[["binarycolor",4]]],[[["rgb565",3]]],[[["bgr565",3]]],[[["rgb888",3]]],[[["bgr888",3]]],[[]],[[["gray8",3]]],[[["rawu16",3]]],[[["gray4",3]]],[[["bgr555",3]]],[[["binarycolor",4]]],[[["gray2",3]]],[[["binarycolor",4]]],[[["rgb565",3]]],[[]],[[["bgr888",3]]],[[["rgb555",3]]],[[["gray4",3]]],[[["rawu16",3]]],[[["rgb888",3]]],[[["gray8",3]]],[[["bgr565",3]]],[[["gray2",3]]],[[["gray8",3]]],[[["gray4",3]]],[[["gray2",3]]],[[]],[[["bgr565",3]]],[[["bgr555",3]]],[[["rawu16",3]]],[[["rgb888",3]]],[[["rgb555",3]]],[[["binarycolor",4]]],[[["bgr888",3]]],[[["gray8",3]]],[[["bgr888",3]]],[[["rgb888",3]]],[[]],[[["rgb555",3]]],[[["bgr555",3]]],[[["rgb565",3]]],[[["gray2",3]]],[[["gray4",3]]],[[["binarycolor",4]]],[[["rawu16",3]]],[[["rawu18",3]]],[[]],[[]],[[["rawu18",3]]],[[["bgr565",3]]],[[["bgr555",3]]],[[["rawu24",3]]],[[["gray4",3]]],[[["gray8",3]]],[[]],[[["gray2",3]]],[[["rgb555",3]]],[[["rgb565",3]]],[[["binarycolor",4]]],[[["bgr888",3]]],[[["bgr565",3]]],[[["gray2",3]]],[[["rgb555",3]]],[[["bgr555",3]]],[[["rawu24",3]]],[[["rgb888",3]]],[[["rgb565",3]]],[[["binarycolor",4]]],[[]],[[["gray8",3]]],[[["gray4",3]]],[[],["u8",15]],[[],["u8",15]],[[],["u8",15]],[[],["u8",15]],[[],["u8",15]],[[],["u8",15]],[[],["u8",15]],[[],["u8",15]],[[],["u8",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["u8",15]],[[],["u8",15]],[[],["u8",15]],[[],["u8",15]],[[["gray2",3]],["bool",15]],[[["gray4",3]],["bool",15]],[[["gray8",3]],["bool",15]],[[["rgb555",3]],["bool",15]],[[["bgr555",3]],["bool",15]],[[["rgb565",3]],["bool",15]],[[["bgr565",3]],["bool",15]],[[["rgb666",3]],["bool",15]],[[["bgr666",3]],["bool",15]],[[["rgb888",3]],["bool",15]],[[["bgr888",3]],["bool",15]],[[["u8",15]]],[[["u8",15]]],[[["u8",15]]],[[["u8",15]]],[[["u8",15]]],[[["u8",15]]],[[["u8",15]]],[[["u8",15]]],[[["u8",15]]],[[["u8",15]]],[[["u8",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["binarycolor",4]],[["option",4,["ordering"]],["ordering",4]]],[[["gray2",3]],[["option",4,["ordering"]],["ordering",4]]],[[["gray4",3]],[["option",4,["ordering"]],["ordering",4]]],[[["gray8",3]],[["option",4,["ordering"]],["ordering",4]]],[[["rgb555",3]],[["option",4,["ordering"]],["ordering",4]]],[[["bgr555",3]],[["option",4,["ordering"]],["ordering",4]]],[[["rgb565",3]],[["option",4,["ordering"]],["ordering",4]]],[[["bgr565",3]],[["option",4,["ordering"]],["ordering",4]]],[[["rgb666",3]],[["option",4,["ordering"]],["ordering",4]]],[[["bgr666",3]],[["option",4,["ordering"]],["ordering",4]]],[[["rgb888",3]],[["option",4,["ordering"]],["ordering",4]]],[[["bgr888",3]],[["option",4,["ordering"]],["ordering",4]]],[[],["u8",15]],[[],["u8",15]],[[],["u8",15]],[[],["u8",15]],[[],["u8",15]],[[],["u8",15]],[[],["u8",15]],[[],["u8",15]],[[],["u8",15]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["rawu1",3]],[[],["rawu2",3]],[[],["rawu4",3]],[[],["rawu8",3]],[[],["rawu16",3]],[[],["rawu18",3]],[[],["rawu24",3]],[[],["rawu32",3]],[[],["littleendian",4]],[[],["bigendian",4]],[[["rawu1",3]],["ordering",4]],[[["rawu2",3]],["ordering",4]],[[["rawu4",3]],["ordering",4]],[[["rawu8",3]],["ordering",4]],[[["rawu16",3]],["ordering",4]],[[["rawu18",3]],["ordering",4]],[[["rawu24",3]],["ordering",4]],[[["rawu32",3]],["ordering",4]],[[["littleendian",4]],["ordering",4]],[[["bigendian",4]],["ordering",4]],[[],["rawu1",3]],[[],["rawu2",3]],[[],["rawu4",3]],[[],["rawu8",3]],[[],["rawu16",3]],[[],["rawu18",3]],[[],["rawu24",3]],[[],["rawu32",3]],[[["rawu1",3]],["bool",15]],[[["rawu2",3]],["bool",15]],[[["rawu4",3]],["bool",15]],[[["rawu8",3]],["bool",15]],[[["rawu16",3]],["bool",15]],[[["rawu18",3]],["bool",15]],[[["rawu24",3]],["bool",15]],[[["rawu32",3]],["bool",15]],[[["littleendian",4]],["bool",15]],[[["bigendian",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["binarycolor",4]]],[[["u8",15]]],[[]],[[["u8",15]]],[[]],[[["gray2",3]]],[[["gray4",3]]],[[["u8",15]]],[[]],[[["u8",15]]],[[["gray8",3]]],[[]],[[]],[[["rgb555",3]]],[[["bgr565",3]]],[[["rgb565",3]]],[[["bgr555",3]]],[[["u16",15]]],[[]],[[["bgr666",3]]],[[["u32",15]]],[[["rgb666",3]]],[[["u32",15]]],[[]],[[["bgr888",3]]],[[["rgb888",3]]],[[["u32",15]]],[[]],[[]],[[]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["rawu1",3]],["bool",15]],[[["rawu2",3]],["bool",15]],[[["rawu4",3]],["bool",15]],[[["rawu8",3]],["bool",15]],[[["rawu16",3]],["bool",15]],[[["rawu18",3]],["bool",15]],[[["rawu24",3]],["bool",15]],[[["rawu32",3]],["bool",15]],[[["u8",15]]],[[["u8",15]]],[[["u8",15]]],[[["u8",15]]],[[["u16",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["rawu1",3]],[["option",4,["ordering"]],["ordering",4]]],[[["rawu2",3]],[["option",4,["ordering"]],["ordering",4]]],[[["rawu4",3]],[["option",4,["ordering"]],["ordering",4]]],[[["rawu8",3]],[["option",4,["ordering"]],["ordering",4]]],[[["rawu16",3]],[["option",4,["ordering"]],["ordering",4]]],[[["rawu18",3]],[["option",4,["ordering"]],["ordering",4]]],[[["rawu24",3]],[["option",4,["ordering"]],["ordering",4]]],[[["rawu32",3]],[["option",4,["ordering"]],["ordering",4]]],[[["littleendian",4]],[["option",4,["ordering"]],["ordering",4]]],[[["bigendian",4]],[["option",4,["ordering"]],["ordering",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[]],null,null,null,[[["anchorpoint",4]],["point",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["option",4,["point"]],["point",3]]],[[],["rectangle",3]],[[],["point",3]],[[],["option",4]],[[],["option",4]],[[],["points",3]],[[],["rectangle",3]],[[["rectangle",3]],["ordering",4]],[[],[["range",3,["i32"]],["i32",15]]],[[["point",3]],["bool",15]],[[],["rectangle",3]],[[]],[[["points",3]],["bool",15]],[[["rectangle",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["rectangle",3]],["rectangle",3]],[[]],[[]],[[]],[[],["bool",15]],[[["points",3]],["bool",15]],[[["rectangle",3]],["bool",15]],[[["point",3],["size",3]]],[[],["option",4]],[[["i32",15]]],[[]],[[]],[[["rectangle",3]],[["option",4,["ordering"]],["ordering",4]]],[[]],[[["anchorpoint",4],["size",3]]],[[],[["range",3,["i32"]],["i32",15]]],[[]],[[]],null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[["point",3],["size",3]]],[[["point",3]]],[[]],[[]],[[],["rectangle",3]]],"p":[[3,"Pixel"],[8,"Drawable"],[8,"DrawTarget"],[4,"AnchorPoint"],[3,"Point"],[3,"Size"],[8,"Dimensions"],[8,"OriginDimensions"],[8,"ImageDrawable"],[8,"GrayColor"],[8,"RgbColor"],[8,"WebColors"],[4,"BinaryColor"],[8,"PixelColor"],[8,"IntoStorage"],[3,"Gray2"],[3,"Gray4"],[3,"Gray8"],[3,"Rgb555"],[3,"Bgr555"],[3,"Rgb565"],[3,"Bgr565"],[3,"Rgb666"],[3,"Bgr666"],[3,"Rgb888"],[3,"Bgr888"],[8,"RawData"],[8,"ToBytes"],[3,"RawU1"],[3,"RawU2"],[3,"RawU4"],[3,"RawU8"],[3,"RawU16"],[3,"RawU18"],[3,"RawU24"],[3,"RawU32"],[4,"LittleEndian"],[4,"BigEndian"],[8,"PointsIter"],[3,"Rectangle"],[3,"Points"]]},\
"float_cmp":{"doc":"float-cmp","t":[8,8,8,3,3,16,16,16,8,10,14,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,10,11,11,12,12,11,11],"n":["ApproxEq","ApproxEqRatio","ApproxEqUlps","F32Margin","F64Margin","Flt","Margin","U","Ulps","approx_eq","approx_eq","approx_eq_ratio","approx_eq_ratio","approx_eq_ulps","approx_ne","approx_ne","approx_ne_ratio","approx_ne_ratio","approx_ne_ulps","approx_ne_ulps","borrow","borrow","borrow_mut","borrow_mut","clone","clone","default","default","epsilon","epsilon","epsilon","epsilon","fmt","fmt","from","from","from","from","into","into","next","prev","try_from","try_from","try_into","try_into","type_id","type_id","ulps","ulps","ulps","ulps","ulps","zero","zero"],"q":["float_cmp","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A trait for approximate equality comparisons.","ApproxEqRatio is a trait for approximate equality …","ApproxEqUlps is a trait for approximate equality …","This type defines a margin within two <code>f32</code> values might be …","This type defines a margin within two <code>f64</code> values might be …","","This type type defines a margin within which two values …","","","This method tests that the <code>self</code> and <code>other</code> values are …","","This method tests if <code>self</code> and <code>other</code> are nearly equal by …","This method tests if <code>self</code> and <code>other</code> are nearly equal by …","This method tests for <code>self</code> and <code>other</code> values to be …","This method tests that the <code>self</code> and <code>other</code> values are not …","This method tests that the <code>self</code> and <code>other</code> values are not …","This method tests if <code>self</code> and <code>other</code> are not nearly equal …","This method tests if <code>self</code> and <code>other</code> are not nearly equal …","This method tests for <code>self</code> and <code>other</code> values to be not …","This method tests for <code>self</code> and <code>other</code> values to be not …","","","","","","","","","","","","","","","","","","","","","The next representable number above this one","The previous representable number below this one","","","","","","","The number of representable values or ULPs (Units of …","","","","","",""],"i":[0,0,0,0,0,1,2,3,0,2,0,4,4,1,2,2,4,4,1,1,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,5,6,6,5,6,3,3,5,6,5,6,5,6,3,5,6,5,6,5,6],"f":[null,null,null,null,null,null,null,null,null,[[["into",8]],["bool",15]],null,[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["into",8]],["bool",15]],[[["into",8]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[],["f32margin",3]],[[],["f64margin",3]],[[],["f32margin",3]],[[],["f64margin",3]],[[["f32",15]]],[[["f64",15]]],null,null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],["f32margin",3]],[[]],[[]],[[],["f64margin",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[["i32",15]]],[[["i64",15]]],null,null,[[],["f32margin",3]],[[],["f64margin",3]]],"p":[[8,"ApproxEqUlps"],[8,"ApproxEq"],[8,"Ulps"],[8,"ApproxEqRatio"],[3,"F32Margin"],[3,"F64Margin"]]},\
"micromath":{"doc":"Embedded-friendly (i.e. <code>#![no_std]</code>) math library …","t":[8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],"n":["F32Ext","abs","acos","asin","atan","atan2","atan2_norm","atan_norm","ceil","copysign","cos","div_euclid","exp","floor","fract","hypot","inv","invsqrt","ln","log","log10","log2","powf","powi","rem_euclid","round","sin","sqrt","tan","trunc"],"q":["micromath","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["<code>f32</code> extension providing various arithmetic approximations …","Compute absolute value with a constant-time, …","Approximate <code>acos(x)</code> in radians in the range <code>[0, pi]</code>","Approximate <code>asin(x)</code> in radians in the range <code>[-pi/2, pi/2]</code>.","Approximate <code>atan(x)</code> in radians with a maximum error of …","Approximate the four quadrant arctangent <code>atan2(x)</code> in …","Approximate the four quadrant arctangent. Normalized to …","Approximate <code>atan(x)</code> normalized to the <code>[−1,1]</code> range with …","Approximate floating point ceiling.","Copies the sign from one number to another and returns it.","Approximate cosine in radians with a maximum error of …","Calculates Euclidean division, the matching method for …","Approximate <code>e^x</code>.","Approximate floating point floor.","Retrieve the fractional part of floating point with sign.","Approximate the length of the hypotenuse of a right-angle …","Approximate <code>1/x</code> with an average deviation of ~8%.","Approximate inverse square root with an average deviation …","Approximate <code>ln(x)</code>.","Approximate <code>log</code> with an arbitrary base.","Approximate <code>log10</code>.","Approximate <code>log2</code>.","Approximate <code>self^n</code>.","Approximate <code>self^n</code> where n is an <code>i32</code>","Calculates the least nonnegative remainder of …","Round the number part of floating point with sign.","Approximate sine in radians with a maximum error of <code>0.002</code>.","Approximate square root with an average deviation of ~5%.","Approximate <code>tan(x)</code> in radians with a maximum error of <code>0.6</code>.","Retrieve whole number part of floating point with sign."],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[null,[[],["f32",15]],[[],["f32",15]],[[],["f32",15]],[[],["f32",15]],[[["f32",15]],["f32",15]],[[["f32",15]],["f32",15]],[[],["f32",15]],[[],["f32",15]],[[["f32",15]],["f32",15]],[[],["f32",15]],[[["f32",15]],["f32",15]],[[],["f32",15]],[[],["f32",15]],[[],["f32",15]],[[["f32",15]],["f32",15]],[[],["f32",15]],[[],["f32",15]],[[],["f32",15]],[[["f32",15]],["f32",15]],[[],["f32",15]],[[],["f32",15]],[[["f32",15]],["f32",15]],[[["i32",15]],["f32",15]],[[["f32",15]],["f32",15]],[[],["f32",15]],[[],["f32",15]],[[],["f32",15]],[[],["f32",15]],[[],["f32",15]]],"p":[[8,"F32Ext"]]},\
"num_traits":{"doc":"Numeric traits for generic mathematics","t":[13,4,16,13,8,8,8,8,8,8,3,8,11,11,11,11,0,0,5,5,5,0,11,11,11,11,11,10,0,0,11,11,12,0,0,0,11,11,11,11,11,11,8,10,10,8,8,8,8,10,5,10,11,11,11,11,11,10,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,10,11,11,10,10,10,10,10,10,10,10,10,10,8,8,10,10,11,10,11,10,10,10,11,11,11,10,10,11,11,10,10,11,11,11,11,11,11,11,10,11,10,10,10,10,10,11,11,11,11,10,10,11,8,8,11,10,5,10,11,11,5,10,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,0,0,0,0,0,8,8,8,8,8,8,8,8,10,10,10,10,10,10,10,10,8,16,10,8,8,16,10,10,8,8,8,10,10,10,8,8,8,8,10,10,10,10,10,8,8,8,8,8,8,10,10,10,10,10,10,16,8,5,5,10,8,8,5,10,5,10,10,10,5,10],"n":["Empty","FloatErrorKind","FromStrRadixErr","Invalid","Num","NumAssign","NumAssignOps","NumAssignRef","NumOps","NumRef","ParseFloatError","RefNum","borrow","borrow","borrow_mut","borrow_mut","bounds","cast","clamp","clamp_max","clamp_min","float","fmt","fmt","fmt","from","from","from_str_radix","identities","int","into","into","kind","ops","pow","sign","try_from","try_from","try_into","try_into","type_id","type_id","Bounded","max_value","min_value","AsPrimitive","FromPrimitive","NumCast","ToPrimitive","as_","cast","from","from_f32","from_f64","from_i128","from_i16","from_i32","from_i64","from_i8","from_isize","from_u128","from_u16","from_u32","from_u64","from_u8","from_usize","to_f32","to_f64","to_i128","to_i16","to_i32","to_i64","to_i8","to_isize","to_u128","to_u16","to_u32","to_u64","to_u8","to_usize","E","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_3","FRAC_PI_4","FRAC_PI_6","FRAC_PI_8","FloatConst","FloatCore","LN_10","LN_2","LOG10_2","LOG10_E","LOG2_10","LOG2_E","PI","SQRT_2","TAU","abs","ceil","classify","epsilon","floor","fract","infinity","integer_decode","is_finite","is_infinite","is_nan","is_normal","is_sign_negative","is_sign_positive","max","max_value","min","min_positive_value","min_value","nan","neg_infinity","neg_zero","powi","recip","round","signum","to_degrees","to_radians","trunc","One","Zero","is_one","is_zero","one","one","set_one","set_zero","zero","zero","PrimInt","count_ones","count_zeros","from_be","from_le","leading_zeros","pow","rotate_left","rotate_right","signed_shl","signed_shr","swap_bytes","to_be","to_le","trailing_zeros","unsigned_shl","unsigned_shr","checked","inv","mul_add","overflowing","saturating","wrapping","CheckedAdd","CheckedDiv","CheckedMul","CheckedNeg","CheckedRem","CheckedShl","CheckedShr","CheckedSub","checked_add","checked_div","checked_mul","checked_neg","checked_rem","checked_shl","checked_shr","checked_sub","Inv","Output","inv","MulAdd","MulAddAssign","Output","mul_add","mul_add_assign","OverflowingAdd","OverflowingMul","OverflowingSub","overflowing_add","overflowing_mul","overflowing_sub","Saturating","SaturatingAdd","SaturatingMul","SaturatingSub","saturating_add","saturating_add","saturating_mul","saturating_sub","saturating_sub","WrappingAdd","WrappingMul","WrappingNeg","WrappingShl","WrappingShr","WrappingSub","wrapping_add","wrapping_mul","wrapping_neg","wrapping_shl","wrapping_shr","wrapping_sub","Output","Pow","checked_pow","pow","pow","Signed","Unsigned","abs","abs","abs_sub","abs_sub","is_negative","is_positive","signum","signum"],"q":["num_traits","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num_traits::bounds","","","num_traits::cast","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num_traits::float","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num_traits::identities","","","","","","","","","","num_traits::int","","","","","","","","","","","","","","","","","num_traits::ops","","","","","","num_traits::ops::checked","","","","","","","","","","","","","","","","num_traits::ops::inv","","","num_traits::ops::mul_add","","","","","num_traits::ops::overflowing","","","","","","num_traits::ops::saturating","","","","","","","","","num_traits::ops::wrapping","","","","","","","","","","","","num_traits::pow","","","","","num_traits::sign","","","","","","","","",""],"d":["","","","","The base trait for numeric types, covering <code>0</code> and <code>1</code> values,…","The trait for <code>Num</code> types which also implement assignment …","The trait for types implementing numeric assignment …","The trait for <code>NumAssign</code> types which also implement …","The trait for types implementing basic numeric operations","The trait for <code>Num</code> types which also implement numeric …","","The trait for references which implement numeric …","","","","","","","A value bounded by a minimum and a maximum","A value bounded by a maximum value","A value bounded by a minimum value","","","","","","","Convert from a string and radix (typically <code>2..=36</code>).","","","","","","","","","","","","","","","Numbers which have upper and lower bounds","returns the largest finite number this type can represent","returns the smallest finite number this type can represent","A generic interface for casting between machine scalars …","A generic trait for converting a number to a value.","An interface for casting between machine scalars.","A generic trait for converting a value to a number.","Convert a value to another, using the <code>as</code> operator.","Cast from one machine scalar to another.","Creates a number from another value that can be converted …","Converts a <code>f32</code> to return an optional value of this type. …","Converts a <code>f64</code> to return an optional value of this type. …","Converts an <code>i128</code> to return an optional value of this …","Converts an <code>i16</code> to return an optional value of this type. …","Converts an <code>i32</code> to return an optional value of this type. …","Converts an <code>i64</code> to return an optional value of this type. …","Converts an <code>i8</code> to return an optional value of this type. …","Converts an <code>isize</code> to return an optional value of this …","Converts an <code>u128</code> to return an optional value of this …","Converts an <code>u16</code> to return an optional value of this type. …","Converts an <code>u32</code> to return an optional value of this type. …","Converts an <code>u64</code> to return an optional value of this type. …","Converts an <code>u8</code> to return an optional value of this type. …","Converts a <code>usize</code> to return an optional value of this …","Converts the value of <code>self</code> to an <code>f32</code>. Overflows may map …","Converts the value of <code>self</code> to an <code>f64</code>. Overflows may map …","Converts the value of <code>self</code> to an <code>i128</code>. If the value …","Converts the value of <code>self</code> to an <code>i16</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i32</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i64</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i8</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>isize</code>. If the value …","Converts the value of <code>self</code> to a <code>u128</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u16</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u32</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u64</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u8</code>. If the value cannot be…","Converts the value of <code>self</code> to a <code>usize</code>. If the value …","Return Euler’s number.","Return <code>1.0 / π</code>.","Return <code>1.0 / sqrt(2.0)</code>.","Return <code>2.0 / π</code>.","Return <code>2.0 / sqrt(π)</code>.","Return <code>π / 2.0</code>.","Return <code>π / 3.0</code>.","Return <code>π / 4.0</code>.","Return <code>π / 6.0</code>.","Return <code>π / 8.0</code>.","","Generic trait for floating point numbers that works with …","Return <code>ln(10.0)</code>.","Return <code>ln(2.0)</code>.","Return <code>log10(2.0)</code>.","Return <code>log10(e)</code>.","Return <code>log2(10.0)</code>.","Return <code>log2(e)</code>.","Return Archimedes’ constant <code>π</code>.","Return <code>sqrt(2.0)</code>.","Return the full circle constant <code>τ</code>.","Computes the absolute value of <code>self</code>. Returns …","Returns the smallest integer greater than or equal to a …","Returns the floating point category of the number. If …","Returns epsilon, a small positive value.","Returns the largest integer less than or equal to a …","Returns the fractional part of a number.","Returns positive infinity.","Returns the mantissa, base 2 exponent, and sign as …","Returns <code>true</code> if the number is neither infinite or NaN.","Returns <code>true</code> if the number is infinite.","Returns <code>true</code> if the number is NaN.","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code> and …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code> and …","Returns the maximum of the two numbers.","Returns the largest finite value that this type can …","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this …","Returns the smallest finite value that this type can …","Returns NaN.","Returns negative infinity.","Returns <code>-0.0</code>.","Raise a number to an integer power.","Returns the reciprocal (multiplicative inverse) of the …","Returns the nearest integer to a number. Round half-way …","Returns a number that represents the sign of <code>self</code>.","Converts to degrees, assuming the number is in radians.","Converts to radians, assuming the number is in degrees.","Return the integer part of a number.","Defines a multiplicative identity element for <code>Self</code>.","Defines an additive identity element for <code>Self</code>.","Returns <code>true</code> if <code>self</code> is equal to the multiplicative …","Returns <code>true</code> if <code>self</code> is equal to the additive identity.","Returns the multiplicative identity, <code>1</code>.","Returns the multiplicative identity element of <code>Self</code>, <code>1</code>.","Sets <code>self</code> to the multiplicative identity element of <code>Self</code>, …","Sets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.","Returns the additive identity, <code>0</code>.","Returns the additive identity element of <code>Self</code>, <code>0</code>.","Generic trait for primitive integers.","Returns the number of ones in the binary representation …","Returns the number of zeros in the binary representation …","Convert an integer from big endian to the target’s …","Convert an integer from little endian to the target’s …","Returns the number of leading zeros in the binary …","Raises self to the power of <code>exp</code>, using exponentiation by …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Reverses the byte order of the integer.","Convert <code>self</code> to big endian from the target’s endianness.","Convert <code>self</code> to little endian from the target’s …","Returns the number of trailing zeros in the binary …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","","","","","","","Performs addition that returns <code>None</code> instead of wrapping …","Performs division that returns <code>None</code> instead of panicking …","Performs multiplication that returns <code>None</code> instead of …","Performs negation that returns <code>None</code> if the result can’t …","Performs an integral remainder that returns <code>None</code> instead …","Performs a left shift that returns <code>None</code> on shifts larger …","Performs a right shift that returns <code>None</code> on shifts larger …","Performs subtraction that returns <code>None</code> instead of …","Adds two numbers, checking for overflow. If overflow …","Divides two numbers, checking for underflow, overflow and …","Multiplies two numbers, checking for underflow or …","Negates a number, returning <code>None</code> for results that can’t …","Finds the remainder of dividing two numbers, checking for …","Checked shift left. Computes <code>self << rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self >> rhs</code>, returning <code>None</code> …","Subtracts two numbers, checking for underflow. If …","Unary operator for retrieving the multiplicative inverse, …","The result after applying the operator.","Returns the multiplicative inverse of <code>self</code>.","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","The fused multiply-add assignment operation.","The resulting type after applying the fused multiply-add.","Performs the fused multiply-add operation.","Performs the fused multiply-add operation.","Performs addition with a flag for overflow.","Performs multiplication with a flag for overflow.","Performs substraction with a flag for overflow.","Returns a tuple of the sum along with a boolean …","Returns a tuple of the product along with a boolean …","Returns a tuple of the difference along with a boolean …","Saturating math operations. Deprecated, use <code>SaturatingAdd</code>…","Performs addition that saturates at the numeric bounds …","Performs multiplication that saturates at the numeric …","Performs subtraction that saturates at the numeric bounds …","Saturating addition operator. Returns a+b, saturating at …","Saturating addition. Computes <code>self + other</code>, saturating at …","Saturating multiplication. Computes <code>self * other</code>, …","Saturating subtraction operator. Returns a-b, saturating …","Saturating subtraction. Computes <code>self - other</code>, saturating …","Performs addition that wraps around on overflow.","Performs multiplication that wraps around on overflow.","Performs a negation that does not panic.","Performs a left shift that does not panic.","Performs a right shift that does not panic.","Performs subtraction that wraps around on overflow.","Wrapping (modular) addition. Computes <code>self + other</code>, …","Wrapping (modular) multiplication. Computes <code>self * other</code>, …","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …","Panic-free bitwise shift-left; yields <code>self << mask(rhs)</code>, …","Panic-free bitwise shift-right; yields <code>self >> mask(rhs)</code>, …","Wrapping (modular) subtraction. Computes <code>self - other</code>, …","The result after applying the operator.","Binary operator for raising a value to a power.","Raises a value to the power of exp, returning <code>None</code> if an …","Raises a value to the power of exp, using exponentiation …","Returns <code>self</code> to the power <code>rhs</code>.","Useful functions for signed numbers (i.e. numbers that …","A trait for values which cannot be negative","Computes the absolute value.","Computes the absolute value.","The positive difference of two numbers.","The positive difference of two numbers.","Returns true if the number is negative and false if the …","Returns true if the number is positive and false if the …","Returns the sign of the number.","Returns the sign of the number."],"i":[1,0,2,1,0,0,0,0,0,0,0,0,1,3,1,3,0,0,0,0,0,0,1,3,3,1,3,2,0,0,1,3,3,0,0,0,1,3,1,3,1,3,0,4,4,0,0,0,0,5,0,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,0,0,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,0,11,12,0,11,11,12,0,12,0,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,15,16,17,18,19,20,21,0,22,22,0,0,23,23,24,0,0,0,25,26,27,0,0,0,0,28,29,30,28,31,0,0,0,0,0,0,32,33,34,35,36,37,38,0,0,0,38,0,0,0,39,0,39,39,39,0,39],"f":[null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],null,null,[[["partialord",8]],["partialord",8]],[[["partialord",8]],["partialord",8]],[[["partialord",8]],["partialord",8]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["str",15],["u32",15]],["result",4]],null,null,[[]],[[]],null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,[[]],[[]],null,null,null,null,[[]],[[["numcast",8]],[["option",4],["numcast",8]]],[[["toprimitive",8]],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["i128",15]],["option",4]],[[["i16",15]],["option",4]],[[["i32",15]],["option",4]],[[["i64",15]],["option",4]],[[["i8",15]],["option",4]],[[["isize",15]],["option",4]],[[["u128",15]],["option",4]],[[["u16",15]],["option",4]],[[["u32",15]],["option",4]],[[["u64",15]],["option",4]],[[["u8",15]],["option",4]],[[["usize",15]],["option",4]],[[],[["option",4,["f32"]],["f32",15]]],[[],[["option",4,["f64"]],["f64",15]]],[[],[["option",4,["i128"]],["i128",15]]],[[],[["option",4,["i16"]],["i16",15]]],[[],[["i32",15],["option",4,["i32"]]]],[[],[["option",4,["i64"]],["i64",15]]],[[],[["i8",15],["option",4,["i8"]]]],[[],[["isize",15],["option",4,["isize"]]]],[[],[["option",4,["u128"]],["u128",15]]],[[],[["option",4,["u16"]],["u16",15]]],[[],[["u32",15],["option",4,["u32"]]]],[[],[["u64",15],["option",4,["u64"]]]],[[],[["option",4,["u8"]],["u8",15]]],[[],[["usize",15],["option",4,["usize"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["fpcategory",4]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["i32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[],["bool",15]],[[],["bool",15]],[[],["one",8]],[[]],[[]],[[]],[[],["zero",8]],[[]],null,[[],["u32",15]],[[],["u32",15]],[[]],[[]],[[],["u32",15]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[]],[[]],[[]],[[],["u32",15]],[[["u32",15]]],[[["u32",15]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[],["option",4]],null,null,[[]],null,null,null,[[]],[[]],null,null,null,[[]],[[]],[[]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,[[]],[[]],[[]],[[["u32",15]]],[[["u32",15]]],[[]],null,null,[[["clone",8],["usize",15],["one",8],["checkedmul",8]],[["clone",8],["option",4],["one",8],["checkedmul",8]]],[[["clone",8],["usize",15],["one",8],["mul",8]],[["clone",8],["one",8],["mul",8]]],[[]],null,null,[[["signed",8]],["signed",8]],[[]],[[["signed",8]],["signed",8]],[[]],[[],["bool",15]],[[],["bool",15]],[[["signed",8]],["signed",8]],[[]]],"p":[[4,"FloatErrorKind"],[8,"Num"],[3,"ParseFloatError"],[8,"Bounded"],[8,"AsPrimitive"],[8,"NumCast"],[8,"FromPrimitive"],[8,"ToPrimitive"],[8,"FloatConst"],[8,"FloatCore"],[8,"One"],[8,"Zero"],[8,"PrimInt"],[8,"CheckedAdd"],[8,"CheckedDiv"],[8,"CheckedMul"],[8,"CheckedNeg"],[8,"CheckedRem"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"CheckedSub"],[8,"Inv"],[8,"MulAdd"],[8,"MulAddAssign"],[8,"OverflowingAdd"],[8,"OverflowingMul"],[8,"OverflowingSub"],[8,"Saturating"],[8,"SaturatingAdd"],[8,"SaturatingMul"],[8,"SaturatingSub"],[8,"WrappingAdd"],[8,"WrappingMul"],[8,"WrappingNeg"],[8,"WrappingShl"],[8,"WrappingShr"],[8,"WrappingSub"],[8,"Pow"],[8,"Signed"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};