var searchIndex = JSON.parse('{\
"az":{"doc":"Numeric casts","t":"IIIIIIIIIDIIIIIIIIIKLLLFKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLKLFKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLKLFKLLLLLLLLLLLLLLLLLLLLLLLLKLLKLFKLLLLLLLLLLLLLLLLLLLLLLLLKLLLLKLFKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLKLFKLLLLLLLLLLLLLLLLLLLLLLLLKL","n":["Az","Cast","CastFrom","CheckedAs","CheckedCast","CheckedCastFrom","OverflowingAs","OverflowingCast","OverflowingCastFrom","Round","SaturatingAs","SaturatingCast","SaturatingCastFrom","UnwrappedAs","UnwrappedCast","UnwrappedCastFrom","WrappingAs","WrappingCast","WrappingCastFrom","az","az","borrow","borrow_mut","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast_from","cast_from","checked_as","checked_as","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast_from","checked_cast_from","clone","cmp","default","eq","fmt","fmt","fmt","fmt","from","into","overflowing_as","overflowing_as","overflowing_cast","overflowing_cast","overflowing_cast","overflowing_cast","overflowing_cast","overflowing_cast","overflowing_cast","overflowing_cast","overflowing_cast","overflowing_cast","overflowing_cast","overflowing_cast","overflowing_cast","overflowing_cast","overflowing_cast","overflowing_cast","overflowing_cast","overflowing_cast","overflowing_cast","overflowing_cast","overflowing_cast","overflowing_cast","overflowing_cast","overflowing_cast","overflowing_cast","overflowing_cast","overflowing_cast_from","overflowing_cast_from","partial_cmp","saturating_as","saturating_as","saturating_cast","saturating_cast","saturating_cast","saturating_cast","saturating_cast","saturating_cast","saturating_cast","saturating_cast","saturating_cast","saturating_cast","saturating_cast","saturating_cast","saturating_cast","saturating_cast","saturating_cast","saturating_cast","saturating_cast","saturating_cast","saturating_cast","saturating_cast","saturating_cast","saturating_cast","saturating_cast","saturating_cast","saturating_cast","saturating_cast","saturating_cast_from","saturating_cast_from","try_from","try_into","type_id","unwrapped_as","unwrapped_as","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast_from","unwrapped_cast_from","wrapping_as","wrapping_as","wrapping_cast","wrapping_cast","wrapping_cast","wrapping_cast","wrapping_cast","wrapping_cast","wrapping_cast","wrapping_cast","wrapping_cast","wrapping_cast","wrapping_cast","wrapping_cast","wrapping_cast","wrapping_cast","wrapping_cast","wrapping_cast","wrapping_cast","wrapping_cast","wrapping_cast","wrapping_cast","wrapping_cast","wrapping_cast","wrapping_cast","wrapping_cast","wrapping_cast","wrapping_cast","wrapping_cast_from","wrapping_cast_from"],"q":[[0,"az"]],"d":["Used to cast values.","Used to cast values.","Used to cast values.","Used for checked casts.","Used for checked casts.","Used for checked casts.","Used for overflowing casts.","Used for overflowing casts.","Used for overflowing casts.","Used to convert floating-point numbers to integers with …","Used to cast into the destination type, saturating if the …","Used to cast into the destination type, saturating if the …","Used to cast, saturating if the value does not fit.","Used to cast values, panicking if the value does not fit.","Used to cast values, panicking if the value does not fit.","Used to cast values, panicking if the value does not fit.","Wrapping cast.","Wrapping cast.","Wrapping cast.","Casts the value.","","","","Casts the value.","Casts the value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Casts the value.","","Casts the value.","","Casts the value, returning <code>None</code> if the value does not fit.","Casts the value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Casts the value.","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Casts the value.","","Overflowing cast.","Casts the value.","","","","","","","","","","","","","","","","","","","","","","","","","Casts the value.","","","Casts the value.","","Casts the value, saturating if the value does not fit.","Casts the value.","","","","","","","","","","","","","","","","","","","","","","","","","Casts the value.","","","","","Casts the value.","","Casts the value, panicking if the value does not fit.","Casts the value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Casts the value.","","Casts the value.","","Casts the value, wrapping on overflow.","Casts the value.","","","","","","","","","","","","","","","","","","","","","","","","","Casts the value.",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,3,3,3,0,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,40,3,41,3,0,18,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,42,3,3,3,3,3,3,3,3,3,3,3,43,3,0,32,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,44,3,3,45,3,0,34,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,46,3,3,3,3,47,3,0,37,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,48,3,49,3,0,38,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,50,3],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[[]],[[]],[[]],[1],[[]],[[[3,[2]]],4],[[[3,[5]]],6],[[[3,[2]]],7],[[[3,[2]]],[[9,[8]]]],[[[3,[5]]],[[9,[10]]]],[[[3,[5]]],[[9,[6]]]],[[[3,[2]]],[[9,[11]]]],[[[3,[2]]],[[9,[10]]]],[[[3,[5]]],10],[[[3,[5]]],[[9,[7]]]],[[[3,[5]]],4],[[[3,[2]]],[[9,[12]]]],[[[3,[2]]],[[9,[7]]]],[[[3,[2]]],6],[[[3,[2]]],[[9,[4]]]],[[[3,[2]]],[[9,[13]]]],[[[3,[5]]],[[9,[14]]]],[[[3,[5]]],[[9,[8]]]],[[[3,[5]]],11],[[[3,[5]]],[[9,[13]]]],[[[3,[2]]],[[9,[14]]]],[[[3,[2]]],[[9,[15]]]],[[[3,[5]]],[[9,[4]]]],[[[3,[2]]],[[9,[6]]]],[[[3,[5]]],13],[[[3,[2]]],[[9,[16]]]],[[[3,[5]]],15],[[[3,[5]]],[[9,[15]]]],[[[3,[2]]],17],[[[3,[5]]],16],[[[3,[2]]],15],[[[3,[5]]],[[9,[11]]]],[[[3,[5]]],12],[[[3,[5]]],14],[[[3,[5]]],[[9,[17]]]],[[[3,[2]]],8],[[[3,[5]]],17],[[[3,[2]]],[[9,[17]]]],[[[3,[5]]],7],[[[3,[5]]],[[9,[16]]]],[[[3,[2]]],11],[[[3,[2]]],12],[[[3,[2]]],16],[[[3,[5]]],[[9,[12]]]],[[[3,[2]]],13],[[[3,[2]]],10],[[[3,[2]]],14],[[[3,[5]]],8],[[]],[[]],[18,19],[[],19],[18,19],[[],19],[[[3,[2]]],[[19,[[9,[11]]]]]],[[[3,[2]]],[[19,[[9,[6]]]]]],[[[3,[5]]],[[19,[[9,[17]]]]]],[[[3,[5]]],[[19,[8]]]],[[[3,[2]]],[[19,[14]]]],[[[3,[5]]],[[19,[17]]]],[[[3,[5]]],[[19,[[9,[6]]]]]],[[[3,[2]]],[[19,[4]]]],[[[3,[2]]],[[19,[[9,[12]]]]]],[[[3,[2]]],[[19,[6]]]],[[[3,[2]]],[[19,[16]]]],[[[3,[2]]],[[19,[10]]]],[[[3,[5]]],[[19,[13]]]],[[[3,[2]]],[[19,[[9,[4]]]]]],[[[3,[2]]],[[19,[11]]]],[[[3,[2]]],[[19,[[9,[10]]]]]],[[[3,[5]]],[[19,[[9,[13]]]]]],[[[3,[5]]],[[19,[[9,[8]]]]]],[[[3,[5]]],[[19,[16]]]],[[[3,[5]]],[[19,[14]]]],[[[3,[5]]],[[19,[11]]]],[[[3,[2]]],[[19,[8]]]],[[[3,[2]]],[[19,[7]]]],[[[3,[2]]],[[19,[[9,[8]]]]]],[[[3,[2]]],[[19,[13]]]],[[[3,[5]]],[[19,[[9,[4]]]]]],[[[3,[5]]],[[19,[[9,[10]]]]]],[[[3,[5]]],[[19,[12]]]],[[[3,[2]]],[[19,[[9,[7]]]]]],[[[3,[5]]],[[19,[[9,[11]]]]]],[[[3,[5]]],[[19,[[9,[16]]]]]],[[[3,[5]]],[[19,[[9,[14]]]]]],[[[3,[5]]],[[19,[15]]]],[[[3,[2]]],[[19,[[9,[14]]]]]],[[[3,[2]]],[[19,[[9,[13]]]]]],[[[3,[2]]],[[19,[15]]]],[[[3,[5]]],[[19,[[9,[12]]]]]],[[[3,[5]]],[[19,[4]]]],[[[3,[5]]],[[19,[7]]]],[[[3,[2]]],[[19,[[9,[16]]]]]],[[[3,[2]]],[[19,[12]]]],[[[3,[5]]],[[19,[[9,[7]]]]]],[[[3,[5]]],[[19,[[9,[15]]]]]],[[[3,[2]]],[[19,[17]]]],[[[3,[2]]],[[19,[[9,[17]]]]]],[[[3,[2]]],[[19,[[9,[15]]]]]],[[[3,[5]]],[[19,[10]]]],[[[3,[5]]],[[19,[6]]]],[[],19],[[],19],[[[3,[20]]],[[3,[20]]]],[[[3,[21]],[3,[21]]],22],[[],[[3,[23]]]],[[[3,[24]],[3,[24]]],25],[[[3,[26]],27],28],[[[3,[29]],27],28],[[[3,[30]],27],28],[[[3,[31]],27],28],[[]],[[]],[32],[[]],[32],[[]],[[[3,[5]]]],[[[3,[2]]]],[[[3,[5]]]],[[[3,[5]]]],[[[3,[2]]]],[[[3,[2]]]],[[[3,[2]]]],[[[3,[2]]]],[[[3,[2]]]],[[[3,[5]]]],[[[3,[5]]]],[[[3,[2]]]],[[[3,[5]]]],[[[3,[5]]]],[[[3,[2]]]],[[[3,[2]]]],[[[3,[5]]]],[[[3,[2]]]],[[[3,[5]]]],[[[3,[5]]]],[[[3,[5]]]],[[[3,[2]]]],[[[3,[2]]]],[[[3,[5]]]],[[]],[[]],[[[3,[33]],[3,[33]]],[[19,[22]]]],[34],[[]],[34],[[]],[[[3,[5]]],4],[[[3,[2]]],11],[[[3,[2]]],17],[[[3,[2]]],13],[[[3,[5]]],17],[[[3,[2]]],12],[[[3,[5]]],12],[[[3,[5]]],7],[[[3,[2]]],16],[[[3,[5]]],16],[[[3,[5]]],10],[[[3,[5]]],8],[[[3,[2]]],4],[[[3,[2]]],10],[[[3,[2]]],15],[[[3,[5]]],13],[[[3,[2]]],14],[[[3,[5]]],14],[[[3,[2]]],8],[[[3,[2]]],7],[[[3,[5]]],11],[[[3,[5]]],15],[[[3,[2]]],6],[[[3,[5]]],6],[[]],[[]],[[],35],[[],35],[[],36],[37],[[]],[37],[[]],[[[3,[5]]],12],[[[3,[2]]],[[9,[15]]]],[[[3,[2]]],16],[[[3,[5]]],[[9,[17]]]],[[[3,[2]]],[[9,[8]]]],[[[3,[2]]],8],[[[3,[5]]],[[9,[16]]]],[[[3,[2]]],[[9,[13]]]],[[[3,[2]]],10],[[[3,[5]]],13],[[[3,[2]]],12],[[[3,[5]]],10],[[[3,[5]]],[[9,[14]]]],[[[3,[5]]],[[9,[13]]]],[[[3,[5]]],4],[[[3,[2]]],13],[[[3,[5]]],8],[[[3,[2]]],[[9,[11]]]],[[[3,[2]]],[[9,[10]]]],[[[3,[5]]],[[9,[15]]]],[[[3,[2]]],[[9,[16]]]],[[[3,[2]]],[[9,[4]]]],[[[3,[2]]],[[9,[12]]]],[[[3,[2]]],[[9,[6]]]],[[[3,[5]]],[[9,[4]]]],[[[3,[5]]],[[9,[7]]]],[[[3,[2]]],11],[[[3,[5]]],6],[[[3,[5]]],14],[[[3,[5]]],[[9,[10]]]],[[[3,[5]]],[[9,[6]]]],[[[3,[2]]],17],[[[3,[2]]],6],[[[3,[2]]],14],[[[3,[5]]],16],[[[3,[5]]],7],[[[3,[5]]],17],[[[3,[2]]],4],[[[3,[5]]],15],[[[3,[2]]],[[9,[7]]]],[[[3,[2]]],[[9,[14]]]],[[[3,[5]]],[[9,[11]]]],[[[3,[2]]],15],[[[3,[2]]],7],[[[3,[5]]],[[9,[8]]]],[[[3,[5]]],[[9,[12]]]],[[[3,[5]]],11],[[[3,[2]]],[[9,[17]]]],[[]],[[]],[38],[[]],[38],[[]],[[[3,[2]]],7],[[[3,[2]]],13],[[[3,[2]]],6],[[[3,[5]]],4],[[[3,[2]]],4],[[[3,[5]]],13],[[[3,[5]]],12],[[[3,[2]]],15],[[[3,[2]]],8],[[[3,[5]]],15],[[[3,[2]]],12],[[[3,[5]]],16],[[[3,[2]]],17],[[[3,[5]]],7],[[[3,[2]]],16],[[[3,[5]]],17],[[[3,[5]]],11],[[[3,[5]]],14],[[[3,[5]]],6],[[[3,[2]]],14],[[[3,[2]]],11],[[[3,[5]]],8],[[[3,[2]]],10],[[[3,[5]]],10],[[]],[[]]],"c":[],"p":[[8,"Cast"],[15,"f64"],[3,"Round"],[15,"u64"],[15,"f32"],[15,"u32"],[15,"usize"],[15,"u128"],[3,"Wrapping"],[15,"u16"],[15,"i8"],[15,"i128"],[15,"i64"],[15,"i16"],[15,"isize"],[15,"u8"],[15,"i32"],[8,"CheckedCast"],[4,"Option"],[8,"Clone"],[8,"Ord"],[4,"Ordering"],[8,"Default"],[8,"PartialEq"],[15,"bool"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[8,"Display"],[8,"UpperExp"],[8,"LowerExp"],[8,"OverflowingCast"],[8,"PartialOrd"],[8,"SaturatingCast"],[4,"Result"],[3,"TypeId"],[8,"UnwrappedCast"],[8,"WrappingCast"],[8,"Az"],[8,"CastFrom"],[8,"CheckedAs"],[8,"CheckedCastFrom"],[8,"OverflowingAs"],[8,"OverflowingCastFrom"],[8,"SaturatingAs"],[8,"SaturatingCastFrom"],[8,"UnwrappedAs"],[8,"UnwrappedCastFrom"],[8,"WrappingAs"],[8,"WrappingCastFrom"]]},\
"bitmap_font":{"doc":"This crate provides bitmap fonts for the <code>embedded-graphics</code> …","t":"DDLLLLLLLLLLLLLLMLLLMLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLRRRRRRRRRRRRRRRRRRRRRRRRRRRR","n":["BitmapFont","TextStyle","az","az","borrow","borrow","borrow_mut","borrow_mut","cast_from","cast_from","checked_as","checked_as","checked_cast_from","checked_cast_from","clone","clone","color","draw_glyph","draw_string","draw_whitespace","font","from","from","height","into","into","line_height","measure_string","new","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","pixel_double","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","tamzen","try_from","try_from","try_into","try_into","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","width","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","FONT_10x18","FONT_10x18_BOLD","FONT_10x20","FONT_10x20_BOLD","FONT_12x24","FONT_12x24_BOLD","FONT_14x26","FONT_14x26_BOLD","FONT_14x28","FONT_14x28_BOLD","FONT_16x30","FONT_16x30_BOLD","FONT_16x32","FONT_16x32_BOLD","FONT_20x40","FONT_20x40_BOLD","FONT_5x9","FONT_5x9_BOLD","FONT_6x12","FONT_6x12_BOLD","FONT_7x13","FONT_7x13_BOLD","FONT_7x14","FONT_7x14_BOLD","FONT_8x15","FONT_8x15_BOLD","FONT_8x16","FONT_8x16_BOLD"],"q":[[0,"bitmap_font"],[54,"bitmap_font::tamzen"]],"d":["Stores the font bitmap and some additional info for each …","The equivalent of <code>MonoTextStyle</code> for <code>BitmapFont</code>.","","","","","","","","","","","","","","","","Draw a glyph to the <code>target</code> with <code>color</code> at position <code>pos</code>.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Return the height of each character.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","Returns a pixel-double version of this font.","","","","","Tamzen font-based bitmap fonts. The included glyphs are a …","","","","","","","","","","","Return the width of each character.","","","","","Pixel-double version of <code>FONT_5x9</code>.","Pixel-double version of <code>FONT_5x9_BOLD</code>.","Tamzen 10x20 Font.","Tamzen 10x20 Bold Font.","Pixel-double version of <code>FONT_6x12</code>.","Pixel-double version of <code>FONT_6x12_BOLD</code>.","Pixel-double version of <code>FONT_7x13</code>.","Pixel-double version of <code>FONT_7x13_BOLD</code>.","Pixel-double version of <code>FONT_7x14</code>.","Pixel-double version of <code>FONT_7x14_BOLD</code>.","Pixel-double version of <code>FONT_8x15</code>.","Pixel-double version of <code>FONT_8x15_BOLD</code>.","Pixel-double version of <code>FONT_8x16</code>.","Pixel-double version of <code>FONT_8x16_BOLD</code>.","Pixel-double version of <code>FONT_10x20</code>.","Pixel-double version of <code>FONT_10x20_BOLD</code>.","Tamzen 5x9 Font.","Tamzen 5x9 Bold Font.","Tamzen 6x12 Font.","Tamzen 6x12 Bold Font.","Tamzen 7x13 Font.","Tamzen 7x13 Bold Font.","Tamzen 7x14 Font.","Tamzen 7x14 Bold Font.","Tamzen 8x15 Font.","Tamzen 8x15 Bold Font.","Tamzen 8x16 Font.","Tamzen 8x16 Bold Font."],"i":[0,0,2,3,2,3,2,3,2,3,2,3,2,3,2,3,3,2,3,3,3,2,3,2,2,3,3,3,3,2,3,2,3,2,2,3,2,3,0,2,3,2,3,2,3,2,3,2,3,2,2,3,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],1],[[],1],[[],1],[[],1],[2,2],[3,3],0,[[2,4,5,6,7],8],[[3,9,7,10,5],[[8,[7]]]],[[3,4,7,10,5],[[8,[7]]]],0,[[]],[[]],[2,4],[[]],[[]],[3,4],[[3,9,7,10],11],[[2,6],3],[[]],[[]],[[]],[[]],[2,2],[[]],[[]],[[]],[[]],0,[[],8],[[],8],[[],8],[[],8],[[],12],[[],12],[[]],[[]],[[]],[[]],[2,4],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"c":[],"p":[[4,"Option"],[3,"BitmapFont"],[3,"TextStyle"],[15,"u32"],[8,"DrawTarget"],[4,"BinaryColor"],[3,"Point"],[4,"Result"],[15,"str"],[4,"Baseline"],[3,"TextMetrics"],[3,"TypeId"]]},\
"byteorder":{"doc":"This crate provides convenience methods for encoding and …","t":"GEIGEGGLLLLLLLLLLLLLLLLKLLKLLLLLLKLLKLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLKLLKLLLKLLKLLLKLLKLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLKLLKLLLKLLKLLLKLLKLLKLLKLL","n":["BE","BigEndian","ByteOrder","LE","LittleEndian","NativeEndian","NetworkEndian","borrow","borrow","borrow_mut","borrow_mut","clone","clone","cmp","cmp","default","default","eq","eq","fmt","fmt","from","from","from_slice_f32","from_slice_f32","from_slice_f32","from_slice_f64","from_slice_f64","from_slice_f64","from_slice_i128","from_slice_i16","from_slice_i32","from_slice_i64","from_slice_u128","from_slice_u128","from_slice_u128","from_slice_u16","from_slice_u16","from_slice_u16","from_slice_u32","from_slice_u32","from_slice_u32","from_slice_u64","from_slice_u64","from_slice_u64","hash","hash","into","into","partial_cmp","partial_cmp","read_f32","read_f32_into","read_f32_into_unchecked","read_f64","read_f64_into","read_f64_into_unchecked","read_i128","read_i128_into","read_i16","read_i16_into","read_i24","read_i32","read_i32_into","read_i48","read_i64","read_i64_into","read_int","read_int128","read_u128","read_u128","read_u128","read_u128_into","read_u128_into","read_u128_into","read_u16","read_u16","read_u16","read_u16_into","read_u16_into","read_u16_into","read_u24","read_u32","read_u32","read_u32","read_u32_into","read_u32_into","read_u32_into","read_u48","read_u64","read_u64","read_u64","read_u64_into","read_u64_into","read_u64_into","read_uint","read_uint","read_uint","read_uint128","read_uint128","read_uint128","try_from","try_from","try_into","try_into","type_id","type_id","write_f32","write_f32_into","write_f64","write_f64_into","write_i128","write_i128_into","write_i16","write_i16_into","write_i24","write_i32","write_i32_into","write_i48","write_i64","write_i64_into","write_i8_into","write_int","write_int128","write_u128","write_u128","write_u128","write_u128_into","write_u128_into","write_u128_into","write_u16","write_u16","write_u16","write_u16_into","write_u16_into","write_u16_into","write_u24","write_u32","write_u32","write_u32","write_u32_into","write_u32_into","write_u32_into","write_u48","write_u64","write_u64","write_u64","write_u64_into","write_u64_into","write_u64_into","write_uint","write_uint","write_uint","write_uint128","write_uint128","write_uint128"],"q":[[0,"byteorder"]],"d":["A type alias for <code>BigEndian</code>.","Defines big-endian serialization.","<code>ByteOrder</code> describes types that can serialize integers as …","A type alias for <code>LittleEndian</code>.","Defines little-endian serialization.","Defines system native-endian serialization.","Defines network byte order serialization.","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Converts the given slice of IEEE754 single-precision (4 …","","","Converts the given slice of IEEE754 double-precision (8 …","","","Converts the given slice of signed 128 bit integers to a …","Converts the given slice of signed 16 bit integers to a …","Converts the given slice of signed 32 bit integers to a …","Converts the given slice of signed 64 bit integers to a …","Converts the given slice of unsigned 128 bit integers to a …","","","Converts the given slice of unsigned 16 bit integers to a …","","","Converts the given slice of unsigned 32 bit integers to a …","","","Converts the given slice of unsigned 64 bit integers to a …","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Reads a IEEE754 single-precision (4 bytes) floating point …","Reads IEEE754 single-precision (4 bytes) floating point …","<strong>DEPRECATED</strong>.","Reads a IEEE754 double-precision (8 bytes) floating point …","Reads IEEE754 single-precision (4 bytes) floating point …","<strong>DEPRECATED</strong>.","Reads a signed 128 bit integer from <code>buf</code>.","Reads signed 128 bit integers from <code>src</code> into <code>dst</code>.","Reads a signed 16 bit integer from <code>buf</code>.","Reads signed 16 bit integers from <code>src</code> to <code>dst</code>.","Reads a signed 24 bit integer from <code>buf</code>, stored in i32.","Reads a signed 32 bit integer from <code>buf</code>.","Reads signed 32 bit integers from <code>src</code> into <code>dst</code>.","Reads a signed 48 bit integer from <code>buf</code>, stored in i64.","Reads a signed 64 bit integer from <code>buf</code>.","Reads signed 64 bit integers from <code>src</code> into <code>dst</code>.","Reads a signed n-bytes integer from <code>buf</code>.","Reads a signed n-bytes integer from <code>buf</code>.","Reads an unsigned 128 bit integer from <code>buf</code>.","","","Reads unsigned 128 bit integers from <code>src</code> into <code>dst</code>.","","","Reads an unsigned 16 bit integer from <code>buf</code>.","","","Reads unsigned 16 bit integers from <code>src</code> into <code>dst</code>.","","","Reads an unsigned 24 bit integer from <code>buf</code>, stored in u32.","Reads an unsigned 32 bit integer from <code>buf</code>.","","","Reads unsigned 32 bit integers from <code>src</code> into <code>dst</code>.","","","Reads an unsigned 48 bit integer from <code>buf</code>, stored in u64.","Reads an unsigned 64 bit integer from <code>buf</code>.","","","Reads unsigned 64 bit integers from <code>src</code> into <code>dst</code>.","","","Reads an unsigned n-bytes integer from <code>buf</code>.","","","Reads an unsigned n-bytes integer from <code>buf</code>.","","","","","","","","","Writes a IEEE754 single-precision (4 bytes) floating point …","Writes IEEE754 single-precision (4 bytes) floating point …","Writes a IEEE754 double-precision (8 bytes) floating point …","Writes IEEE754 double-precision (8 bytes) floating point …","Writes a signed 128 bit integer <code>n</code> to <code>buf</code>.","Writes signed 128 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed 16 bit integer <code>n</code> to <code>buf</code>.","Writes signed 16 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed 24 bit integer <code>n</code> to <code>buf</code>, stored in i32.","Writes a signed 32 bit integer <code>n</code> to <code>buf</code>.","Writes signed 32 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed 48 bit integer <code>n</code> to <code>buf</code>, stored in i64.","Writes a signed 64 bit integer <code>n</code> to <code>buf</code>.","Writes signed 64 bit integers from <code>src</code> into <code>dst</code>.","Writes signed 8 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","Writes a signed integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","Writes an unsigned 128 bit integer <code>n</code> to <code>buf</code>.","","","Writes unsigned 128 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned 16 bit integer <code>n</code> to <code>buf</code>.","","","Writes unsigned 16 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned 24 bit integer <code>n</code> to <code>buf</code>, stored in u32.","Writes an unsigned 32 bit integer <code>n</code> to <code>buf</code>.","","","Writes unsigned 32 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned 48 bit integer <code>n</code> to <code>buf</code>, stored in u64.","Writes an unsigned 64 bit integer <code>n</code> to <code>buf</code>.","","","Writes unsigned 64 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","","","Writes an unsigned integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","",""],"i":[0,0,0,0,0,0,0,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,22,1,2,22,1,2,22,22,22,22,22,1,2,22,1,2,22,1,2,22,1,2,1,2,1,2,1,2,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,1,2,22,1,2,22,1,2,22,1,2,22,22,1,2,22,1,2,22,22,1,2,22,1,2,22,1,2,22,1,2,1,2,1,2,1,2,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,1,2,22,1,2,22,1,2,22,1,2,22,22,1,2,22,1,2,22,22,1,2,22,1,2,22,1,2,22,1,2],"f":[0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[1,1],[2,2],[[1,1],3],[[2,2],3],[[],1],[[],2],[[1,1],4],[[2,2],4],[[1,5],6],[[2,5],6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[1,7]],[[2,7]],[[]],[[]],[[1,1],[[8,[3]]]],[[2,2],[[8,[3]]]],[[],9],[[]],[[]],[[],10],[[]],[[]],[[],11],[[]],[[],12],[[]],[[],13],[[],13],[[]],[[],14],[[],14],[[]],[15,14],[15,11],[[],16],[[],16],[[],16],[[]],[[]],[[]],[[],17],[[],17],[[],17],[[]],[[]],[[]],[[],18],[[],18],[[],18],[[],18],[[]],[[]],[[]],[[],19],[[],19],[[],19],[[],19],[[]],[[]],[[]],[15,19],[15,19],[15,19],[15,16],[15,16],[15,16],[[],20],[[],20],[[],20],[[],20],[[],21],[[],21],[9],[[]],[10],[[]],[11],[[]],[12],[[]],[13],[13],[[]],[14],[14],[[]],[[]],[[14,15]],[[11,15]],[16],[16],[16],[[]],[[]],[[]],[17],[17],[17],[[]],[[]],[[]],[18],[18],[18],[18],[[]],[[]],[[]],[19],[19],[19],[19],[[]],[[]],[[]],[[19,15]],[[19,15]],[[19,15]],[[16,15]],[[16,15]],[[16,15]]],"c":[53,56],"p":[[4,"BigEndian"],[4,"LittleEndian"],[4,"Ordering"],[15,"bool"],[3,"Formatter"],[6,"Result"],[8,"Hasher"],[4,"Option"],[15,"f32"],[15,"f64"],[15,"i128"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"usize"],[15,"u128"],[15,"u16"],[15,"u32"],[15,"u64"],[4,"Result"],[3,"TypeId"],[8,"ByteOrder"]]},\
"embedded_graphics":{"doc":"Embedded-graphics is a 2D graphics library that is focused …","t":"QIQDLLLLLLLLLKLALALALALALAAALLLAAALLAALLLLLLLDQDDIIQDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLKLLLLKLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLEEEDINNNNNNNNNINIDNDNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLMLLLMLLLLLQQIDIIDGGDLLLLLLLLLLLLLLLLLLLLLLLLKLLLKLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLIIAKKAAKDLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIDSSLLLLLLLLLLKLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDALLLLLMMLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLMLMMLLLLLAAAAAAAAAAAAALALLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLMLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRNIRRRRRRRRRRRRNNNNNNNNNNNNRNEDLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLSSSDDDDESSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSDDDIISSSSNNISQDDDDIQSSISLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLSEIQEIDDDDDDDQILLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLKLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLCCCCCCCCCCCCCCCCCCCCCCCCCCCNCQICCCNQCIQNICIDDCCCEDIICALLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLKLLLLLKALLLLLLMLLLLLLLLLLLLLLLLLLLALLLKLLLLLLLLLLLLLKAMALLALLLLLLLLALMLLMLMMKLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDMMLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLDDDLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMLLLLLLLLLLLLLLLLLLLLLLLLLDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLMLLLLLLDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDDLLLLLLLLLLLLLLLLLLMLMLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLMLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDMMLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLENENNNENENNNNNDNDDNLMLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLMALLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIQQDILLLMLLLLLKKLLLLLKKMLLLLLLLLLLLLLLLLLLLLIKK","n":["Color","Drawable","Output","Pixel","az","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","clone","cmp","default","draw","draw","draw_target","eq","examples","fmt","framebuffer","from","geometry","hash","image","into","iterator","mock_display","mono_font","overflowing_as","overflowing_cast_from","partial_cmp","pixelcolor","prelude","primitives","saturating_as","saturating_cast_from","text","transform","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","wrapping_as","wrapping_cast_from","Clipped","Color","ColorConverted","Cropped","DrawTarget","DrawTargetExt","Error","Translated","az","az","az","az","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounding_box","bounding_box","bounding_box","bounding_box","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clear","clear","clear","clipped","clipped","clipped","clipped","clipped","color_converted","color_converted","color_converted","color_converted","color_converted","cropped","cropped","cropped","cropped","cropped","draw_iter","draw_iter","draw_iter","draw_iter","draw_iter","fill_contiguous","fill_contiguous","fill_contiguous","fill_contiguous","fill_contiguous","fill_solid","fill_solid","fill_solid","fill_solid","fill_solid","fmt","fmt","fmt","fmt","from","from","from","from","into","into","into","into","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","size","translated","translated","translated","translated","translated","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","Framebuffer","as_image","az","borrow","borrow_mut","bounding_box","buffer_size","buffer_size_bpp","cast_from","checked_as","checked_cast_from","clipped","clone","cmp","color_converted","cropped","data","data_mut","draw_iter","draw_iter","draw_iter","draw_iter","draw_iter","draw_iter","draw_iter","draw_iter","draw_iter","draw_iter","eq","fmt","from","hash","into","new","overflowing_as","overflowing_cast_from","partial_cmp","pixel","saturating_as","saturating_cast_from","set_pixel","set_pixel","set_pixel","set_pixel","set_pixel","set_pixel","set_pixel","set_pixel","set_pixel","set_pixel","size","translated","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","wrapping_as","wrapping_cast_from","AnchorPoint","AnchorX","AnchorY","Angle","AngleUnit","Bottom","BottomCenter","BottomLeft","BottomRight","Center","Center","Center","CenterLeft","CenterRight","Dimensions","Left","OriginDimensions","Point","Right","Size","Top","TopCenter","TopLeft","TopRight","abs","abs","add","add","add","add","add_assign","add_assign","add_assign","add_assign","az","az","az","az","az","az","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounding_box","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone","clone","clone","clone","cmp","cmp","cmp","cmp","cmp","component_div","component_div","component_max","component_max","component_min","component_min","component_mul","component_mul","default","default","deg","div","div","div_assign","div_assign","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from_degrees","from_radians","from_xy","hash","hash","hash","hash","hash","height","index","index","into","into","into","into","into","into","mul","mul","mul_assign","mul_assign","neg","neg","new","new","new_equal","new_equal","normalize","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","rad","saturating_add","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_sub","size","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","to_degrees","to_radians","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","width","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","x","x","x_axis","x_axis","y","y","y_axis","y_axis","zero","zero","zero","Color","Color","GetPixel","Image","ImageDrawable","ImageDrawableExt","ImageRaw","ImageRawBE","ImageRawLE","SubImage","az","az","az","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","bounding_box","bounding_box","bounding_box","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","cmp","draw","draw","draw","draw","draw_sub_image","draw_sub_image","draw_sub_image","eq","fmt","fmt","fmt","from","from","from","hash","into","into","into","new","new","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","partial_cmp","pixel","pixel","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","size","size","sub_image","translate","translate_mut","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","with_center","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","ContiguousIteratorExt","PixelIteratorExt","contiguous","draw","into_pixels","pixel","raw","translated","IntoPixels","az","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","draw","fmt","from","into","into_iter","next","overflowing_as","overflowing_cast_from","saturating_as","saturating_cast_from","translated","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","wrapping_as","wrapping_cast_from","Translated","az","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","draw","eq","fmt","from","into","into_iter","next","overflowing_as","overflowing_cast_from","saturating_as","saturating_cast_from","translated","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","wrapping_as","wrapping_cast_from","BitsIterator","ByteIterator","BytesIterator","RawDataSlice","az","az","az","az","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clone","cmp","draw","draw","eq","fmt","fmt","fmt","fmt","from","from","from","from","hash","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","new","next","next","next","next","next","next","next","next","next","next","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","partial_cmp","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","translated","translated","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","ColorMapping","MockDisplay","NONE_COLOR","NONE_COLOR","affected_area","assert_eq","assert_eq_with_message","assert_pattern","assert_pattern_with_message","az","borrow","borrow_mut","bounding_box","cast_from","char_to_color","checked_as","checked_cast_from","clipped","clone","color_converted","color_to_char","cropped","default","diff","draw_iter","draw_pixel","eq","fmt","from","from_pattern","from_points","get_pixel","into","map","new","overflowing_as","overflowing_cast_from","saturating_as","saturating_cast_from","set_allow_out_of_bounds_drawing","set_allow_overdraw","set_pixel","set_pixels","size","swap_xy","translated","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","wrapping_as","wrapping_cast_from","DecorationDimensions","MonoFont","MonoTextStyle","MonoTextStyleBuilder","ascii","az","az","az","az","background_color","background_color","baseline","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","cast_from","cast_from","cast_from","cast_from","character_size","character_spacing","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone","clone","cmp","default","default_strikethrough","default_underline","draw_string","draw_whitespace","eq","eq","eq","fmt","fmt","fmt","fmt","font","font","from","from","from","from","from","glyph_mapping","hash","height","image","into","into","into","into","is_transparent","iso_8859_1","iso_8859_10","iso_8859_13","iso_8859_14","iso_8859_15","iso_8859_16","iso_8859_2","iso_8859_3","iso_8859_4","iso_8859_5","iso_8859_7","iso_8859_9","jis_x0201","line_height","mapping","measure_string","new","new","new","offset","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","partial_cmp","reset_background_color","reset_strikethrough","reset_text_color","reset_underline","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","set_background_color","set_strikethrough_color","set_text_color","set_underline_color","strikethrough","strikethrough","strikethrough_color","strikethrough_with_color","text_color","text_color","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","underline","underline","underline_color","underline_with_color","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","FONT_10X20","FONT_4X6","FONT_5X7","FONT_5X8","FONT_6X10","FONT_6X12","FONT_6X13","FONT_6X13_BOLD","FONT_6X13_ITALIC","FONT_6X9","FONT_7X13","FONT_7X13_BOLD","FONT_7X13_ITALIC","FONT_7X14","FONT_7X14_BOLD","FONT_8X13","FONT_8X13_BOLD","FONT_8X13_ITALIC","FONT_9X15","FONT_9X15_BOLD","FONT_9X18","FONT_9X18_BOLD","FONT_10X20","FONT_4X6","FONT_5X7","FONT_5X8","FONT_6X10","FONT_6X12","FONT_6X13","FONT_6X13_BOLD","FONT_6X13_ITALIC","FONT_6X9","FONT_7X13","FONT_7X13_BOLD","FONT_7X13_ITALIC","FONT_7X14","FONT_7X14_BOLD","FONT_8X13","FONT_8X13_BOLD","FONT_8X13_ITALIC","FONT_9X15","FONT_9X15_BOLD","FONT_9X18","FONT_9X18_BOLD","FONT_10X20","FONT_4X6","FONT_5X7","FONT_5X8","FONT_6X10","FONT_6X12","FONT_6X13","FONT_6X13_BOLD","FONT_6X13_ITALIC","FONT_6X9","FONT_7X13","FONT_7X13_BOLD","FONT_7X13_ITALIC","FONT_7X14","FONT_7X14_BOLD","FONT_8X13","FONT_8X13_BOLD","FONT_8X13_ITALIC","FONT_9X15","FONT_9X15_BOLD","FONT_9X18","FONT_9X18_BOLD","FONT_10X20","FONT_4X6","FONT_5X7","FONT_5X8","FONT_6X10","FONT_6X12","FONT_6X13","FONT_6X13_BOLD","FONT_6X13_ITALIC","FONT_6X9","FONT_7X13","FONT_7X13_BOLD","FONT_7X13_ITALIC","FONT_7X14","FONT_7X14_BOLD","FONT_8X13","FONT_8X13_BOLD","FONT_8X13_ITALIC","FONT_9X15","FONT_9X15_BOLD","FONT_9X18","FONT_9X18_BOLD","FONT_10X20","FONT_4X6","FONT_5X7","FONT_5X8","FONT_6X10","FONT_6X12","FONT_6X13","FONT_6X13_BOLD","FONT_6X13_ITALIC","FONT_6X9","FONT_7X13","FONT_7X13_BOLD","FONT_7X13_ITALIC","FONT_7X14","FONT_7X14_BOLD","FONT_8X13","FONT_8X13_BOLD","FONT_8X13_ITALIC","FONT_9X15","FONT_9X15_BOLD","FONT_9X18","FONT_9X18_BOLD","FONT_10X20","FONT_4X6","FONT_5X7","FONT_5X8","FONT_6X10","FONT_6X12","FONT_6X13","FONT_6X13_BOLD","FONT_6X13_ITALIC","FONT_6X9","FONT_7X13","FONT_7X13_BOLD","FONT_7X13_ITALIC","FONT_7X14","FONT_7X14_BOLD","FONT_8X13","FONT_8X13_BOLD","FONT_8X13_ITALIC","FONT_9X15","FONT_9X15_BOLD","FONT_9X18","FONT_9X18_BOLD","FONT_10X20","FONT_4X6","FONT_5X7","FONT_5X8","FONT_6X10","FONT_6X12","FONT_6X13","FONT_6X13_BOLD","FONT_6X13_ITALIC","FONT_6X9","FONT_7X13","FONT_7X13_BOLD","FONT_7X13_ITALIC","FONT_7X14","FONT_7X14_BOLD","FONT_8X13","FONT_8X13_BOLD","FONT_8X13_ITALIC","FONT_9X15","FONT_9X15_BOLD","FONT_9X18","FONT_9X18_BOLD","FONT_10X20","FONT_4X6","FONT_5X7","FONT_5X8","FONT_6X10","FONT_6X12","FONT_6X13","FONT_6X13_BOLD","FONT_6X13_ITALIC","FONT_6X9","FONT_7X13","FONT_7X13_BOLD","FONT_7X13_ITALIC","FONT_7X14","FONT_7X14_BOLD","FONT_8X13","FONT_8X13_BOLD","FONT_8X13_ITALIC","FONT_9X15","FONT_9X15_BOLD","FONT_9X18","FONT_9X18_BOLD","FONT_10X20","FONT_4X6","FONT_5X7","FONT_5X8","FONT_6X10","FONT_6X12","FONT_6X13","FONT_6X13_BOLD","FONT_6X13_ITALIC","FONT_6X9","FONT_7X13","FONT_7X13_BOLD","FONT_7X13_ITALIC","FONT_7X14","FONT_7X14_BOLD","FONT_8X13","FONT_8X13_BOLD","FONT_8X13_ITALIC","FONT_9X15","FONT_9X15_BOLD","FONT_9X18","FONT_9X18_BOLD","FONT_10X20","FONT_4X6","FONT_5X7","FONT_5X8","FONT_6X10","FONT_6X12","FONT_6X13","FONT_6X13_BOLD","FONT_6X13_ITALIC","FONT_6X9","FONT_7X13","FONT_7X13_BOLD","FONT_7X13_ITALIC","FONT_7X14","FONT_7X14_BOLD","FONT_8X13","FONT_8X13_BOLD","FONT_8X13_ITALIC","FONT_9X15","FONT_9X15_BOLD","FONT_9X18","FONT_9X18_BOLD","FONT_10X20","FONT_4X6","FONT_5X7","FONT_5X8","FONT_6X10","FONT_6X12","FONT_6X13","FONT_6X13_BOLD","FONT_6X13_ITALIC","FONT_6X9","FONT_7X13","FONT_7X13_BOLD","FONT_7X13_ITALIC","FONT_7X14","FONT_7X14_BOLD","FONT_8X13","FONT_8X13_BOLD","FONT_8X13_ITALIC","FONT_9X15","FONT_9X15_BOLD","FONT_9X18","FONT_9X18_BOLD","FONT_10X20","FONT_4X6","FONT_5X7","FONT_5X8","FONT_6X10","FONT_6X12","FONT_6X13","FONT_6X13_BOLD","FONT_6X13_ITALIC","FONT_6X9","FONT_7X13","FONT_7X13_BOLD","FONT_7X13_ITALIC","FONT_7X14","FONT_7X14_BOLD","FONT_8X13","FONT_8X13_BOLD","FONT_8X13_ITALIC","FONT_9X15","FONT_9X15_BOLD","FONT_9X18","FONT_9X18_BOLD","FONT_10X20","FONT_4X6","FONT_5X7","FONT_5X8","FONT_6X10","FONT_6X12","FONT_6X13","FONT_6X13_BOLD","FONT_6X13_ITALIC","FONT_6X9","FONT_7X13","FONT_7X13_BOLD","FONT_7X13_ITALIC","FONT_7X14","FONT_7X14_BOLD","FONT_8X13","FONT_8X13_BOLD","FONT_8X13_ITALIC","FONT_9X15","FONT_9X15_BOLD","FONT_9X18","FONT_9X18_BOLD","FONT_10X20","FONT_6X13","FONT_7X14","FONT_8X13","FONT_9X15","FONT_9X18","ASCII","Ascii","GlyphMapping","ISO_8859_1","ISO_8859_10","ISO_8859_13","ISO_8859_14","ISO_8859_15","ISO_8859_16","ISO_8859_2","ISO_8859_3","ISO_8859_4","ISO_8859_5","ISO_8859_7","ISO_8859_9","Iso8859_1","Iso8859_10","Iso8859_13","Iso8859_14","Iso8859_15","Iso8859_16","Iso8859_2","Iso8859_3","Iso8859_4","Iso8859_5","Iso8859_7","Iso8859_9","JIS_X0201","JisX0201","Mapping","StrGlyphMapping","az","az","borrow","borrow","borrow_mut","borrow_mut","cast_from","cast_from","chars","checked_as","checked_as","checked_cast_from","checked_cast_from","clone","clone","cmp","cmp","contains","eq","eq","fmt","fmt","from","from","glyph_mapping","hash","hash","index","index","into","into","iter","mime","new","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","partial_cmp","partial_cmp","ranges","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","try_from","try_from","try_into","try_into","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","BLACK","BLACK","BLUE","Bgr555","Bgr565","Bgr666","Bgr888","BinaryColor","CSS_ALICE_BLUE","CSS_ANTIQUE_WHITE","CSS_AQUA","CSS_AQUAMARINE","CSS_AZURE","CSS_BEIGE","CSS_BISQUE","CSS_BLACK","CSS_BLANCHED_ALMOND","CSS_BLUE","CSS_BLUE_VIOLET","CSS_BROWN","CSS_BURLY_WOOD","CSS_CADET_BLUE","CSS_CHARTREUSE","CSS_CHOCOLATE","CSS_CORAL","CSS_CORNFLOWER_BLUE","CSS_CORNSILK","CSS_CRIMSON","CSS_CYAN","CSS_DARK_BLUE","CSS_DARK_CYAN","CSS_DARK_GOLDENROD","CSS_DARK_GRAY","CSS_DARK_GREEN","CSS_DARK_KHAKI","CSS_DARK_MAGENTA","CSS_DARK_OLIVE_GREEN","CSS_DARK_ORANGE","CSS_DARK_ORCHID","CSS_DARK_RED","CSS_DARK_SALMON","CSS_DARK_SEA_GREEN","CSS_DARK_SLATE_BLUE","CSS_DARK_SLATE_GRAY","CSS_DARK_TURQUOISE","CSS_DARK_VIOLET","CSS_DEEP_PINK","CSS_DEEP_SKY_BLUE","CSS_DIM_GRAY","CSS_DODGER_BLUE","CSS_FIRE_BRICK","CSS_FLORAL_WHITE","CSS_FOREST_GREEN","CSS_FUCHSIA","CSS_GAINSBORO","CSS_GHOST_WHITE","CSS_GOLD","CSS_GOLDENROD","CSS_GRAY","CSS_GREEN","CSS_GREEN_YELLOW","CSS_HONEYDEW","CSS_HOT_PINK","CSS_INDIAN_RED","CSS_INDIGO","CSS_IVORY","CSS_KHAKI","CSS_LAVENDER","CSS_LAVENDER_BLUSH","CSS_LAWN_GREEN","CSS_LEMON_CHIFFON","CSS_LIGHT_BLUE","CSS_LIGHT_CORAL","CSS_LIGHT_CYAN","CSS_LIGHT_GOLDENROD_YELLOW","CSS_LIGHT_GRAY","CSS_LIGHT_GREEN","CSS_LIGHT_PINK","CSS_LIGHT_SALMON","CSS_LIGHT_SEA_GREEN","CSS_LIGHT_SKY_BLUE","CSS_LIGHT_SLATE_GRAY","CSS_LIGHT_STEEL_BLUE","CSS_LIGHT_YELLOW","CSS_LIME","CSS_LIME_GREEN","CSS_LINEN","CSS_MAGENTA","CSS_MAROON","CSS_MEDIUM_AQUAMARINE","CSS_MEDIUM_BLUE","CSS_MEDIUM_ORCHID","CSS_MEDIUM_PURPLE","CSS_MEDIUM_SEA_GREEN","CSS_MEDIUM_SLATE_BLUE","CSS_MEDIUM_SPRING_GREEN","CSS_MEDIUM_TURQUOISE","CSS_MEDIUM_VIOLET_RED","CSS_MIDNIGHT_BLUE","CSS_MINT_CREAM","CSS_MISTY_ROSE","CSS_MOCCASIN","CSS_NAVAJO_WHITE","CSS_NAVY","CSS_OLD_LACE","CSS_OLIVE","CSS_OLIVE_DRAB","CSS_ORANGE","CSS_ORANGE_RED","CSS_ORCHID","CSS_PALE_GOLDENROD","CSS_PALE_GREEN","CSS_PALE_TURQUOISE","CSS_PALE_VIOLET_RED","CSS_PAPAYA_WHIP","CSS_PEACH_PUFF","CSS_PERU","CSS_PINK","CSS_PLUM","CSS_POWDER_BLUE","CSS_PURPLE","CSS_REBECCAPURPLE","CSS_RED","CSS_ROSY_BROWN","CSS_ROYAL_BLUE","CSS_SADDLE_BROWN","CSS_SALMON","CSS_SANDY_BROWN","CSS_SEASHELL","CSS_SEA_GREEN","CSS_SIENNA","CSS_SILVER","CSS_SKY_BLUE","CSS_SLATE_BLUE","CSS_SLATE_GRAY","CSS_SNOW","CSS_SPRING_GREEN","CSS_STEEL_BLUE","CSS_TAN","CSS_TEAL","CSS_THISTLE","CSS_TOMATO","CSS_TURQUOISE","CSS_VIOLET","CSS_WHEAT","CSS_WHITE","CSS_WHITE_SMOKE","CSS_YELLOW","CSS_YELLOW_GREEN","CYAN","GREEN","Gray2","Gray4","Gray8","GrayColor","IntoStorage","MAGENTA","MAX_B","MAX_G","MAX_R","Off","On","PixelColor","RED","Raw","Rgb555","Rgb565","Rgb666","Rgb888","RgbColor","Storage","WHITE","WHITE","WebColors","YELLOW","az","az","az","az","az","az","az","az","az","az","az","az","b","b","b","b","b","b","b","b","b","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","char_to_color","char_to_color","char_to_color","char_to_color","char_to_color","char_to_color","char_to_color","char_to_color","char_to_color","char_to_color","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","color_to_char","color_to_char","color_to_char","color_to_char","color_to_char","color_to_char","color_to_char","color_to_char","color_to_char","color_to_char","default","default","default","default","default","default","default","default","default","default","default","default","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","g","g","g","g","g","g","g","g","g","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","into","into","into","into","into","into","into","into","into","into","into","into","into_storage","into_storage","into_storage","into_storage","into_storage","into_storage","into_storage","into_storage","into_storage","into_storage","into_storage","into_storage","into_storage","invert","is_off","is_on","luma","luma","luma","luma","new","new","new","new","new","new","new","new","new","new","new","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","r","r","r","r","r","r","r","r","r","raw","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","BITS_PER_PIXEL","BigEndian","ByteOrder","Bytes","LittleEndian","RawData","RawU1","RawU16","RawU2","RawU24","RawU32","RawU4","RawU8","Storage","ToBytes","az","az","az","az","az","az","az","az","az","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone","clone","clone","clone","clone","clone","clone","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","default","default","default","default","default","default","default","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","hash","hash","hash","hash","hash","hash","hash","hash","hash","into","into","into","into","into","into","into","into","into","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","new","new","new","new","new","new","new","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","Angle","AngleUnit","ContainsPoint","ContiguousIteratorExt","Dimensions","DrawTarget","DrawTargetExt","Drawable","GrayColor","ImageDrawable","ImageDrawableExt","IntoStorage","OffsetOutline","OriginDimensions","Pixel","PixelColor","PixelIteratorExt","Point","PointsIter","Primitive","RawData","RgbColor","Size","Transform","WebColors","_","Arc","Center","Circle","Color","ContainsPoint","CornerRadii","CornerRadiiBuilder","Ellipse","Inside","Iter","Line","OffsetOutline","Output","Outside","PointsIter","Polyline","Primitive","PrimitiveStyle","PrimitiveStyleBuilder","Rectangle","RoundedRectangle","Sector","StrokeAlignment","Styled","StyledDimensions","StyledDrawable","Triangle","arc","az","az","az","az","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounding_box","build","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","circle","clone","clone","clone","clone","cmp","cmp","cmp","cmp","contains","default","default","default","default","draw","draw_styled","ellipse","eq","eq","eq","eq","fill_area","fill_color","fill_color","fmt","fmt","fmt","fmt","from","from","from","from","from","hash","hash","hash","hash","into","into","into","into","into_styled","is_transparent","line","new","new","new","offset","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","partial_cmp","partial_cmp","partial_cmp","partial_cmp","pixels","points","polyline","primitive","rectangle","reset_fill_color","reset_stroke_color","rounded_rectangle","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","sector","stroke_alignment","stroke_alignment","stroke_area","stroke_color","stroke_color","stroke_width","stroke_width","style","styled_bounding_box","translate","translate_mut","triangle","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","with_fill","with_stroke","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","Arc","Points","StyledPixelsIterator","angle_start","angle_sweep","az","az","az","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","bounding_box","cast_from","cast_from","cast_from","center","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone","diameter","draw","draw_styled","eq","eq","eq","fmt","fmt","fmt","from","from","from","from_circle","into","into","into","into_iter","into_iter","new","next","next","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","partial_cmp","points","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","styled_bounding_box","to_circle","top_left","translate","translate_mut","translated","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","with_center","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","Circle","Points","StyledPixelsIterator","az","az","az","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","bounding_box","cast_from","cast_from","cast_from","center","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone","cmp","contains","default","diameter","draw","draw_styled","eq","eq","eq","fmt","fmt","fmt","from","from","from","hash","hash","hash","into","into","into","into_iter","into_iter","new","next","next","offset","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","partial_cmp","points","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","styled_bounding_box","top_left","translate","translate_mut","translated","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","with_center","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","Ellipse","Points","StyledPixelsIterator","az","az","az","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","bounding_box","cast_from","cast_from","cast_from","center","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone","cmp","contains","default","draw","draw_styled","eq","eq","eq","fmt","fmt","fmt","from","from","from","hash","hash","hash","into","into","into","into_iter","into_iter","new","next","next","offset","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","partial_cmp","points","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","size","styled_bounding_box","top_left","translate","translate_mut","translated","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","with_center","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","Line","Points","StyledPixelsIterator","az","az","az","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","bounding_box","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone","cmp","cmp","default","delta","draw","draw_styled","end","eq","eq","fmt","fmt","fmt","from","from","from","hash","hash","into","into","into","into_iter","into_iter","midpoint","new","next","next","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","partial_cmp","partial_cmp","points","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","start","styled_bounding_box","translate","translate_mut","translated","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","with_delta","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","Points","Polyline","StyledPixelsIterator","az","az","az","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","bounding_box","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone","cmp","cmp","default","draw","draw_styled","eq","eq","fmt","fmt","fmt","from","from","from","hash","hash","into","into","into","into_iter","into_iter","new","next","next","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","partial_cmp","partial_cmp","points","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","styled_bounding_box","translate","translate","translate_mut","translated","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","vertices","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","Points","Rectangle","StyledPixelsIterator","anchor_point","anchor_x","anchor_y","az","az","az","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","bottom_right","bounding_box","cast_from","cast_from","cast_from","center","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone","cmp","columns","contains","contains","default","draw","draw_styled","empty","eq","eq","eq","fmt","fmt","fmt","from","from","from","hash","hash","hash","intersection","into","into","into","into_iter","into_iter","is_zero_sized","new","next","next","offset","offset","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","partial_cmp","points","resized","resized_height","resized_width","rows","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","size","styled_bounding_box","top_left","translate","translate_mut","translated","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","with_center","with_corners","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","zero","CornerRadii","CornerRadiiBuilder","Points","RoundedRectangle","StyledPixelsIterator","all","az","az","az","az","az","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bottom","bottom_left","bottom_left","bottom_right","bottom_right","bounding_box","build","cast_from","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone","clone","clone","cmp","cmp","cmp","confine_radii","contains","corners","default","default","draw","draw_styled","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","hash","hash","hash","hash","hash","into","into","into","into","into","into_iter","into_iter","left","new","new","new","next","next","offset","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","partial_cmp","partial_cmp","partial_cmp","points","rectangle","right","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","styled_bounding_box","top","top_left","top_left","top_right","top_right","translate","translate_mut","translated","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","with_equal_corners","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","Points","Sector","StyledPixelsIterator","angle_start","angle_sweep","az","az","az","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","bounding_box","cast_from","cast_from","cast_from","center","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone","contains","diameter","draw","draw_styled","eq","eq","eq","fmt","fmt","fmt","from","from","from","from_circle","into","into","into","into_iter","into_iter","new","next","next","offset","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","partial_cmp","points","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","styled_bounding_box","to_circle","top_left","translate","translate_mut","translated","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","with_center","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","Points","StyledPixelsIterator","Triangle","az","az","az","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","bounding_box","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone","cmp","contains","default","draw","draw_styled","eq","eq","eq","fmt","fmt","fmt","from","from","from","from_slice","hash","hash","hash","into","into","into","into_iter","into_iter","new","next","next","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","partial_cmp","points","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","styled_bounding_box","translate","translate_mut","translated","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","vertices","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","Alignment","Alphabetic","Baseline","Bottom","Center","Custom","DecorationColor","Left","LineHeight","Middle","None","Percent","Pixels","Right","Text","TextColor","TextStyle","TextStyleBuilder","Top","alignment","alignment","az","az","az","az","az","az","az","baseline","baseline","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounding_box","build","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","character_style","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone","clone","clone","clone","clone","cmp","cmp","cmp","cmp","cmp","cmp","default","default","draw","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","hash","hash","hash","hash","hash","hash","into","into","into","into","into","into","into","is_custom","is_none","is_text_color","line_height","line_height","new","new","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","position","renderer","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","text","text_style","to_absolute","translate","translate_mut","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","with_alignment","with_alignment","with_baseline","with_baseline","with_text_style","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","CharacterStyle","Color","Color","TextMetrics","TextRenderer","az","borrow","borrow_mut","bounding_box","cast_from","checked_as","checked_cast_from","clone","cmp","draw_string","draw_whitespace","eq","fmt","from","hash","into","line_height","measure_string","next_position","overflowing_as","overflowing_cast_from","partial_cmp","saturating_as","saturating_cast_from","set_background_color","set_background_color","set_strikethrough_color","set_strikethrough_color","set_text_color","set_text_color","set_underline_color","set_underline_color","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","wrapping_as","wrapping_cast_from","Transform","translate","translate_mut"],"q":[[0,"embedded_graphics"],[45,"embedded_graphics::draw_target"],[176,"embedded_graphics::framebuffer"],[235,"embedded_graphics::geometry"],[487,"embedded_graphics::image"],[583,"embedded_graphics::iterator"],[591,"embedded_graphics::iterator::contiguous"],[616,"embedded_graphics::iterator::pixel"],[642,"embedded_graphics::iterator::raw"],[779,"embedded_graphics::mock_display"],[832,"embedded_graphics::mono_font"],[983,"embedded_graphics::mono_font::ascii"],[1005,"embedded_graphics::mono_font::iso_8859_1"],[1027,"embedded_graphics::mono_font::iso_8859_10"],[1049,"embedded_graphics::mono_font::iso_8859_13"],[1071,"embedded_graphics::mono_font::iso_8859_14"],[1093,"embedded_graphics::mono_font::iso_8859_15"],[1115,"embedded_graphics::mono_font::iso_8859_16"],[1137,"embedded_graphics::mono_font::iso_8859_2"],[1159,"embedded_graphics::mono_font::iso_8859_3"],[1181,"embedded_graphics::mono_font::iso_8859_4"],[1203,"embedded_graphics::mono_font::iso_8859_5"],[1225,"embedded_graphics::mono_font::iso_8859_7"],[1247,"embedded_graphics::mono_font::iso_8859_9"],[1269,"embedded_graphics::mono_font::jis_x0201"],[1275,"embedded_graphics::mono_font::mapping"],[1365,"embedded_graphics::pixelcolor"],[2112,"embedded_graphics::pixelcolor::raw"],[2425,"embedded_graphics::prelude"],[2451,"embedded_graphics::primitives"],[2624,"embedded_graphics::primitives::arc"],[2715,"embedded_graphics::primitives::circle"],[2809,"embedded_graphics::primitives::ellipse"],[2903,"embedded_graphics::primitives::line"],[2996,"embedded_graphics::primitives::polyline"],[3086,"embedded_graphics::primitives::rectangle"],[3196,"embedded_graphics::primitives::rounded_rectangle"],[3360,"embedded_graphics::primitives::sector"],[3453,"embedded_graphics::primitives::triangle"],[3544,"embedded_graphics::text"],[3766,"embedded_graphics::text::renderer"],[3810,"embedded_graphics::transform"]],"d":["The pixel color type.","Marks an object as “drawable”. Must be implemented for …","The return type of the <code>draw</code> method.","A single pixel.","","","","","","","","","","Draw the graphics object using the supplied DrawTarget.","","A target for embedded-graphics drawing operations.","","Drawing examples","","Framebuffer.","Returns the argument unchanged.","Geometry module.","","Image support for embedded-graphics","Calls <code>U::from(self)</code>.","Iterators.","Mock display for use in tests.","Monospaced bitmap fonts.","","","","Pixel color types.","Prelude","Graphics primitives","","","Text drawing.","Transformations for graphics objects","","","","","","","","Clipped draw target.","The pixel color type the targetted display supports.","Color conversion draw target.","Cropped draw target.","A target for embedded-graphics drawing operations.","Extension trait for <code>DrawTarget</code>s.","Error type to return when a drawing operation fails.","Translated draw target.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Fill the entire display with a solid color.","","","Creates a clipped draw target based on this draw target.","","","","","Creates a color conversion draw target.","","","","","Creates a cropped draw target based on this draw target.","","","","","Draw individual pixels to the display without a defined …","","","","","Fill a given area with an iterator providing a contiguous …","","","","","Fill a given area with a solid color.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Creates a translated draw target based on this draw target.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A framebuffer.","Returns an image based on the framebuffer content.","","","","","Calculates the required buffer size.","Calculates the required buffer size.","","","","","","","","","Returns a reference to the raw framebuffer data.","Returns a mutable reference to the raw framebuffer data.","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Creates a new framebuffer.","","","","","","","Sets the color of a pixel.","Sets the color of a pixel.","Sets the color of a pixel.","Sets the color of a pixel.","Sets the color of a pixel.","Sets the color of a pixel.","Sets the color of a pixel.","Sets the color of a pixel.","Sets the color of a pixel.","Sets the color of a pixel.","","","","","","","","","","Anchor point.","X axis anchor point.","Y axis anchor point.","Angle.","AngleUnit trait.","Bottom.","Bottom center.","Bottom left.","Bottom right.","Center.","Center.","Center.","Center left.","Center right.","Adds the ability to get the bounding box of an item.","Left.","Dimensions with <code>top_left</code> of the bounding box at <code>(0, 0)</code>.","2D point.","Right.","2D size.","Top.","Top center.","Top left.","Top right.","Remove the sign from a coordinate","Compute the absolute value of the angle.","Offsets a point by adding a size.","","","","","Offsets a point by adding a size.","","","","","","","","","","","","","","","","","","","","","Returns the bounding box.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the componentwise division of two <code>Points</code>s.","Returns the componentwise division of two <code>Size</code>s.","Returns the componentwise maximum of two <code>Point</code>s","Returns the componentwise maximum of two <code>Size</code>s.","Returns the componentwise minimum of two <code>Point</code>s","Returns the componentwise minimum of two <code>Size</code>s.","Returns the componentwise multiplication of two <code>Point</code>s.","Returns the componentwise multiplication of two <code>Size</code>s.","","","Convert a number (interpreted as degrees) to an <code>Angle</code>.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates an angle defined in degrees.","Creates an angle defined in radians.","Creates an anchor point from an X and Y component.","","","","","","The height.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Creates a point from  X and Y coordinates.","Creates a size from a width and a height.","Creates a point with X and Y values set to an equal value.","Creates a size with width and height set to an equal value.","Normalize the angle to less than one full rotation (ie. in …","","","","","","","","","","","","","","","","","","","Convert a number (interpreted as radians) to an <code>Angle</code>.","Saturating addition.","","","","","","","","","","","","","Saturating subtraction.","Returns the size of the bounding box.","Offsets a point by subtracting a size.","","","","","Offsets a point by subtracting a size.","","","Return numerical value of the angle in degree","Return numerical value of the angle in radian","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The width.","","","","","","","","","","","","","Returns the X axis component.","The x coordinate.","Returns a point with equal <code>x</code> value and <code>y</code> set to <code>0</code>.","Returns a size with equal <code>width</code> value and <code>height</code> set to <code>0</code>.","Returns the Y axis component.","The y coordinate.","Returns a point with equal <code>y</code> value and <code>x</code> set to <code>0</code>.","Returns a size with equal <code>height</code> value and <code>width</code> set to <code>0</code>.","Creates a point with X and Y equal to zero.","Creates a size with width and height equal to zero.","Creates a zero degree angle.","The color type.","The color type.","Pixel getter.","Image object.","Image drawable.","Extension trait for image drawables.","An image constructed from a slice of raw pixel data.","Image with big endian data.","Image with little endian data.","Sub image.","","","","","","","","","","","","","","","","","","","","","","","","","Draws the entire image to the target.","","","","Draws a part of the image to the target.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new image.","Creates a new <code>Image</code>.","","","","","","","","Gets the color of a pixel.","","","","","","","","","","Returns a sub image of this image drawable.","Translate the image by a given delta, returning a new image","Translate the image by a given delta, modifying the …","","","","","","","","","","","","","","","","Creates a new <code>Image</code> centered around a given point.","","","","","","","Extension trait for contiguous iterators.","Extension trait for pixel iterators.","Contiguous iterator.","Draws the pixel iterator to a draw target.","Converts a contiguous iterator into a pixel iterator.","Pixel iterator.","Raw data iterator.","Returns a translated version of the iterator.","Converts a contiguous iterator into a pixel iterator.","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Translated pixel iterator.","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Iterator for raw data slices with less than 8 BPP.","Iterator for raw data slices with 8 BPP.","Iterator for raw data slices more than 8 BPP.","Raw data slice.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Creates a new raw data slice.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Mapping between <code>char</code>s and colors.","Mock display struct","Color used to display <code>None</code> values when <code>EG_FANCY_PANIC</code> is …","Color used to display <code>None</code> values when <code>EG_FANCY_PANIC</code> is …","Returns the area that was affected by drawing operations.","Checks if the displays are equal.","Checks if the displays are equal.","Checks if the display is equal to the given pattern.","Checks if the display is equal to the given pattern.","","","","","","Converts a char into a color of type <code>C</code>.","","","","","","Converts a color of type <code>C</code> into a char.","","","Compares the display to another display.","","Changes the color of a pixel.","","","Returns the argument unchanged.","Creates a new mock display from a character pattern.","Create a mock display from an iterator of <code>Point</code>s.","Returns the color of a pixel.","Calls <code>U::from(self)</code>.","Maps a <code>MockDisplay&lt;C&gt;&#39; to a </code>MockDisplay` by applying a …","Creates a new empty mock display.","","","","","Sets if out of bounds drawing is allowed.","Sets if overdrawing is allowed.","Changes the value of a pixel without bounds checking.","Sets the points in an iterator to the given color.","","Returns a copy of with the content mirrored by swapping x …","","","","","","","","","Decoration dimensions.","Monospaced bitmap font.","Style properties for text using a monospaced font.","Text style builder for monospaced fonts.","ASCII glyph subset.","","","","","Sets the background color.","Background color.","The baseline.","","","","","","","","","Builds the text style.","","","","","Size of a single character in pixel.","Spacing between characters.","","","","","","","","","","","","","","","Creates a new default strikethrough decoration for the …","Creates a new default underline decoration for the given …","","","","","","","","","","Sets the font.","Font.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Glyph mapping.","","Height of the decoration.","Raw image data containing the font.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if the style is transparent.","ISO_8859_1 glyph subset.","ISO_8859_10 glyph subset.","ISO_8859_13 glyph subset.","ISO_8859_14 glyph subset.","ISO_8859_15 glyph subset.","ISO_8859_16 glyph subset.","ISO_8859_2 glyph subset.","ISO_8859_3 glyph subset.","ISO_8859_4 glyph subset.","ISO_8859_5 glyph subset.","ISO_8859_7 glyph subset.","ISO_8859_9 glyph subset.","JIS_X0201 glyph subset.","","Glyph mapping.","","Creates a text style with transparent background.","Creates a new text style builder.","Creates new decoration dimensions.","Offset from the top of the character to the top of the …","","","","","","","","","","Resets the background color to transparent.","Removes the strikethrough decoration.","Resets the text color to transparent.","Removes the underline decoration.","","","","","","","","","","","","","Enables strikethrough using the text color.","Strikethrough decoration dimensions.","Strikethrough color.","Enables strikethrough with a custom color.","Sets the text color.","Text color.","","","","","","","","","","","","","Enables underline using the text color.","Underline decoration dimensions.","Underline color.","Enables underline with a custom color.","","","","","","","","","","","","","","","","","10x20 pixel monospace font.","4x6 pixel monospace font.","5x7 pixel monospace font.","5x8 pixel monospace font.","6x10 pixel monospace font.","6x12 pixel monospace font.","6x13 pixel monospace font.","6x13 pixel monospace font.","6x13 pixel monospace font.","6x9 pixel monospace font.","7x13 pixel monospace font.","7x13 pixel monospace font.","7x13 pixel monospace font.","7x14 pixel monospace font.","7x14 pixel monospace font.","8x13 pixel monospace font.","8x13 pixel monospace font.","8x13 pixel monospace font.","9x15 pixel monospace font.","9x15 pixel monospace font.","9x18 pixel monospace font.","9x18 pixel monospace font.","10x20 pixel monospace font.","4x6 pixel monospace font.","5x7 pixel monospace font.","5x8 pixel monospace font.","6x10 pixel monospace font.","6x12 pixel monospace font.","6x13 pixel monospace font.","6x13 pixel monospace font.","6x13 pixel monospace font.","6x9 pixel monospace font.","7x13 pixel monospace font.","7x13 pixel monospace font.","7x13 pixel monospace font.","7x14 pixel monospace font.","7x14 pixel monospace font.","8x13 pixel monospace font.","8x13 pixel monospace font.","8x13 pixel monospace font.","9x15 pixel monospace font.","9x15 pixel monospace font.","9x18 pixel monospace font.","9x18 pixel monospace font.","10x20 pixel monospace font.","4x6 pixel monospace font.","5x7 pixel monospace font.","5x8 pixel monospace font.","6x10 pixel monospace font.","6x12 pixel monospace font.","6x13 pixel monospace font.","6x13 pixel monospace font.","6x13 pixel monospace font.","6x9 pixel monospace font.","7x13 pixel monospace font.","7x13 pixel monospace font.","7x13 pixel monospace font.","7x14 pixel monospace font.","7x14 pixel monospace font.","8x13 pixel monospace font.","8x13 pixel monospace font.","8x13 pixel monospace font.","9x15 pixel monospace font.","9x15 pixel monospace font.","9x18 pixel monospace font.","9x18 pixel monospace font.","10x20 pixel monospace font.","4x6 pixel monospace font.","5x7 pixel monospace font.","5x8 pixel monospace font.","6x10 pixel monospace font.","6x12 pixel monospace font.","6x13 pixel monospace font.","6x13 pixel monospace font.","6x13 pixel monospace font.","6x9 pixel monospace font.","7x13 pixel monospace font.","7x13 pixel monospace font.","7x13 pixel monospace font.","7x14 pixel monospace font.","7x14 pixel monospace font.","8x13 pixel monospace font.","8x13 pixel monospace font.","8x13 pixel monospace font.","9x15 pixel monospace font.","9x15 pixel monospace font.","9x18 pixel monospace font.","9x18 pixel monospace font.","10x20 pixel monospace font.","4x6 pixel monospace font.","5x7 pixel monospace font.","5x8 pixel monospace font.","6x10 pixel monospace font.","6x12 pixel monospace font.","6x13 pixel monospace font.","6x13 pixel monospace font.","6x13 pixel monospace font.","6x9 pixel monospace font.","7x13 pixel monospace font.","7x13 pixel monospace font.","7x13 pixel monospace font.","7x14 pixel monospace font.","7x14 pixel monospace font.","8x13 pixel monospace font.","8x13 pixel monospace font.","8x13 pixel monospace font.","9x15 pixel monospace font.","9x15 pixel monospace font.","9x18 pixel monospace font.","9x18 pixel monospace font.","10x20 pixel monospace font.","4x6 pixel monospace font.","5x7 pixel monospace font.","5x8 pixel monospace font.","6x10 pixel monospace font.","6x12 pixel monospace font.","6x13 pixel monospace font.","6x13 pixel monospace font.","6x13 pixel monospace font.","6x9 pixel monospace font.","7x13 pixel monospace font.","7x13 pixel monospace font.","7x13 pixel monospace font.","7x14 pixel monospace font.","7x14 pixel monospace font.","8x13 pixel monospace font.","8x13 pixel monospace font.","8x13 pixel monospace font.","9x15 pixel monospace font.","9x15 pixel monospace font.","9x18 pixel monospace font.","9x18 pixel monospace font.","10x20 pixel monospace font.","4x6 pixel monospace font.","5x7 pixel monospace font.","5x8 pixel monospace font.","6x10 pixel monospace font.","6x12 pixel monospace font.","6x13 pixel monospace font.","6x13 pixel monospace font.","6x13 pixel monospace font.","6x9 pixel monospace font.","7x13 pixel monospace font.","7x13 pixel monospace font.","7x13 pixel monospace font.","7x14 pixel monospace font.","7x14 pixel monospace font.","8x13 pixel monospace font.","8x13 pixel monospace font.","8x13 pixel monospace font.","9x15 pixel monospace font.","9x15 pixel monospace font.","9x18 pixel monospace font.","9x18 pixel monospace font.","10x20 pixel monospace font.","4x6 pixel monospace font.","5x7 pixel monospace font.","5x8 pixel monospace font.","6x10 pixel monospace font.","6x12 pixel monospace font.","6x13 pixel monospace font.","6x13 pixel monospace font.","6x13 pixel monospace font.","6x9 pixel monospace font.","7x13 pixel monospace font.","7x13 pixel monospace font.","7x13 pixel monospace font.","7x14 pixel monospace font.","7x14 pixel monospace font.","8x13 pixel monospace font.","8x13 pixel monospace font.","8x13 pixel monospace font.","9x15 pixel monospace font.","9x15 pixel monospace font.","9x18 pixel monospace font.","9x18 pixel monospace font.","10x20 pixel monospace font.","4x6 pixel monospace font.","5x7 pixel monospace font.","5x8 pixel monospace font.","6x10 pixel monospace font.","6x12 pixel monospace font.","6x13 pixel monospace font.","6x13 pixel monospace font.","6x13 pixel monospace font.","6x9 pixel monospace font.","7x13 pixel monospace font.","7x13 pixel monospace font.","7x13 pixel monospace font.","7x14 pixel monospace font.","7x14 pixel monospace font.","8x13 pixel monospace font.","8x13 pixel monospace font.","8x13 pixel monospace font.","9x15 pixel monospace font.","9x15 pixel monospace font.","9x18 pixel monospace font.","9x18 pixel monospace font.","10x20 pixel monospace font.","4x6 pixel monospace font.","5x7 pixel monospace font.","5x8 pixel monospace font.","6x10 pixel monospace font.","6x12 pixel monospace font.","6x13 pixel monospace font.","6x13 pixel monospace font.","6x13 pixel monospace font.","6x9 pixel monospace font.","7x13 pixel monospace font.","7x13 pixel monospace font.","7x13 pixel monospace font.","7x14 pixel monospace font.","7x14 pixel monospace font.","8x13 pixel monospace font.","8x13 pixel monospace font.","8x13 pixel monospace font.","9x15 pixel monospace font.","9x15 pixel monospace font.","9x18 pixel monospace font.","9x18 pixel monospace font.","10x20 pixel monospace font.","4x6 pixel monospace font.","5x7 pixel monospace font.","5x8 pixel monospace font.","6x10 pixel monospace font.","6x12 pixel monospace font.","6x13 pixel monospace font.","6x13 pixel monospace font.","6x13 pixel monospace font.","6x9 pixel monospace font.","7x13 pixel monospace font.","7x13 pixel monospace font.","7x13 pixel monospace font.","7x14 pixel monospace font.","7x14 pixel monospace font.","8x13 pixel monospace font.","8x13 pixel monospace font.","8x13 pixel monospace font.","9x15 pixel monospace font.","9x15 pixel monospace font.","9x18 pixel monospace font.","9x18 pixel monospace font.","10x20 pixel monospace font.","4x6 pixel monospace font.","5x7 pixel monospace font.","5x8 pixel monospace font.","6x10 pixel monospace font.","6x12 pixel monospace font.","6x13 pixel monospace font.","6x13 pixel monospace font.","6x13 pixel monospace font.","6x9 pixel monospace font.","7x13 pixel monospace font.","7x13 pixel monospace font.","7x13 pixel monospace font.","7x14 pixel monospace font.","7x14 pixel monospace font.","8x13 pixel monospace font.","8x13 pixel monospace font.","8x13 pixel monospace font.","9x15 pixel monospace font.","9x15 pixel monospace font.","9x18 pixel monospace font.","9x18 pixel monospace font.","10x20 pixel monospace font.","4x6 pixel monospace font.","5x7 pixel monospace font.","5x8 pixel monospace font.","6x10 pixel monospace font.","6x12 pixel monospace font.","6x13 pixel monospace font.","6x13 pixel monospace font.","6x13 pixel monospace font.","6x9 pixel monospace font.","7x13 pixel monospace font.","7x13 pixel monospace font.","7x13 pixel monospace font.","7x14 pixel monospace font.","7x14 pixel monospace font.","8x13 pixel monospace font.","8x13 pixel monospace font.","8x13 pixel monospace font.","9x15 pixel monospace font.","9x15 pixel monospace font.","9x18 pixel monospace font.","9x18 pixel monospace font.","10x20 pixel monospace font.","6x13 pixel monospace font.","7x14 pixel monospace font.","8x13 pixel monospace font.","9x15 pixel monospace font.","9x18 pixel monospace font.","ASCII.","ASCII.","Mapping from characters to glyph indices.","ISO/IEC 8859 Part 1: Latin-1, Western European.","ISO/IEC 8859 Part 10: Latin-6, Nordic.","ISO/IEC 8859 Part 13: Latin-7, Baltic Rim.","ISO/IEC 8859 Part 14: Latin-8, Celtic.","ISO/IEC 8859 Part 15: Latin-9 (revised Latin-1).","ISO/IEC 8859 Part 16: Latin-10: South-East European.","ISO/IEC 8859 Part 2: Latin-2, Central European.","ISO/IEC 8859 Part 3: Latin-3, South European.","ISO/IEC 8859 Part 4: Latin-4, North European.","ISO/IEC 8859 Part 5: Latin/Cyrillic.","ISO/IEC 8859 Part 7: Latin/Greek.","ISO/IEC 8859 Part 9: Latin-5, Turkish.","ISO/IEC 8859 Part 1: Latin-1, Western European.","ISO/IEC 8859 Part 10: Latin-6, Nordic.","ISO/IEC 8859 Part 13: Latin-7, Baltic Rim.","ISO/IEC 8859 Part 14: Latin-8, Celtic.","ISO/IEC 8859 Part 15: Latin-9 (revised Latin-1).","ISO/IEC 8859 Part 16: Latin-10: South-East European.","ISO/IEC 8859 Part 2: Latin-2, Central European.","ISO/IEC 8859 Part 3: Latin-3, South European.","ISO/IEC 8859 Part 4: Latin-4, North European.","ISO/IEC 8859 Part 5: Latin/Cyrillic.","ISO/IEC 8859 Part 7: Latin/Greek.","ISO/IEC 8859 Part 9: Latin-5, Turkish.","JIS X 0201: Japanese katakana (halfwidth).","JIS X 0201: Japanese katakana (halfwidth).","Mapping.","Glyph mapping stored as a UTF-8 string.","","","","","","","","","Returns an iterator over the characters in this mapping.","","","","","","","","","Returns if the mapping contains the given char.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns a glyph mapping for this mapping.","","","Maps a character to a glyph index.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns an iterator over all mappings.","Returns the MIME identifier for this mapping.","Creates a new glyph mapping.","","","","","","","Returns an iterator over the character ranges.","","","","","","","","","","","","","","","","","","","Black color (0% luma).","Black color (R: 0%, G: 0%, B: 0%)","Blue color (R: 0%, G: 0%, B: 100%)","Bgr555 color.","Bgr565 color.","Bgr666 color.","Bgr888 color.","Binary color."," Alice Blue"," Antique White"," Aqua"," Aquamarine"," Azure"," Beige"," Bisque"," Black"," Blanched Almond"," Blue"," Blue Violet"," Brown"," Burly Wood"," Cadet Blue"," Chartreuse"," Chocolate"," Coral"," Cornflower Blue"," Cornsilk"," Crimson"," Cyan"," Dark Blue"," Dark Cyan"," Dark Goldenrod"," Dark Gray"," Dark Green"," Dark Khaki"," Dark Magenta"," Dark Olive Green"," Dark Orange"," Dark Orchid"," Dark Red"," Dark Salmon"," Dark Sea Green"," Dark Slate Blue"," Dark Slate Gray"," Dark Turquoise"," Dark Violet"," Deep Pink"," Deep Sky Blue"," Dim Gray"," Dodger Blue"," Fire Brick"," Floral White"," Forest Green"," Fuchsia"," Gainsboro"," Ghost White"," Gold"," Goldenrod"," Gray"," Green"," Green Yellow"," Honeydew"," Hot Pink"," Indian Red"," Indigo"," Ivory"," Khaki"," Lavender"," Lavender Blush"," Lawn Green"," Lemon Chiffon"," Light Blue"," Light Coral"," Light Cyan"," Light Goldenrod Yellow"," Light Gray"," Light Green"," Light Pink"," Light Salmon"," Light Sea Green"," Light Sky Blue"," Light Slate Gray"," Light Steel Blue"," Light Yellow"," Lime"," Lime Green"," Linen"," Magenta"," Maroon"," Medium Aquamarine"," Medium Blue"," Medium Orchid"," Medium Purple"," Medium Sea Green"," Medium Slate Blue"," Medium Spring Green"," Medium Turquoise"," Medium Violet Red"," Midnight Blue"," Mint Cream"," Misty Rose"," Moccasin"," Navajo White"," Navy"," Old Lace"," Olive"," Olive Drab"," Orange"," Orange Red"," Orchid"," Pale Goldenrod"," Pale Green"," Pale Turquoise"," Pale Violet Red"," Papaya Whip"," Peach Puff"," Peru"," Pink"," Plum"," Powder Blue"," Purple"," Rebeccapurple"," Red"," Rosy Brown"," Royal Blue"," Saddle Brown"," Salmon"," Sandy Brown"," Seashell"," Sea Green"," Sienna"," Silver"," Sky Blue"," Slate Blue"," Slate Gray"," Snow"," Spring Green"," Steel Blue"," Tan"," Teal"," Thistle"," Tomato"," Turquoise"," Violet"," Wheat"," White"," White Smoke"," Yellow"," Yellow Green","Cyan color (R: 0%, G: 100%, B: 100%)","Green color (R: 0%, G: 100%, B: 0%)","2 bit grayscale color.","4 bit grayscale color.","8 bit grayscale color.","Grayscale color.","Convert a <code>PixelColor</code> into its underlying storage type","Magenta color (R: 100%, G: 0%, B: 100%)","The maximum value in the blue channel.","The maximum value in the green channel.","The maximum value in the red channel.","Inactive pixel.","Active pixel.","Pixel color trait.","Red color (R: 100%, G: 0%, B: 0%)","Raw data type.","Rgb555 color.","Rgb565 color.","Rgb666 color.","Rgb888 color.","RGB color.","The underlying storage type for the pixel color","White color (100% luma).","White color (R: 100%, G: 100%, B: 100%)","Named colors as defined in the CSS specification.","Yellow color (R: 100%, G: 100%, B: 0%)","","","","","","","","","","","","","Returns the blue channel value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the green channel value.","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert the <code>PixelColor</code> into its raw storage form","","","","","","","","","","","","","Inverts the color.","Returns <code>true</code> if this color is <code>Off</code>.","Returns <code>true</code> if this color is <code>On</code>.","Returns the luma channel value.","","","","Creates a new grayscale color.","Creates a new grayscale color.","Creates a new grayscale color.","Creates a new Rgb555 color. Too large channel values will …","Creates a new Bgr555 color. Too large channel values will …","Creates a new Rgb565 color. Too large channel values will …","Creates a new Bgr565 color. Too large channel values will …","Creates a new Rgb666 color. Too large channel values will …","Creates a new Bgr666 color. Too large channel values will …","Creates a new Rgb888 color. Too large channel values will …","Creates a new Bgr888 color. Too large channel values will …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the red channel value.","","","","","","","","","Raw color types.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Bits per pixel.","Big endian byte order marker.","Raw data byte order.","Return type of methods in this trait.","Little endian byte order marker.","Trait implemented by all <code>RawUx</code> types.","1 bit per pixel raw data.","16 bits per pixel raw data.","2 bits per pixel raw data.","24 bits per pixel raw data.","32 bits per pixel raw data.","4 bits per pixel raw data.","8 bits per pixel raw data.","Storage type.","Trait to convert colors into a byte array.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Converts a <code>u32</code> into a <code>RawData</code> type.","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts this raw data into the storage type.","","","","","","","","Creates a new color from the least significant 1 bit of …","Creates a new color from the least significant 2 bits of …","Creates a new color from the least significant 4 bits of …","Creates a new color from the least significant 8 bits of …","Creates a new color from the least significant 16 bits of …","Creates a new color from the least significant 24 bits of …","Creates a new color from the least significant 32 bits of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts a color into a byte array with big endian byte …","","","","","","","","Converts a color into a byte array with little endian byte …","","","","","","","","Converts a color into a byte array with native byte order.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Center.","","Color type.","Trait to check if a point is inside a closed shape.","","","","Inside.","Iterator over all points inside the primitive.","","Offset outline trait.","Output type.","Outside.","Create an iterator over all points in the primitive.","","Primitive trait","Style properties for primitives.","Primitive style builder.","","","","Stroke alignment.","Styled.","Styled dimensions.","Styled drawable.","","The arc primitive","","","","","","","","","","","","","","Builds the primitive style.","","","","","","","","","","","","","The circle primitive","","","","","","","","","Returns <code>true</code> if the given point is inside the shape.","","","","","","Draws the primitive using the given style.","The ellipse primitive","","","","","Returns the fill area.","Sets the fill color.","Fill color of the primitive.","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts this primitive into a <code>Styled</code>.","Returns if a primitive drawn with this style is completely …","The line primitive","Creates a primitive style without fill and stroke.","Creates a new primitive style builder.","Creates a styled.","Offsets the outline of the shape.","","","","","","","","","","","","","Returns an iterator over the pixels in this styled …","Returns an iterator over all points inside the primitive.","The polyline primitive","Primitive.","The rectangle primitive. Also good for drawing squares.","Resets the fill color to transparent.","Resets the stroke color to transparent.","The rounded rectangle primitive.","","","","","","","","","The sector primitive","Sets the stroke alignment.","Stroke alignment.","Returns the stroke area.","Sets the stroke color.","Stroke color of the primitive.","Sets the stroke width.","Stroke width in pixels.","Style.","Returns the bounding box using the given style.","","","The triangle primitive.","","","","","","","","","","","","","","","","","","","","","Creates a fill primitive style.","Creates a stroke primitive style.","","","","","","","","","Arc primitive","Iterator over all points on the arc line.","Pixel iterator for each pixel in the arc border","Angle at which the arc starts","Angle defining the arc sweep starting at angle_start","","","","","","","","","","","","","","Return the center point of the arc.","","","","","","","","","","Diameter of the circle supporting the arc","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates an arc based on a circle.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Create a new arc delimited with a top-left point with a …","","","","","","","","","","","","","","","","","","Returns a circle with the same <code>top_left</code> and <code>diameter</code> as …","Top-left point of the bounding-box of the circle …","Translate the arc from its current position to a new …","Translate the arc from its current position to a new …","","","","","","","","","","","","","","","","","Create a new arc centered around a given point with a …","","","","","","","Circle primitive","Iterator over all points inside the circle.","Pixel iterator for each pixel in the circle border","","","","","","","","","","","","","","Return the center point of the circle","","","","","","","","","","","","","Diameter of the circle","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Create a new circle delimited with a top-left point with a …","","","","","","","","","","","","","","","","","","","Top-left point of circle’s bounding box","Translate the circle from its current position to a new …","Translate the circle from its current position to a new …","","","","","","","","","","","","","","","","","Create a new circle centered around a given point with a …","","","","","","","Ellipse primitive","Iterator over all points inside the ellipse","Pixel iterator for each pixel in the ellipse border","","","","","","","","","","","","","","Return the center point of the ellipse","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Create a new ellipse delimited with a top-left point with …","","","","","","","","","","","","","","","","","","Size of the ellipse","","Top-left point of ellipse’s bounding box","Translate the ellipse from its current position to a new …","Translate the ellipse from its current position to a new …","","","","","","","","","","","","","","","","","Create a new ellipse centered around a given point with a …","","","","","","","Line primitive","Iterator over all points on the line.","Styled line iterator.","","","","","","","","","","","","","","","","","","","","","","","","","","Compute the delta (<code>end - start</code>) of the line.","","","End point","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Compute the midpoint of the line.","Creates a line between two points.","","","","","","","","","","","","","","","","","","Start point","","Translate the line from its current position to a new …","Translate the line from its current position to a new …","","","","","","","","","","","","","","","","","Creates a line with a start point and a delta vector.","","","","","","","An iterator over all pixel positions on the polyline","Polyline primitive","Pixel iterator for each pixel in the line","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Create a new polyline from a list of vertices","","","","","","","","","","","","","","","","","","","Translate the polyline from its current position to a new …","An offset to apply to the polyline as a whole","Translate the polyline from its current position to a new …","","","","","","","","","","","","","","","","","All vertices in the line","","","","","","","Iterator over all points inside the rectangle.","Rectangle primitive","Pixel iterator for each pixel in the rect border","Returns an anchor point.","Returns the X coordinate of a given anchor edge of the …","Returns the Y coordinate of a given anchor edge of the …","","","","","","","","","","Returns the bottom right corner of this rectangle.","","","","","Returns the center of this rectangle.","","","","","","","","","","","Returns the range of X coordinates in this rectangle.","","Return whether the rectangle contains a given point.","","","","Create a points iterator that returns no items.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns a new <code>Rectangle</code> containing the intersection of <code>self</code>…","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns <code>true</code> is the rectangle is zero sized.","Creates a new rectangle from the top left point and the …","","","","Offset the rectangle by a given value.","","","","","","","","","Returns a resized copy of this rectangle.","Returns a new rectangle with the given height, resized …","Returns a new rectangle with the given width, resized …","Returns the range of Y coordinates in this rectangle.","","","","","","","Size of the rectangle.","","Top left point of the rectangle.","Translate the rect from its current position to a new …","Translate the rect from its current position to a new …","","","","","","","","","","","","","","","","","Creates a new rectangle from the center point and the size.","Creates a new rectangle from two corners.","","","","","","","Returns a zero sized rectangle.","The definition of each corner radius for a rounded …","<code>CornerRadii</code> builder.","Iterator over all points inside the rounded rectangle.","Rounded rectangle primitive.","Pixel iterator for each pixel in the rect border","Set all corner radii to the same value.","","","","","","","","","","","","","","","","Set the bottom left and bottom right corner radii to the …","Set the bottom left corner radius.","Bottom left corner radius","Set the bottom right corner radius.","Bottom right corner radius","","Consume the builder and produce a <code>CornerRadii</code> …","","","","","","","","","","","","","","","","","","","","","","","","Return the rounded rectangle with confined corner radii.","","The radius of each corner","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Set the top left and bottom left corner radii to the same …","Create a new set of corner radii with all corners having …","Create a new corner radii builder.","Creates a new rounded rectangle with the given corner …","","","","","","","","","","","","","","","","","","The base rectangle","Set the top right and bottom right corner radii to the …","","","","","","","","","","","","Set the top left and top right corner radii to the same …","Set the top left corner radius.","Top left corner radius","Set the top right corner radius.","Top right corner radius","Translate the rounded rectangle from its current position …","Translate the rounded rectangle from its current position …","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new rounded rectangle with equal corner radius …","","","","","","","","","","","Iterator over all points inside the sector.","Sector primitive","Pixel iterator for each pixel in the sector border","Angle at which the sector starts","Angle defining the sector sweep starting at angle_start","","","","","","","","","","","","","","Return the center point of the sector","","","","","","","","","","","Diameter of the circle supporting the sector","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates an arc based on a circle.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Create a new sector delimited with a top-left point with a …","","","","","","","","","","","","","","","","","","","Returns a circle with the same <code>top_left</code> and <code>diameter</code> as …","Top-left point of the bounding-box of the circle …","Translate the sector from its current position to a new …","Translate the sector from its current position to a new …","","","","","","","","","","","","","","","","","Create a new sector centered around a given point with a …","","","","","","","Iterator over all points inside the triangle.","Pixel iterator for each pixel in the triangle border","Triangle primitive","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a new triangle from a <code>Point</code> slice.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Create a new triangle with the given vertices.","","","","","","","","","","","","","","","","","","Translate the triangle from its current position to a new …","Translate the triangle from its current position to a new …","","","","","","","","","","","","","","","","","The vertices of the triangle.","","","","","","","Horizontal text alignment.","Alphabetic baseline.","Text baseline.","Bottom.","Center.","Text decoration with a custom color.","Text decoration color.","Left.","Text line height.","Middle.","No text decoration.","Relative line height in percent of the default line height.","Absolute line height in pixels.","Right.","Text drawable.","Text decoration with the same color as the text.","Text style.","Builder for text styles.","Top.","Sets the horizontal text alignment.","Horizontal text alignment.","","","","","","","","Sets the text baseline.","Text baseline.","","","","","","","","","","","","","","","","Builds the text style.","","","","","","","","The character style.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if the decoration_color is <code>Custom</code>.","Returns <code>true</code> if the decoration_color is <code>None</code>.","Returns <code>true</code> if the decoration_color is <code>TextColor</code>.","Sets the line height.","Line height.","Creates a text drawable with the default text style.","Creates a new text style builder.","","","","","","","","","","","","","","","","","","","","","","The position.","Text renderer.","","","","","","","","","","","","","","","The string.","The text style.","Converts the line height to an absolute pixel distance.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a text drawable with the given alignment.","Creates a new text style with the given alignment.","Creates a text drawable with the given baseline.","Creates a new text style with the given baseline.","Creates a text drawable with the given text style.","","","","","","","","","","","","","","","Character style.","The color type.","Color type.","Text metrics.","Text renderer.","","","","Bounding box.","","","","","","Draws a string.","Draws whitespace of the given width.","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Returns the default line height.","Returns the text metrics for a string.","The position of the next text.","","","","","","Sets the background color.","Sets the background color.","Sets the strikethrough color.","Sets the strikethrough color.","Sets the text color.","Sets the text color.","Sets the underline color.","Sets the underline color.","","","","","","","","Transform operations","Move the origin of an object by a given number of (x, y) …","Move the origin of an object by a given number of (x, y) …"],"i":[134,0,134,0,4,4,4,4,4,4,4,4,4,134,4,0,4,0,4,0,4,0,4,0,4,0,0,0,4,4,4,0,0,0,4,4,0,0,4,4,4,4,4,4,4,0,8,0,0,0,0,8,0,19,21,24,22,19,21,24,22,19,21,24,22,19,21,24,22,19,21,24,22,19,21,24,22,19,21,24,22,8,21,22,135,19,21,24,22,135,19,21,24,22,135,19,21,24,22,8,19,21,24,22,8,19,21,24,22,8,19,21,24,22,19,21,24,22,19,21,24,22,19,21,24,22,19,21,24,22,19,21,24,22,19,21,24,22,19,21,24,22,24,135,19,21,24,22,19,21,24,22,19,21,24,22,19,21,24,22,19,21,24,22,19,21,24,22,19,21,24,22,19,21,24,22,0,31,31,31,31,31,0,0,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,0,0,0,0,0,46,44,44,44,44,45,46,44,44,0,45,0,0,45,0,46,44,44,44,28,43,28,28,27,43,28,28,27,43,28,27,44,45,46,43,28,27,44,45,46,43,28,27,44,45,46,43,136,28,27,44,45,46,43,28,27,44,45,46,43,28,27,44,45,46,43,28,27,44,45,46,43,28,27,44,45,46,28,27,28,27,28,27,28,27,28,27,137,28,27,28,27,28,27,44,45,46,43,28,28,27,27,44,45,46,43,28,28,28,28,27,27,27,27,44,45,46,43,43,43,44,28,27,44,45,46,27,28,27,28,27,44,45,46,43,28,27,28,27,28,43,28,27,28,27,43,28,27,44,45,46,43,28,27,44,45,46,43,28,27,44,45,46,43,137,27,28,27,44,45,46,43,28,27,44,45,46,43,27,50,28,28,27,43,28,28,27,43,43,43,28,28,28,28,27,44,45,46,43,28,27,44,45,46,43,28,27,44,45,46,43,28,27,44,45,46,43,28,27,44,45,46,43,27,28,27,44,45,46,43,28,27,44,45,46,43,44,28,28,27,44,28,28,27,28,27,43,52,138,0,0,0,0,0,0,0,0,32,53,51,32,53,51,32,53,51,32,53,51,32,53,51,32,53,51,32,53,51,32,51,32,52,32,53,51,52,32,53,32,32,53,51,32,53,51,32,32,53,51,32,51,32,53,51,32,53,51,32,138,32,32,53,51,32,53,51,32,53,139,51,51,32,53,51,32,53,51,32,53,51,32,53,51,32,53,51,51,32,53,51,32,53,51,0,0,0,140,141,0,0,140,0,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,0,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,0,0,0,0,57,58,59,60,57,58,59,60,57,58,59,60,57,58,59,60,57,58,59,60,57,58,59,60,57,57,58,60,57,57,58,59,60,57,58,59,60,57,57,58,59,60,57,57,57,57,57,57,57,57,57,57,58,59,60,57,58,58,58,59,60,60,60,60,60,60,58,58,58,59,60,60,60,60,60,60,57,58,59,60,57,58,59,60,57,57,58,59,60,57,58,59,60,58,58,58,59,60,60,60,60,60,60,58,60,57,58,59,60,57,58,59,60,57,58,59,60,57,58,59,60,57,58,59,60,57,58,59,60,57,58,59,60,0,0,62,62,61,61,61,61,61,61,61,61,61,61,62,61,61,61,61,61,62,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,0,0,0,0,0,68,67,69,70,67,68,69,68,67,69,70,68,67,69,70,67,68,67,69,70,69,69,68,67,69,70,68,67,69,70,68,67,69,70,70,70,70,70,68,68,68,69,70,68,67,69,70,67,68,68,67,67,69,70,69,70,70,69,68,67,69,70,68,0,0,0,0,0,0,0,0,0,0,0,0,0,68,0,68,68,67,70,70,68,67,69,70,68,67,69,70,70,67,67,67,67,68,67,69,70,68,67,69,70,68,68,68,68,67,69,68,67,67,68,68,67,69,70,68,67,69,70,68,67,69,70,67,69,68,67,68,67,69,70,68,67,69,70,68,67,69,70,68,67,69,70,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,0,0,0,0,0,0,0,0,0,0,0,0,0,76,76,76,76,76,76,76,76,76,76,76,76,0,76,0,0,75,76,75,76,75,76,75,76,75,75,76,75,76,75,76,75,76,75,75,76,75,76,75,76,76,75,76,142,75,75,76,76,76,75,75,76,75,76,75,76,75,75,76,75,76,75,76,75,76,75,76,75,76,75,76,75,76,75,76,143,144,144,0,0,0,0,0,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,144,144,0,0,0,0,0,144,144,144,144,85,85,0,144,3,0,0,0,0,0,146,143,144,0,144,85,86,87,88,78,79,80,81,82,83,65,84,144,78,79,80,81,82,83,65,84,85,86,87,88,78,79,80,81,82,83,65,84,85,86,87,88,78,79,80,81,82,83,65,84,85,86,87,88,78,79,80,81,82,83,65,84,85,86,87,88,78,79,80,81,65,84,85,86,87,88,78,79,80,81,82,83,65,84,85,86,87,88,78,79,80,81,82,83,65,84,85,86,87,88,78,79,80,81,82,83,65,84,85,86,87,88,78,79,80,81,82,83,65,84,85,86,87,88,78,79,80,81,65,84,85,86,87,88,78,79,80,81,82,83,65,84,85,86,87,88,78,79,80,81,82,83,65,84,85,86,87,88,78,79,80,81,82,83,65,84,85,85,85,85,85,85,85,85,85,85,85,85,85,85,86,86,86,86,86,86,86,86,86,86,86,86,86,87,87,87,87,87,87,87,87,87,87,87,87,87,88,88,88,88,88,88,88,88,88,88,88,88,88,78,78,78,78,78,78,78,78,78,78,78,78,78,79,79,79,79,79,79,79,79,79,79,79,79,79,80,80,80,80,80,80,80,80,80,80,80,80,80,81,81,81,81,81,81,81,81,81,81,81,81,81,82,82,82,82,82,82,82,82,82,82,82,82,82,83,83,83,83,83,83,83,83,83,83,83,83,83,65,65,65,65,65,65,65,65,65,65,65,65,65,84,84,84,84,84,84,84,84,84,84,84,84,84,144,78,79,80,81,82,83,65,84,85,86,87,88,78,79,80,81,82,83,65,84,85,86,87,88,78,79,80,81,82,83,65,84,146,85,86,87,88,78,79,80,81,82,83,65,84,85,85,85,143,86,87,88,86,87,88,78,79,80,81,82,83,65,84,85,86,87,88,78,79,80,81,82,83,65,84,85,86,87,88,78,79,80,81,82,83,65,84,85,86,87,88,78,79,80,81,82,83,65,84,144,78,79,80,81,82,83,65,84,0,85,86,87,88,78,79,80,81,82,83,65,84,85,86,87,88,78,79,80,81,82,83,65,84,85,86,87,88,78,79,80,81,82,83,65,84,85,86,87,88,78,79,80,81,82,83,65,84,85,86,87,88,78,79,80,81,82,83,65,84,85,86,87,88,78,79,80,81,82,83,65,84,85,86,87,88,78,79,80,81,82,83,65,84,85,86,87,88,78,79,80,81,82,83,65,84,85,86,87,88,78,79,80,81,82,83,65,84,85,86,87,88,78,79,80,81,82,83,65,84,85,86,87,88,78,79,80,81,82,83,65,84,85,86,87,88,78,79,80,81,82,83,65,84,147,0,0,148,0,0,0,0,0,0,0,0,0,147,0,37,39,42,34,41,38,35,40,36,37,39,42,34,41,38,35,40,36,37,39,42,34,41,38,35,40,36,37,39,42,34,41,38,35,40,36,37,39,42,34,41,38,35,40,36,37,39,42,34,41,38,35,40,36,37,39,42,34,41,38,35,40,36,37,39,42,34,41,38,35,40,36,37,39,42,34,41,38,35,37,39,42,34,41,38,35,40,36,37,39,42,34,41,38,35,40,36,37,37,37,39,39,39,42,42,42,34,34,34,41,41,41,41,41,41,38,38,38,38,38,38,35,35,40,36,147,37,39,42,34,41,38,35,37,39,42,34,41,38,35,40,36,37,39,42,34,41,38,35,40,36,147,37,39,42,34,41,38,35,37,39,42,34,41,38,35,37,39,42,34,41,38,35,40,36,37,39,42,34,41,38,35,40,36,37,39,42,34,41,38,35,40,36,37,39,42,34,41,38,35,40,36,37,39,42,34,41,38,35,40,36,148,37,39,42,34,41,38,35,148,37,39,42,34,41,38,35,148,37,39,42,34,41,38,35,37,39,42,34,41,38,35,40,36,37,39,42,34,41,38,35,40,36,37,39,42,34,41,38,35,40,36,37,39,42,34,41,38,35,40,36,37,39,42,34,41,38,35,40,36,37,39,42,34,41,38,35,40,36,37,39,42,34,41,38,35,40,36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,94,0,95,0,0,0,0,94,149,0,0,95,94,0,0,0,0,0,0,0,0,0,0,0,0,0,0,93,92,94,91,93,92,94,91,93,92,94,91,91,92,93,92,94,91,93,92,94,91,93,92,94,91,0,93,92,94,91,93,92,94,91,150,93,92,94,91,91,95,0,93,92,94,91,91,92,93,93,92,94,91,93,92,92,94,91,93,92,94,91,93,92,94,91,151,93,0,93,92,91,96,93,92,94,91,93,92,94,91,93,92,94,91,91,149,0,91,0,92,92,0,93,92,94,91,93,92,94,91,0,92,93,91,92,93,92,93,91,90,91,91,0,93,92,94,91,93,92,94,91,93,92,94,91,93,92,94,91,93,92,94,91,93,93,93,92,94,91,93,92,94,91,0,0,0,99,99,100,101,99,100,101,99,100,101,99,99,100,101,99,99,100,101,99,100,101,99,100,101,99,99,101,99,100,101,99,100,101,99,100,101,99,99,100,101,99,100,101,99,100,101,100,101,99,100,101,99,99,99,100,101,99,100,101,99,99,99,99,99,99,101,100,101,99,100,101,99,100,101,99,100,101,99,100,101,99,99,100,101,99,100,101,99,0,0,0,103,104,102,103,104,102,103,104,102,102,103,104,102,102,103,104,102,103,104,102,103,104,102,102,102,102,102,104,102,103,104,102,103,104,102,103,104,102,103,104,102,103,104,102,103,104,102,103,104,102,103,104,102,103,104,102,102,102,103,104,102,103,104,102,102,102,102,102,104,103,104,102,103,104,102,103,104,102,103,104,102,103,104,102,102,103,104,102,103,104,102,0,0,0,106,107,105,106,107,105,106,107,105,105,106,107,105,105,106,107,105,106,107,105,106,107,105,105,105,105,107,105,106,107,105,106,107,105,106,107,105,106,107,105,106,107,105,106,107,105,106,107,105,106,107,105,106,107,105,105,105,106,107,105,106,107,105,105,105,105,105,105,107,106,107,105,106,107,105,106,107,105,106,107,105,106,107,105,105,106,107,105,106,107,105,0,0,0,109,110,108,109,110,108,109,110,108,108,109,110,108,109,110,108,109,110,108,109,110,108,109,108,108,108,110,108,108,109,108,109,110,108,109,110,108,109,108,109,110,108,109,110,108,108,109,110,109,110,108,109,110,108,109,108,108,109,110,108,109,110,108,108,108,108,108,110,109,110,108,109,110,108,109,110,108,109,110,108,109,110,108,108,109,110,108,109,110,108,0,0,0,112,113,111,112,113,111,112,113,111,111,112,113,111,112,113,111,112,113,111,112,113,111,112,111,111,113,111,112,111,112,113,111,112,113,111,112,111,112,113,111,112,113,111,112,113,112,113,111,112,113,111,112,111,111,112,113,111,112,113,111,111,111,111,111,113,112,113,111,112,113,111,112,113,111,112,113,111,112,113,111,111,112,113,111,112,113,111,0,0,0,20,20,20,114,20,115,114,20,115,114,20,115,20,20,114,20,115,20,114,20,115,114,20,115,114,20,115,20,20,20,20,20,115,20,114,114,20,115,114,20,115,114,20,115,114,20,115,20,114,20,115,114,115,20,20,114,115,20,20,114,20,115,114,20,115,20,20,20,20,20,20,114,20,115,114,20,115,20,20,20,20,20,115,114,20,115,114,20,115,114,20,115,114,20,115,114,20,115,20,20,114,20,115,114,20,115,20,0,0,0,0,0,117,119,117,120,121,118,119,117,120,121,118,119,117,120,121,118,117,117,119,117,119,118,117,119,117,120,121,118,119,117,120,121,118,119,117,120,121,118,119,117,120,121,118,119,117,118,118,118,118,119,117,121,118,119,117,120,121,118,119,117,120,121,118,119,117,117,120,121,118,119,117,120,121,118,119,117,120,121,118,120,121,117,119,117,118,120,121,118,119,117,120,121,118,119,117,120,121,118,119,117,118,118,118,117,119,117,120,121,118,119,117,120,121,118,118,117,117,119,117,119,118,118,121,119,117,120,121,118,119,117,120,121,118,119,117,120,121,118,119,117,120,121,118,119,117,120,121,118,118,119,117,120,121,118,119,117,120,121,118,0,0,0,122,122,123,124,122,123,124,122,123,124,122,122,123,124,122,122,123,124,122,123,124,122,123,124,122,122,122,124,122,123,124,122,123,124,122,123,124,122,122,123,124,122,123,124,122,123,124,122,123,124,122,123,124,122,122,122,123,124,122,123,124,122,122,122,122,122,122,124,123,124,122,123,124,122,123,124,122,123,124,122,123,124,122,122,123,124,122,123,124,122,0,0,0,126,127,125,126,127,125,126,127,125,125,126,127,125,126,127,125,126,127,125,126,127,125,125,125,125,127,125,126,127,125,126,127,125,126,127,125,125,126,127,125,126,127,125,126,127,125,126,127,126,127,125,126,127,125,125,125,126,127,125,126,127,125,125,125,125,127,126,127,125,126,127,125,126,127,125,126,127,125,126,127,125,125,126,127,125,126,127,125,0,72,0,72,129,74,0,129,0,72,74,133,133,129,0,74,0,0,72,128,132,131,132,128,72,129,74,133,128,132,131,132,128,72,129,74,133,131,132,128,72,129,74,133,131,128,131,132,128,72,129,74,133,131,131,132,128,72,129,74,133,131,132,128,72,129,74,133,131,132,128,72,129,74,133,131,132,72,129,74,133,132,133,131,131,132,128,72,129,74,133,131,132,128,72,129,74,133,131,132,128,128,72,129,74,133,131,132,72,129,74,133,131,132,128,72,129,74,133,74,74,74,128,132,131,128,131,132,128,72,129,74,133,131,132,128,72,129,74,133,131,132,128,72,129,74,133,131,0,131,132,128,72,129,74,133,131,132,128,72,129,74,133,131,131,133,131,131,131,132,128,72,129,74,133,131,132,128,72,129,74,133,131,132,128,72,129,74,133,131,132,128,72,129,74,133,131,132,128,72,129,74,133,131,132,131,132,131,131,132,128,72,129,74,133,131,132,128,72,129,74,133,0,152,130,0,0,73,73,73,73,73,73,73,73,73,130,130,73,73,73,73,73,130,130,73,73,73,73,73,73,152,152,152,152,152,152,152,152,73,73,73,73,73,73,73,0,98,98],"f":[0,0,0,0,[[]],[[]],[[]],[[]],[[],1],[[],1],[[[4,[[0,[2,3]]]]],[[4,[[0,[2,3]]]]]],[[[4,[[0,[5,3]]]],[4,[[0,[5,3]]]]],6],[[],[[4,[[0,[7,3]]]]]],[8,9],[[[4,[3]],8],9],0,[[[4,[[0,[[10,[[0,[[10,[[0,[[10,[[0,[10,3]]]],3]]]],3]]]],3]]]],[4,[[0,[[10,[[0,[[10,[[0,[[10,[[0,[10,3]]]],3]]]],3]]]],3]]]]],11],0,[[[4,[[0,[12,3]]]],13],[[9,[14]]]],0,[[]],0,[[[4,[[0,[15,3]]]],16]],0,[[]],0,0,0,[[]],[[]],[[[4,[[0,[[17,[[0,[[17,[[0,[[17,[[0,[17,3]]]],3]]]],3]]]],3]]]],[4,[[0,[[17,[[0,[[17,[[0,[[17,[[0,[17,3]]]],3]]]],3]]]],3]]]]],[[1,[6]]]],0,0,0,[[]],[[]],0,0,[[],9],[[],9],[[],18],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[19,[8]]],20],[[[21,[8]]],20],[[],20],[[[22,[8]]],20],[[]],[[]],[[]],[[]],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],9],[[[21,[8,[0,[3,23]]]]],9],[[[22,[8]]],9],[20,19],[20,19],[20,19],[20,19],[20,19],[[],[[21,[[0,[3,23]]]]]],[[],[[21,[[0,[3,23]]]]]],[[],[[21,[[0,[3,23]]]]]],[[],[[21,[[0,[3,23]]]]]],[[],[[21,[[0,[3,23]]]]]],[20,24],[20,24],[20,24],[20,24],[20,24],[25,9],[[[19,[8]],25],9],[[[21,[8,[0,[3,23]]]],25],9],[[[24,[8]],25],9],[[[22,[8]],25],9],[[20,25],9],[[[19,[8]],20,25],9],[[[21,[8,[0,[3,23]]]],20,25],9],[[[24,[8]],20,25],9],[[[22,[8]],20,25],9],[20,9],[[[19,[8]],20],9],[[[21,[8,[0,[3,23]]]],20],9],[[[24,[8]],20],9],[[[22,[8]],20],9],[[[19,[[0,[8,12]]]],13],26],[[[21,[12,12]],13],26],[[[24,[[0,[8,12]]]],13],26],[[[22,[[0,[8,12]]]],13],26],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[24,[8]]],27],[28,22],[28,22],[28,22],[28,22],[28,22],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],18],[[],18],[[],18],[[],18],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[[31,[[0,[3,29]],30]]],[[32,[[0,[3,29]],30]]]],[[]],[[]],[[]],[[],20],[[33,33],33],[[33,33,33],33],[[]],[[],1],[[],1],[20,19],[[[31,[2,2,2]]],[[31,[2,2,2]]]],[[[31,[5,5,5]],[31,[5,5,5]]],6],[[],[[21,[[0,[3,23]]]]]],[20,24],[[[31,[3]]]],[[[31,[3]]]],[[[31,[[0,[3,[23,[34]]]],34]],25],9],[[[31,[[0,[3,[23,[35]]]],35,36]],25],9],[[[31,[[0,[3,[23,[37]]]],37]],25],9],[[[31,[[0,[3,[23,[38]]]],38,36]],25],9],[[[31,[[0,[3,[23,[39]]]],39]],25],9],[[[31,[[0,[3,[23,[35]]]],35,40]],25],9],[[[31,[[0,[3,[23,[41]]]],41,36]],25],9],[[[31,[[0,[3,[23,[38]]]],38,40]],25],9],[[[31,[[0,[3,[23,[41]]]],41,40]],25],9],[[[31,[[0,[3,[23,[42]]]],42]],25],9],[[[31,[10,10,10]],[31,[10,10,10]]],11],[[[31,[12,12,12]],13],26],[[]],[[[31,[15,15,15]],16]],[[]],[[],[[31,[3]]]],[[]],[[]],[[[31,[17,17,17]],[31,[17,17,17]]],[[1,[6]]]],[[[31,[[0,[3,29]],30]],28],[[1,[[0,[3,29]]]]]],[[]],[[]],[[[31,[[0,[3,[23,[35]]]],35,40]],28,[0,[3,[23,[35]]]]]],[[[31,[[0,[3,[23,[35]]]],35,36]],28,[0,[3,[23,[35]]]]]],[[[31,[[0,[3,[23,[37]]]],37]],28,[0,[3,[23,[37]]]]]],[[[31,[[0,[3,[23,[39]]]],39]],28,[0,[3,[23,[39]]]]]],[[[31,[[0,[3,[23,[41]]]],41,36]],28,[0,[3,[23,[41]]]]]],[[[31,[[0,[3,[23,[42]]]],42]],28,[0,[3,[23,[42]]]]]],[[[31,[[0,[3,[23,[38]]]],38,40]],28,[0,[3,[23,[38]]]]]],[[[31,[[0,[3,[23,[41]]]],41,40]],28,[0,[3,[23,[41]]]]]],[[[31,[[0,[3,[23,[34]]]],34]],28,[0,[3,[23,[34]]]]]],[[[31,[[0,[3,[23,[38]]]],38,36]],28,[0,[3,[23,[38]]]]]],[31,27],[28,22],[[],9],[[],9],[[],18],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[28,28],[43,43],[[28,27],28],[[28,28],28],[[27,27],27],[[43,43],43],[[28,28]],[[28,27]],[[27,27]],[[43,43]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],20],[[]],[[]],[[]],[[]],[[]],[[]],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[28,28],[27,27],[44,44],[45,45],[46,46],[43,43],[[28,28],6],[[27,27],6],[[44,44],6],[[45,45],6],[[46,46],6],[[28,28],28],[[27,27],27],[[28,28],28],[[27,27],27],[[28,28],28],[[27,27],27],[[28,28],28],[[27,27],27],[[],28],[[],27],[[],43],[[28,47],28],[[27,48],27],[[28,47]],[[27,48]],[[28,28],11],[[27,27],11],[[44,44],11],[[45,45],11],[[46,46],11],[[43,43],11],[[28,13],[[9,[14]]]],[[28,13],[[9,[14]]]],[[27,13],[[9,[14]]]],[[27,13],[[9,[14]]]],[[44,13],[[9,[14]]]],[[45,13],[[9,[14]]]],[[46,13],[[9,[14]]]],[[43,13],26],[[],28],[[],28],[[],28],[[]],[[],27],[[],27],[[]],[[],27],[[]],[[]],[[]],[[]],[49,43],[49,43],[[45,46],44],[[28,16]],[[27,16]],[[44,16]],[[45,16]],[[46,16]],0,[[28,33],47],[[27,33],48],[[]],[[]],[[]],[[]],[[]],[[]],[[28,47],28],[[27,48],27],[[28,47]],[[27,48]],[28],[43,43],[[47,47],28],[[48,48],27],[47,28],[48,27],[43,43],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[28,28],[[1,[6]]]],[[27,27],[[1,[6]]]],[[44,44],[[1,[6]]]],[[45,45],[[1,[6]]]],[[46,46],[[1,[6]]]],[[43,43],[[1,[6]]]],[[],43],[[27,27],27],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[27,27],27],[[],27],[[28,27],28],[[28,28],28],[[27,27],27],[[43,43],43],[[28,28]],[[28,27]],[[27,27]],[[43,43]],[43,49],[43,49],[[],[[9,[28]]]],[[],[[9,[28]]]],[[],[[9,[28]]]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[44,45],0,[28,28],[27,27],[44,46],0,[28,28],[27,27],[[],28],[[],27],[[],43],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],20],[[],20],[[[51,[50]]],20],[[]],[[]],[[]],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[[32,[[0,[3,29,2]],[0,[30,2]]]]],[[32,[[0,[3,29,2]],[0,[30,2]]]]]],[[[51,[2]]],[[51,[2]]]],[[[32,[[0,[3,29,5]],[0,[30,5]]]],[32,[[0,[3,29,5]],[0,[30,5]]]]],6],[8,9],[[[32,[[0,[3,29]],30]],8],9],[[[53,[52]],8],9],[[[51,[52]],8],9],[[8,20],9],[[[32,[[0,[3,29]],30]],8,20],9],[[[53,[52]],8,20],9],[[[32,[[0,[3,29,10]],[0,[30,10]]]],[32,[[0,[3,29,10]],[0,[30,10]]]]],11],[[[32,[[0,[3,29,12]],[0,[30,12]]]],13],26],[[[53,[12]],13],26],[[[51,[12]],13],26],[[]],[[]],[[]],[[[32,[[0,[3,29,15]],[0,[30,15]]]],16]],[[]],[[]],[[]],[48,[[32,[[0,[3,29]],30]]]],[[52,28],[[51,[52]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[[32,[[0,[3,29,17]],[0,[30,17]]]],[32,[[0,[3,29,17]],[0,[30,17]]]]],[[1,[6]]]],[28,1],[[[32,[[0,[3,29]],30]],28],1],[[]],[[]],[[]],[[]],[[]],[[]],[[[32,[[0,[3,29]],30]]],27],[53,27],[20,53],[[51,28],51],[[51,28],51],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],18],[[],18],[[],18],[[]],[[]],[[]],[[]],[[]],[[]],[[52,28],[[51,[52]]]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[8,9],[20,54],0,0,[28,55],0,[[]],[[]],[[]],[[]],[[],1],[[],1],[8,9],[[[54,[[0,[56,12]]]],13],26],[[]],[[]],[[]],[[[54,[56]]],1],[[]],[[]],[[]],[[]],[28,55],[[],9],[[],9],[[],18],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[],1],[[],1],[8,9],[[[55,[10]],[55,[10]]],11],[[[55,[12]],13],26],[[]],[[]],[[]],[[[55,[56]]],1],[[]],[[]],[[]],[[]],[28,55],[[],9],[[],9],[[],18],[[]],[[]],[[]],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[[57,[2,2]]],[[57,[2,2]]]],[[[57,[5,5]],[57,[5,5]]],6],[8,9],[8,9],[[[57,[10,10]],[57,[10,10]]],11],[[[57,[12,12]],13],26],[[[58,[12]],13],26],[[59,13],26],[[[60,[12,12]],13],26],[[]],[[]],[[]],[[]],[[[57,[15,15]],16]],[[]],[[]],[[]],[[]],[[[57,[34]]]],[[[57,[35,40]]]],[[[57,[38,40]]]],[[[57,[39]]]],[[[57,[35,36]]]],[[[57,[41,36]]]],[[[57,[38,36]]]],[[[57,[37]]]],[[[57,[41,40]]]],[[[57,[42]]]],[[]],[[]],[[]],[[],57],[[[58,[42]]],1],[[[58,[39]]],1],[[[58,[37]]],1],[59,1],[[[60,[35,36]]],1],[[[60,[38,40]]],1],[[[60,[41,40]]],1],[[[60,[41,36]]],1],[[[60,[35,40]]],1],[[[60,[38,36]]],1],[[[58,[37]],33],1],[[[58,[42]],33],1],[[[58,[39]],33],1],[[59,33],1],[[[60,[41,36]],33],1],[[[60,[35,40]],33],1],[[[60,[38,36]],33],1],[[[60,[35,36]],33],1],[[[60,[38,40]],33],1],[[[60,[41,40]],33],1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[57,[17,17]],[57,[17,17]]],[[1,[6]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[58,[39]]]],[[[58,[37]]]],[[[58,[42]]]],[59],[[[60,[35,36]]]],[[[60,[38,40]]]],[[[60,[41,40]]]],[[[60,[35,40]]]],[[[60,[38,36]]]],[[[60,[41,36]]]],[28,55],[28,55],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],18],[[],18],[[],18],[[],18],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[[61,[3]]],20],[[[61,[[0,[3,62]]]],[61,[[0,[3,62]]]]]],[[[61,[[0,[3,62]]]],[61,[[0,[3,62]]]],63]],[[[61,[[0,[3,62]]]]]],[[[61,[[0,[3,62]]]],63]],[[]],[[]],[[]],[[],20],[[]],[64],[[],1],[[],1],[20,19],[[[61,[[0,[3,2]]]]],[[61,[[0,[3,2]]]]]],[[],[[21,[[0,[3,23]]]]]],[[],64],[20,24],[[],[[61,[3]]]],[[[61,[3]],[61,[3]]],[[61,[65]]]],[[[61,[3]],25],9],[[[61,[3]],28,3]],[[[61,[3]],[61,[3]]],11],[[[61,[[0,[3,62]]]],13],26],[[]],[[],[[61,[[0,[3,62]]]]]],[[25,3],[[61,[3]]]],[[[61,[3]],28],[[1,[3]]]],[[]],[[[61,[3]],[0,[63,66]]],[[61,[3]]]],[[],[[61,[3]]]],[[]],[[]],[[]],[[]],[[[61,[3]],11]],[[[61,[3]],11]],[[[61,[3]],28,[1,[3]]]],[[[61,[3]],25,[1,[3]]]],[[[61,[3]]],27],[[[61,[3]]],[[61,[3]]]],[28,22],[[],9],[[],9],[[],18],[[]],[[]],[[]],[[]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[[67,[3]],3],[[67,[3]]]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[67,[3]]],[[68,[3]]]],[[]],[[]],[[]],[[]],0,0,[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[[68,[2]]],[[68,[2]]]],[[[67,[2]]],[[67,[2]]]],[69,69],[70,70],[[70,70],6],[[],70],[48,70],[48,70],[[[68,[3]],71,28,72,8],[[9,[28]]]],[[[68,[3]],48,28,72,8],[[9,[28]]]],[[[68,[10]],[68,[10]]],11],[[69,69],11],[[70,70],11],[[[68,[12]],13],26],[[[67,[12]],13],26],[[69,13],26],[[70,13],26],[[67,69],67],0,[[]],[[[68,[3]]],[[67,[3]]]],[[]],[[]],[[]],0,[[70,16]],0,0,[[]],[[]],[[]],[[]],[[[68,[3]]],11],0,0,0,0,0,0,0,0,0,0,0,0,0,[[[68,[3]]],48],0,[[[68,[3]],71,28,72],73],[[69,3],[[68,[3]]]],[[],67],[[48,48],70],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[70,70],[[1,[6]]]],[67,67],[67,67],[67,67],[67,67],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[68,[3]],1]],[[[68,[3]],74]],[[[68,[3]],1]],[[[68,[3]],74]],[67,67],0,0,[[[67,[3]],3],[[67,[3]]]],[[[67,[3]],3],[[67,[3]]]],0,[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],18],[[],18],[[],18],[[],18],[67,67],0,0,[[[67,[3]],3],[[67,[3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[75,56],[[],1],[[],1],[[],1],[[],1],[75,75],[76,76],[[75,75],6],[[76,76],6],[[75,64],11],[[75,75],11],[[76,76],11],[[75,13],26],[[76,13],26],[[]],[[]],[76,75],[[75,16]],[[76,16]],[64,33],[[75,64],33],[[]],[[]],[[],56],[76,71],[[71,33],75],[[]],[[]],[[]],[[]],[[75,75],[[1,[6]]]],[[76,76],[[1,[6]]]],[75,56],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],18],[[],18],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],77],[78,77],[79,77],[80,77],[81,77],[82,77],[83,77],[65,77],[84,77],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[64,85],[64,86],[64,87],[64,88],[64,78],[64,79],[64,80],[64,81],[64,65],[64,84],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[85,85],[86,86],[87,87],[88,88],[78,78],[79,79],[80,80],[81,81],[82,82],[83,83],[65,65],[84,84],[[85,85],6],[[86,86],6],[[87,87],6],[[88,88],6],[[78,78],6],[[79,79],6],[[80,80],6],[[81,81],6],[[82,82],6],[[83,83],6],[[65,65],6],[[84,84],6],[85,64],[86,64],[87,64],[88,64],[78,64],[79,64],[80,64],[81,64],[65,64],[84,64],[[],85],[[],86],[[],87],[[],88],[[],78],[[],79],[[],80],[[],81],[[],82],[[],83],[[],65],[[],84],[[85,85],11],[[86,86],11],[[87,87],11],[[88,88],11],[[78,78],11],[[79,79],11],[[80,80],11],[[81,81],11],[[82,82],11],[[83,83],11],[[65,65],11],[[84,84],11],[[85,13],[[9,[14]]]],[[86,13],[[9,[14]]]],[[87,13],[[9,[14]]]],[[88,13],[[9,[14]]]],[[78,13],[[9,[14]]]],[[79,13],[[9,[14]]]],[[80,13],[[9,[14]]]],[[81,13],[[9,[14]]]],[[82,13],[[9,[14]]]],[[83,13],[[9,[14]]]],[[65,13],[[9,[14]]]],[[84,13],[[9,[14]]]],[81,85],[11,85],[79,85],[88,85],[[]],[82,85],[78,85],[80,85],[37,85],[65,85],[83,85],[84,85],[87,85],[86,85],[79,86],[85,86],[39,86],[82,86],[78,86],[88,86],[87,86],[84,86],[80,86],[65,86],[81,86],[[]],[83,86],[83,87],[79,87],[[]],[86,87],[85,87],[65,87],[82,87],[42,87],[80,87],[84,87],[81,87],[78,87],[88,87],[84,88],[85,88],[65,88],[87,88],[78,88],[86,88],[83,88],[82,88],[34,88],[[]],[80,88],[81,88],[79,88],[83,78],[65,78],[85,78],[86,78],[81,78],[82,78],[84,78],[41,78],[88,78],[87,78],[80,78],[[]],[79,78],[88,79],[81,79],[85,79],[86,79],[78,79],[84,79],[82,79],[65,79],[80,79],[[]],[83,79],[87,79],[41,79],[79,80],[83,80],[86,80],[[]],[81,80],[78,80],[85,80],[65,80],[41,80],[82,80],[84,80],[88,80],[87,80],[82,81],[65,81],[88,81],[80,81],[84,81],[41,81],[86,81],[83,81],[79,81],[87,81],[85,81],[[]],[78,81],[78,82],[65,82],[38,82],[86,82],[[]],[84,82],[79,82],[85,82],[83,82],[88,82],[81,82],[87,82],[80,82],[[]],[65,83],[84,83],[78,83],[38,83],[87,83],[86,83],[79,83],[80,83],[85,83],[88,83],[82,83],[81,83],[[]],[85,65],[82,65],[88,65],[78,65],[86,65],[83,65],[38,65],[84,65],[79,65],[87,65],[80,65],[81,65],[87,84],[88,84],[83,84],[80,84],[38,84],[86,84],[85,84],[78,84],[82,84],[65,84],[81,84],[79,84],[[]],[[],77],[78,77],[79,77],[80,77],[81,77],[82,77],[83,77],[65,77],[84,77],[[85,16]],[[86,16]],[[87,16]],[[88,16]],[[78,16]],[[79,16]],[[80,16]],[[81,16]],[[82,16]],[[83,16]],[[65,16]],[[84,16]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[85,85],[85,11],[85,11],[[],77],[86,77],[87,77],[88,77],[77,86],[77,87],[77,88],[[77,77,77],78],[[77,77,77],79],[[77,77,77],80],[[77,77,77],81],[[77,77,77],82],[[77,77,77],83],[[77,77,77],65],[[77,77,77],84],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[85,85],[[1,[6]]]],[[86,86],[[1,[6]]]],[[87,87],[[1,[6]]]],[[88,88],[[1,[6]]]],[[78,78],[[1,[6]]]],[[79,79],[[1,[6]]]],[[80,80],[[1,[6]]]],[[81,81],[[1,[6]]]],[[82,82],[[1,[6]]]],[[83,83],[[1,[6]]]],[[65,65],[[1,[6]]]],[[84,84],[[1,[6]]]],[[],77],[78,77],[79,77],[80,77],[81,77],[82,77],[83,77],[65,77],[84,77],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[37,37],[39,39],[42,42],[34,34],[41,41],[38,38],[35,35],[40,40],[36,36],[[37,37],6],[[39,39],6],[[42,42],6],[[34,34],6],[[41,41],6],[[38,38],6],[[35,35],6],[[40,40],6],[[36,36],6],[[],37],[[],39],[[],42],[[],34],[[],41],[[],38],[[],35],[[37,37],11],[[39,39],11],[[42,42],11],[[34,34],11],[[41,41],11],[[38,38],11],[[35,35],11],[[40,40],11],[[36,36],11],[[37,13],[[9,[14]]]],[[39,13],[[9,[14]]]],[[42,13],[[9,[14]]]],[[34,13],[[9,[14]]]],[[41,13],[[9,[14]]]],[[38,13],[[9,[14]]]],[[35,13],[[9,[14]]]],[[40,13],[[9,[14]]]],[[36,13],[[9,[14]]]],[85,37],[[]],[77,37],[86,39],[77,39],[[]],[77,42],[[]],[87,42],[77,34],[[]],[88,34],[89,41],[80,41],[78,41],[[]],[81,41],[79,41],[48,38],[82,38],[83,38],[84,38],[[]],[65,38],[[]],[48,35],[[]],[[]],[48],[48,37],[48,39],[48,42],[48,34],[48,41],[48,38],[48,35],[[37,16]],[[39,16]],[[42,16]],[[34,16]],[[41,16]],[[38,16]],[[35,16]],[[40,16]],[[36,16]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[37],[39],[42],[34],[41],[38],[35],[77,37],[77,39],[77,42],[77,34],[89,41],[48,38],[48,35],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[37,37],[[1,[6]]]],[[39,39],[[1,[6]]]],[[42,42],[[1,[6]]]],[[34,34],[[1,[6]]]],[[41,41],[[1,[6]]]],[[38,38],[[1,[6]]]],[[35,35],[[1,[6]]]],[[40,40],[[1,[6]]]],[[36,36],[[1,[6]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[37],[39],[42],[34],[41],[38],[35],[[]],[37],[39],[42],[34],[41],[38],[35],[[]],[37],[39],[42],[34],[41],[38],[35],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[91,[90]]],20],[[[92,[3]]],[[93,[3]]]],[[]],[[]],[[]],[[]],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],0,[[[93,[[0,[3,2]]]]],[[93,[[0,[3,2]]]]]],[[[92,[[0,[3,2]]]]],[[92,[[0,[3,2]]]]]],[94,94],[[[91,[2,2]]],[[91,[2,2]]]],[[[93,[[0,[3,5]]]],[93,[[0,[3,5]]]]],6],[[[92,[[0,[3,5]]]],[92,[[0,[3,5]]]]],6],[[94,94],6],[[[91,[5,5]],[91,[5,5]]],6],[28,11],[[],[[93,[3]]]],[[],[[92,[[0,[3,7]]]]]],[[],94],[[],[[91,[7,7]]]],[[[91,[95]],8],9],[8,9],0,[[[93,[[0,[3,10]]]],[93,[[0,[3,10]]]]],11],[[[92,[[0,[3,10]]]],[92,[[0,[3,10]]]]],11],[[94,94],11],[[[91,[10,10]],[91,[10,10]]],11],[[[91,[96,[93,[3]]]]],96],[[[92,[3]],3],[[92,[3]]]],0,[[[93,[[0,[3,12]]]],13],26],[[[92,[[0,[3,12]]]],13],26],[[94,13],26],[[[91,[12,12]],13],26],[[]],[[[93,[3]]],[[92,[3]]]],[[]],[[]],[[]],[[[93,[[0,[3,15]]]],16]],[[[92,[[0,[3,15]]]],16]],[[94,16]],[[[91,[15,15]],16]],[[]],[[]],[[]],[[]],[97,[[91,[97]]]],[[[93,[3]]],11],0,[[],[[93,[3]]]],[[],[[92,[3]]]],[[],91],[47],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[93,[[0,[3,17]]]],[93,[[0,[3,17]]]]],[[1,[6]]]],[[[92,[[0,[3,17]]]],[92,[[0,[3,17]]]]],[[1,[6]]]],[[94,94],[[1,[6]]]],[[[91,[17,17]],[91,[17,17]]],[[1,[6]]]],[[[91,[0]]]],[[]],0,0,0,[[[92,[3]]],[[92,[3]]]],[[[92,[3]]],[[92,[3]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[[92,[3]],94],[[92,[3]]]],0,[[[91,[96,[93,[3]]]]],96],[[[92,[3]],3],[[92,[3]]]],0,[[[92,[3]],48],[[92,[3]]]],0,0,[[],20],[[[91,[98,2]],28],[[91,[98,2]]]],[[[91,[98,2]],28],[[91,[98,2]]]],0,[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],18],[[],18],[[],18],[[],18],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3,[[93,[3]]]],[[3,48],[[93,[3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[99,20],[[]],[[]],[[]],[99,28],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[100,100],[[[101,[2]]],[[101,[2]]]],[99,99],0,[8,9],[[99,[93,[3]],8],9],[[100,100],11],[[[101,[10]],[101,[10]]],11],[[99,99],11],[[100,13],26],[[[101,[12]],13],26],[[99,13],26],[[]],[[]],[[]],[[102,43,43],99],[[]],[[]],[[]],[[]],[[]],[[28,48,43,43],99],[100,1],[[[101,[3]]],1],[[]],[[]],[[]],[[]],[[]],[[]],[[99,99],[[1,[6]]]],[99],[[]],[[]],[[]],[[]],[[]],[[]],[[99,[93,[3]]],20],[99,102],0,[[99,28],99],[[99,28],99],[28,55],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],18],[[],18],[[],18],[[]],[[]],[[]],[[]],[[]],[[]],[[28,48,43,43],99],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[102,20],[[]],[[]],[[]],[102,28],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[103,103],[[[104,[2]]],[[104,[2]]]],[102,102],[[102,102],6],[[102,28],11],[[],102],0,[8,9],[[102,[93,[3]],8],9],[[103,103],11],[[[104,[10]],[104,[10]]],11],[[102,102],11],[[103,13],26],[[[104,[12]],13],26],[[102,13],26],[[]],[[]],[[]],[[103,16]],[[[104,[15]],16]],[[102,16]],[[]],[[]],[[]],[[]],[[]],[[28,48],102],[103,1],[[[104,[3]]],1],[[102,47],102],[[]],[[]],[[]],[[]],[[]],[[]],[[102,102],[[1,[6]]]],[102],[[]],[[]],[[]],[[]],[[]],[[]],[[102,[93,[3]]],20],0,[[102,28],102],[[102,28],102],[28,55],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],18],[[],18],[[],18],[[]],[[]],[[]],[[]],[[]],[[]],[[28,48],102],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[105,20],[[]],[[]],[[]],[105,28],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[106,106],[[[107,[2]]],[[107,[2]]]],[105,105],[[105,105],6],[[105,28],11],[[],105],[8,9],[[105,[93,[3]],8],9],[[106,106],11],[[[107,[10]],[107,[10]]],11],[[105,105],11],[[106,13],26],[[[107,[12]],13],26],[[105,13],26],[[]],[[]],[[]],[[106,16]],[[[107,[15]],16]],[[105,16]],[[]],[[]],[[]],[[]],[[]],[[28,27],105],[106,1],[[[107,[3]]],1],[[105,47],105],[[]],[[]],[[]],[[]],[[]],[[]],[[105,105],[[1,[6]]]],[105],[[]],[[]],[[]],[[]],[[]],[[]],0,[[105,[93,[3]]],20],0,[[105,28],105],[[105,28],105],[28,55],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],18],[[],18],[[],18],[[]],[[]],[[]],[[]],[[]],[[]],[[28,27],105],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[108,20],[[]],[[]],[[]],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[109,109],[[[110,[2]]],[[110,[2]]]],[108,108],[[109,109],6],[[108,108],6],[[],108],[108,28],[8,9],[[108,[93,[3]],8],9],0,[[109,109],11],[[108,108],11],[[109,13],26],[[[110,[12]],13],26],[[108,13],26],[[]],[[]],[[]],[[109,16]],[[108,16]],[[]],[[]],[[]],[[]],[[]],[108,28],[[28,28],108],[109,1],[[[110,[3]]],1],[[]],[[]],[[]],[[]],[[]],[[]],[[109,109],[[1,[6]]]],[[108,108],[[1,[6]]]],[108],[[]],[[]],[[]],[[]],[[]],[[]],0,[[108,[93,[3]]],20],[[108,28],108],[[108,28],108],[28,55],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],18],[[],18],[[],18],[[]],[[]],[[]],[[]],[[]],[[]],[[28,28],108],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[111,20],[[]],[[]],[[]],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[112,112],[[[113,[2]]],[[113,[2]]]],[111,111],[[112,112],6],[[111,111],6],[[],111],[8,9],[[111,[93,[3]],8],9],[[112,112],11],[[111,111],11],[[112,13],26],[[[113,[12]],13],26],[[111,13],26],[[]],[[]],[[]],[[112,16]],[[111,16]],[[]],[[]],[[]],[[]],[[]],[[],111],[112,1],[[[113,[3]]],1],[[]],[[]],[[]],[[]],[[]],[[]],[[112,112],[[1,[6]]]],[[111,111],[[1,[6]]]],[111],[[]],[[]],[[]],[[]],[[]],[[]],[[111,[93,[3]]],20],[[111,28],111],0,[[111,28],111],[28,55],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],18],[[],18],[[],18],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[20,44],28],[[20,45],47],[[20,46],47],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[20,[[1,[28]]]],[20,20],[[]],[[]],[[]],[20,28],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[114,114],[20,20],[[[115,[2]]],[[115,[2]]]],[[20,20],6],[20,[[116,[47]]]],[[20,28],11],[[20,28],11],[[],20],[8,9],[[20,[93,[3]],8],9],[[],114],[[114,114],11],[[20,20],11],[[[115,[10]],[115,[10]]],11],[[114,13],[[9,[14]]]],[[20,13],[[9,[14]]]],[[[115,[12]],13],26],[[]],[[]],[[]],[[114,16]],[[20,16]],[[[115,[15]],16]],[[20,20],20],[[]],[[]],[[]],[[]],[[]],[20,11],[[28,27],20],[114,1],[[[115,[3]]],1],[[20,47],20],[[20,47],20],[[]],[[]],[[]],[[]],[[]],[[]],[[20,20],[[1,[6]]]],[20],[[20,27,44],20],[[20,48,46],20],[[20,48,45],20],[20,[[116,[47]]]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[20,[93,[3]]],20],0,[[20,28],20],[[20,28],20],[28,55],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],18],[[],18],[[],18],[[]],[[]],[[]],[[]],[[]],[[]],[[28,27],20],[[28,28],20],[[]],[[]],[[]],[[]],[[]],[[]],[[],20],0,0,0,0,0,[[117,27],117],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[117,27],117],[[117,27],117],0,[[117,27],117],0,[118,20],[117,119],[[]],[[]],[[]],[[]],[[]],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[119,119],[117,117],[120,120],[[[121,[2]]],[[121,[2]]]],[118,118],[[119,119],6],[[117,117],6],[[118,118],6],[118,118],[[118,28],11],0,[[],119],[[],117],[8,9],[[118,[93,[3]],8],9],[[119,119],11],[[117,117],11],[[120,120],11],[[[121,[10]],[121,[10]]],11],[[118,118],11],[[119,13],26],[[117,13],26],[[120,13],26],[[[121,[12]],13],26],[[118,13],26],[[]],[119,117],[[]],[[]],[[]],[[]],[[119,16]],[[117,16]],[[120,16]],[[[121,[15]],16]],[[118,16]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[117,27],117],[27,119],[[],117],[[20,119],118],[120,1],[[[121,[3]]],1],[[118,47],118],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[119,119],[[1,[6]]]],[[117,117],[[1,[6]]]],[[118,118],[[1,[6]]]],[118],0,[[117,27],117],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[118,[93,[3]]],20],[[117,27],117],[[117,27],117],0,[[117,27],117],0,[[118,28],118],[[118,28],118],[28,55],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],18],[[],18],[[],18],[[],18],[[],18],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[20,27],118],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[122,20],[[]],[[]],[[]],[122,28],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[123,123],[[[124,[2]]],[[124,[2]]]],[122,122],[[122,28],11],0,[8,9],[[122,[93,[3]],8],9],[[123,123],11],[[[124,[10]],[124,[10]]],11],[[122,122],11],[[123,13],26],[[[124,[12]],13],26],[[122,13],26],[[]],[[]],[[]],[[102,43,43],122],[[]],[[]],[[]],[[]],[[]],[[28,48,43,43],122],[123,1],[[[124,[3]]],1],[[122,47],122],[[]],[[]],[[]],[[]],[[]],[[]],[[122,122],[[1,[6]]]],[122],[[]],[[]],[[]],[[]],[[]],[[]],[[122,[93,[3]]],20],[122,102],0,[[122,28],122],[[122,28],122],[28,55],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],18],[[],18],[[],18],[[]],[[]],[[]],[[]],[[]],[[]],[[28,48,43,43],122],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[125,20],[[]],[[]],[[]],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[126,126],[[[127,[2]]],[[127,[2]]]],[125,125],[[125,125],6],[[125,28],11],[[],125],[8,9],[[125,[93,[3]],8],9],[[126,126],11],[[[127,[10]],[127,[10]]],11],[[125,125],11],[[126,13],26],[[[127,[12]],13],26],[[125,13],26],[[]],[[]],[[]],[[],125],[[126,16]],[[[127,[15]],16]],[[125,16]],[[]],[[]],[[]],[[]],[[]],[[28,28,28],125],[126,1],[[[127,[3]]],1],[[]],[[]],[[]],[[]],[[]],[[]],[[125,125],[[1,[6]]]],[125],[[]],[[]],[[]],[[]],[[]],[[]],[[125,[93,[3]]],20],[[125,28],125],[[125,28],125],[28,55],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],18],[[],18],[[],18],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[128,129],128],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[128,72],128],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[131,[130]]],20],[128,132],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[[131,[2]]],[[131,[2]]]],[132,132],[128,128],[72,72],[129,129],[[[74,[2]]],[[74,[2]]]],[133,133],[[[131,[5]],[131,[5]]],6],[[132,132],6],[[72,72],6],[[129,129],6],[[[74,[5]],[74,[5]]],6],[[133,133],6],[[],132],[[],133],[[[131,[130]],8],[[9,[28]]]],[[[131,[10]],[131,[10]]],11],[[132,132],11],[[128,128],11],[[72,72],11],[[129,129],11],[[[74,[10]],[74,[10]]],11],[[133,133],11],[[[131,[12]],13],26],[[132,13],26],[[128,13],26],[[72,13],26],[[129,13],26],[[[74,[12]],13],26],[[133,13],26],[[]],[[]],[132,128],[[]],[[]],[[]],[[]],[[]],[[[131,[15]],16]],[[132,16]],[[72,16]],[[129,16]],[[[74,[15]],16]],[[133,16]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[74,[3]]],11],[[[74,[3]]],11],[[[74,[3]]],11],[[128,133],128],0,[[71,28],131],[[],128],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[131,[17]],[131,[17]]],[[1,[6]]]],[[132,132],[[1,[6]]]],[[128,128],[[1,[6]]]],[[72,72],[[1,[6]]]],[[129,129],[[1,[6]]]],[[[74,[17]],[74,[17]]],[[1,[6]]]],[[133,133],[[1,[6]]]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[133,48],48],[[[131,[2]],28],[[131,[2]]]],[[[131,[2]],28],[[131,[2]]]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[71,28,129],131],[129,132],[[71,28,72],131],[72,132],[[71,28,132],131],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,[[]],[[]],[[]],0,[[]],[[],1],[[],1],[73,73],[[73,73],6],[[71,28,72,8],[[9,[28]]]],[[48,28,72,8],[[9,[28]]]],[[73,73],11],[[73,13],26],[[]],[[73,16]],[[]],[[],48],[[71,28,72],73],0,[[]],[[]],[[73,73],[[1,[6]]]],[[]],[[]],[1],[1],[74],[74],[1],[1],[74],[74],[[],9],[[],9],[[],18],[[]],[[]],[[]],[[]],0,[28],[28]],"c":[],"p":[[4,"Option"],[8,"Clone"],[8,"PixelColor"],[3,"Pixel"],[8,"Ord"],[4,"Ordering"],[8,"Default"],[8,"DrawTarget"],[4,"Result"],[8,"PartialEq"],[15,"bool"],[8,"Debug"],[3,"Formatter"],[3,"Error"],[8,"Hash"],[8,"Hasher"],[8,"PartialOrd"],[3,"TypeId"],[3,"Clipped"],[3,"Rectangle"],[3,"ColorConverted"],[3,"Translated"],[8,"Into"],[3,"Cropped"],[8,"IntoIterator"],[6,"Result"],[3,"Size"],[3,"Point"],[8,"From"],[8,"ByteOrder"],[3,"Framebuffer"],[3,"ImageRaw"],[15,"usize"],[3,"RawU8"],[3,"RawU32"],[4,"BigEndian"],[3,"RawU1"],[3,"RawU24"],[3,"RawU2"],[4,"LittleEndian"],[3,"RawU16"],[3,"RawU4"],[3,"Angle"],[4,"AnchorPoint"],[4,"AnchorX"],[4,"AnchorY"],[15,"i32"],[15,"u32"],[15,"f32"],[8,"OriginDimensions"],[3,"Image"],[8,"ImageDrawable"],[3,"SubImage"],[3,"IntoPixels"],[3,"Translated"],[8,"Iterator"],[3,"RawDataSlice"],[3,"BitsIterator"],[3,"ByteIterator"],[3,"BytesIterator"],[3,"MockDisplay"],[8,"ColorMapping"],[8,"Fn"],[15,"char"],[3,"Rgb888"],[8,"Copy"],[3,"MonoTextStyleBuilder"],[3,"MonoTextStyle"],[3,"MonoFont"],[3,"DecorationDimensions"],[15,"str"],[4,"Baseline"],[3,"TextMetrics"],[4,"DecorationColor"],[3,"StrGlyphMapping"],[4,"Mapping"],[15,"u8"],[3,"Rgb555"],[3,"Bgr555"],[3,"Rgb565"],[3,"Bgr565"],[3,"Rgb666"],[3,"Bgr666"],[3,"Bgr888"],[4,"BinaryColor"],[3,"Gray2"],[3,"Gray4"],[3,"Gray8"],[15,"u16"],[8,"StyledDimensions"],[3,"Styled"],[3,"PrimitiveStyleBuilder"],[3,"PrimitiveStyle"],[4,"StrokeAlignment"],[8,"StyledDrawable"],[8,"OffsetOutline"],[8,"Sized"],[8,"Transform"],[3,"Arc"],[3,"Points"],[3,"StyledPixelsIterator"],[3,"Circle"],[3,"Points"],[3,"StyledPixelsIterator"],[3,"Ellipse"],[3,"Points"],[3,"StyledPixelsIterator"],[3,"Line"],[3,"Points"],[3,"StyledPixelsIterator"],[3,"Polyline"],[3,"Points"],[3,"StyledPixelsIterator"],[3,"Points"],[3,"StyledPixelsIterator"],[3,"Range"],[3,"CornerRadiiBuilder"],[3,"RoundedRectangle"],[3,"CornerRadii"],[3,"Points"],[3,"StyledPixelsIterator"],[3,"Sector"],[3,"Points"],[3,"StyledPixelsIterator"],[3,"Triangle"],[3,"Points"],[3,"StyledPixelsIterator"],[3,"TextStyleBuilder"],[4,"Alignment"],[8,"TextRenderer"],[3,"Text"],[3,"TextStyle"],[4,"LineHeight"],[8,"Drawable"],[8,"DrawTargetExt"],[8,"Dimensions"],[8,"AngleUnit"],[8,"GetPixel"],[8,"ImageDrawableExt"],[8,"PixelIteratorExt"],[8,"ContiguousIteratorExt"],[8,"GlyphMapping"],[8,"GrayColor"],[8,"RgbColor"],[8,"WebColors"],[8,"IntoStorage"],[8,"RawData"],[8,"ToBytes"],[8,"PointsIter"],[8,"ContainsPoint"],[8,"Primitive"],[8,"CharacterStyle"]]},\
"embedded_graphics_core":{"doc":"embedded-graphics-core contains the core components of …","t":"QIQDLLLLLLLLLKLALLLALALLLLAAALLLLLLLLLQIQLKLLEEENNNNNNNNNINIDNDNNNNLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLMLLLMLLLLQQIIKKKSSSDDDDESSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSDDDIISSSSNNISQDDDDIQSSISLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLSEIQEIDDDDDDDQILLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLKLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLCCCCCCCCCCCCCCCCQICKADDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLL","n":["Color","Drawable","Output","Pixel","az","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","clone","cmp","default","draw","draw","draw_target","eq","fmt","from","geometry","hash","image","into","overflowing_as","overflowing_cast_from","partial_cmp","pixelcolor","prelude","primitives","saturating_as","saturating_cast_from","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","wrapping_as","wrapping_cast_from","Color","DrawTarget","Error","clear","draw_iter","fill_contiguous","fill_solid","AnchorPoint","AnchorX","AnchorY","Bottom","BottomCenter","BottomLeft","BottomRight","Center","Center","Center","CenterLeft","CenterRight","Dimensions","Left","OriginDimensions","Point","Right","Size","Top","TopCenter","TopLeft","TopRight","abs","add","add","add","add_assign","add_assign","add_assign","az","az","az","az","az","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounding_box","cast_from","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone","clone","clone","cmp","cmp","cmp","cmp","cmp","component_div","component_div","component_max","component_max","component_min","component_min","component_mul","component_mul","default","default","div","div","div_assign","div_assign","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from_xy","hash","hash","hash","hash","hash","height","index","index","into","into","into","into","into","mul","mul","mul_assign","mul_assign","neg","new","new","new_equal","new_equal","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","saturating_add","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_sub","size","sub","sub","sub","sub_assign","sub_assign","sub_assign","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","width","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","x","x","x_axis","x_axis","y","y","y_axis","y_axis","zero","zero","Color","Color","GetPixel","ImageDrawable","draw","draw_sub_image","pixel","BLACK","BLACK","BLUE","Bgr555","Bgr565","Bgr666","Bgr888","BinaryColor","CSS_ALICE_BLUE","CSS_ANTIQUE_WHITE","CSS_AQUA","CSS_AQUAMARINE","CSS_AZURE","CSS_BEIGE","CSS_BISQUE","CSS_BLACK","CSS_BLANCHED_ALMOND","CSS_BLUE","CSS_BLUE_VIOLET","CSS_BROWN","CSS_BURLY_WOOD","CSS_CADET_BLUE","CSS_CHARTREUSE","CSS_CHOCOLATE","CSS_CORAL","CSS_CORNFLOWER_BLUE","CSS_CORNSILK","CSS_CRIMSON","CSS_CYAN","CSS_DARK_BLUE","CSS_DARK_CYAN","CSS_DARK_GOLDENROD","CSS_DARK_GRAY","CSS_DARK_GREEN","CSS_DARK_KHAKI","CSS_DARK_MAGENTA","CSS_DARK_OLIVE_GREEN","CSS_DARK_ORANGE","CSS_DARK_ORCHID","CSS_DARK_RED","CSS_DARK_SALMON","CSS_DARK_SEA_GREEN","CSS_DARK_SLATE_BLUE","CSS_DARK_SLATE_GRAY","CSS_DARK_TURQUOISE","CSS_DARK_VIOLET","CSS_DEEP_PINK","CSS_DEEP_SKY_BLUE","CSS_DIM_GRAY","CSS_DODGER_BLUE","CSS_FIRE_BRICK","CSS_FLORAL_WHITE","CSS_FOREST_GREEN","CSS_FUCHSIA","CSS_GAINSBORO","CSS_GHOST_WHITE","CSS_GOLD","CSS_GOLDENROD","CSS_GRAY","CSS_GREEN","CSS_GREEN_YELLOW","CSS_HONEYDEW","CSS_HOT_PINK","CSS_INDIAN_RED","CSS_INDIGO","CSS_IVORY","CSS_KHAKI","CSS_LAVENDER","CSS_LAVENDER_BLUSH","CSS_LAWN_GREEN","CSS_LEMON_CHIFFON","CSS_LIGHT_BLUE","CSS_LIGHT_CORAL","CSS_LIGHT_CYAN","CSS_LIGHT_GOLDENROD_YELLOW","CSS_LIGHT_GRAY","CSS_LIGHT_GREEN","CSS_LIGHT_PINK","CSS_LIGHT_SALMON","CSS_LIGHT_SEA_GREEN","CSS_LIGHT_SKY_BLUE","CSS_LIGHT_SLATE_GRAY","CSS_LIGHT_STEEL_BLUE","CSS_LIGHT_YELLOW","CSS_LIME","CSS_LIME_GREEN","CSS_LINEN","CSS_MAGENTA","CSS_MAROON","CSS_MEDIUM_AQUAMARINE","CSS_MEDIUM_BLUE","CSS_MEDIUM_ORCHID","CSS_MEDIUM_PURPLE","CSS_MEDIUM_SEA_GREEN","CSS_MEDIUM_SLATE_BLUE","CSS_MEDIUM_SPRING_GREEN","CSS_MEDIUM_TURQUOISE","CSS_MEDIUM_VIOLET_RED","CSS_MIDNIGHT_BLUE","CSS_MINT_CREAM","CSS_MISTY_ROSE","CSS_MOCCASIN","CSS_NAVAJO_WHITE","CSS_NAVY","CSS_OLD_LACE","CSS_OLIVE","CSS_OLIVE_DRAB","CSS_ORANGE","CSS_ORANGE_RED","CSS_ORCHID","CSS_PALE_GOLDENROD","CSS_PALE_GREEN","CSS_PALE_TURQUOISE","CSS_PALE_VIOLET_RED","CSS_PAPAYA_WHIP","CSS_PEACH_PUFF","CSS_PERU","CSS_PINK","CSS_PLUM","CSS_POWDER_BLUE","CSS_PURPLE","CSS_REBECCAPURPLE","CSS_RED","CSS_ROSY_BROWN","CSS_ROYAL_BLUE","CSS_SADDLE_BROWN","CSS_SALMON","CSS_SANDY_BROWN","CSS_SEASHELL","CSS_SEA_GREEN","CSS_SIENNA","CSS_SILVER","CSS_SKY_BLUE","CSS_SLATE_BLUE","CSS_SLATE_GRAY","CSS_SNOW","CSS_SPRING_GREEN","CSS_STEEL_BLUE","CSS_TAN","CSS_TEAL","CSS_THISTLE","CSS_TOMATO","CSS_TURQUOISE","CSS_VIOLET","CSS_WHEAT","CSS_WHITE","CSS_WHITE_SMOKE","CSS_YELLOW","CSS_YELLOW_GREEN","CYAN","GREEN","Gray2","Gray4","Gray8","GrayColor","IntoStorage","MAGENTA","MAX_B","MAX_G","MAX_R","Off","On","PixelColor","RED","Raw","Rgb555","Rgb565","Rgb666","Rgb888","RgbColor","Storage","WHITE","WHITE","WebColors","YELLOW","az","az","az","az","az","az","az","az","az","az","az","az","b","b","b","b","b","b","b","b","b","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","default","default","default","default","default","default","default","default","default","default","default","default","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","g","g","g","g","g","g","g","g","g","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","into","into","into","into","into","into","into","into","into","into","into","into","into_storage","into_storage","into_storage","into_storage","into_storage","into_storage","into_storage","into_storage","into_storage","into_storage","into_storage","into_storage","into_storage","invert","is_off","is_on","luma","luma","luma","luma","new","new","new","new","new","new","new","new","new","new","new","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","r","r","r","r","r","r","r","r","r","raw","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","BITS_PER_PIXEL","BigEndian","ByteOrder","Bytes","LittleEndian","RawData","RawU1","RawU16","RawU2","RawU24","RawU32","RawU4","RawU8","Storage","ToBytes","az","az","az","az","az","az","az","az","az","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone","clone","clone","clone","clone","clone","clone","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","default","default","default","default","default","default","default","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","hash","hash","hash","hash","hash","hash","hash","hash","hash","into","into","into","into","into","into","into","into","into","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","new","new","new","new","new","new","new","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","Dimensions","DrawTarget","Drawable","GrayColor","ImageDrawable","IntoStorage","OriginDimensions","Pixel","PixelColor","Point","PointsIter","RawData","RgbColor","Size","WebColors","_","Iter","PointsIter","Rectangle","points","rectangle","Points","Rectangle","anchor_point","anchor_x","anchor_y","az","az","borrow","borrow","borrow_mut","borrow_mut","bottom_right","bounding_box","cast_from","cast_from","center","checked_as","checked_as","checked_cast_from","checked_cast_from","clone","clone","cmp","columns","contains","default","empty","eq","eq","fmt","fmt","from","from","hash","hash","intersection","into","into","into_iter","is_zero_sized","new","next","offset","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","partial_cmp","points","resized","resized_height","resized_width","rows","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","size","top_left","try_from","try_from","try_into","try_into","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","with_center","with_corners","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","zero"],"q":[[0,"embedded_graphics_core"],[38,"embedded_graphics_core::draw_target"],[45,"embedded_graphics_core::geometry"],[258,"embedded_graphics_core::image"],[265,"embedded_graphics_core::pixelcolor"],[956,"embedded_graphics_core::pixelcolor::raw"],[1269,"embedded_graphics_core::prelude"],[1285,"embedded_graphics_core::primitives"],[1290,"embedded_graphics_core::primitives::rectangle"]],"d":["The pixel color type.","Marks an object as “drawable”. Must be implemented for …","The return type of the <code>draw</code> method.","A single pixel.","","","","","","","","","","Draw the graphics object using the supplied DrawTarget.","","A target for embedded-graphics drawing operations.","","","Returns the argument unchanged.","Geometry module.","","Image drawable.","Calls <code>U::from(self)</code>.","","","","Pixel color types.","Prelude","Core primitives.","","","","","","","","","","The pixel color type the targetted display supports.","A target for embedded-graphics drawing operations.","Error type to return when a drawing operation fails.","Fill the entire display with a solid color.","Draw individual pixels to the display without a defined …","Fill a given area with an iterator providing a contiguous …","Fill a given area with a solid color.","Anchor point.","X axis anchor point.","Y axis anchor point.","Bottom.","Bottom center.","Bottom left.","Bottom right.","Center.","Center.","Center.","Center left.","Center right.","Adds the ability to get the bounding box of an item.","Left.","Dimensions with <code>top_left</code> of the bounding box at <code>(0, 0)</code>.","2D point.","Right.","2D size.","Top.","Top center.","Top left.","Top right.","Remove the sign from a coordinate","Offsets a point by adding a size.","","","Offsets a point by adding a size.","","","","","","","","","","","","","","","","","","Returns the bounding box.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the componentwise division of two <code>Points</code>s.","Returns the componentwise division of two <code>Size</code>s.","Returns the componentwise maximum of two <code>Point</code>s","Returns the componentwise maximum of two <code>Size</code>s.","Returns the componentwise minimum of two <code>Point</code>s","Returns the componentwise minimum of two <code>Size</code>s.","Returns the componentwise multiplication of two <code>Point</code>s.","Returns the componentwise multiplication of two <code>Size</code>s.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates an anchor point from an X and Y component.","","","","","","The height.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Creates a point from  X and Y coordinates.","Creates a size from a width and a height.","Creates a point with X and Y values set to an equal value.","Creates a size with width and height set to an equal value.","","","","","","","","","","","","","","","","Saturating addition.","","","","","","","","","","","Saturating subtraction.","Returns the size of the bounding box.","","Offsets a point by subtracting a size.","","Offsets a point by subtracting a size.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The width.","","","","","","","","","","","Returns the X axis component.","The x coordinate.","Returns a point with equal <code>x</code> value and <code>y</code> set to <code>0</code>.","Returns a size with equal <code>width</code> value and <code>height</code> set to <code>0</code>.","Returns the Y axis component.","The y coordinate.","Returns a point with equal <code>y</code> value and <code>x</code> set to <code>0</code>.","Returns a size with equal <code>height</code> value and <code>width</code> set to <code>0</code>.","Creates a point with X and Y equal to zero.","Creates a size with width and height equal to zero.","The color type.","The color type.","Pixel getter.","Image drawable.","Draws the entire image to the target.","Draws a part of the image to the target.","Gets the color of a pixel.","Black color (0% luma).","Black color (R: 0%, G: 0%, B: 0%)","Blue color (R: 0%, G: 0%, B: 100%)","Bgr555 color.","Bgr565 color.","Bgr666 color.","Bgr888 color.","Binary color."," Alice Blue"," Antique White"," Aqua"," Aquamarine"," Azure"," Beige"," Bisque"," Black"," Blanched Almond"," Blue"," Blue Violet"," Brown"," Burly Wood"," Cadet Blue"," Chartreuse"," Chocolate"," Coral"," Cornflower Blue"," Cornsilk"," Crimson"," Cyan"," Dark Blue"," Dark Cyan"," Dark Goldenrod"," Dark Gray"," Dark Green"," Dark Khaki"," Dark Magenta"," Dark Olive Green"," Dark Orange"," Dark Orchid"," Dark Red"," Dark Salmon"," Dark Sea Green"," Dark Slate Blue"," Dark Slate Gray"," Dark Turquoise"," Dark Violet"," Deep Pink"," Deep Sky Blue"," Dim Gray"," Dodger Blue"," Fire Brick"," Floral White"," Forest Green"," Fuchsia"," Gainsboro"," Ghost White"," Gold"," Goldenrod"," Gray"," Green"," Green Yellow"," Honeydew"," Hot Pink"," Indian Red"," Indigo"," Ivory"," Khaki"," Lavender"," Lavender Blush"," Lawn Green"," Lemon Chiffon"," Light Blue"," Light Coral"," Light Cyan"," Light Goldenrod Yellow"," Light Gray"," Light Green"," Light Pink"," Light Salmon"," Light Sea Green"," Light Sky Blue"," Light Slate Gray"," Light Steel Blue"," Light Yellow"," Lime"," Lime Green"," Linen"," Magenta"," Maroon"," Medium Aquamarine"," Medium Blue"," Medium Orchid"," Medium Purple"," Medium Sea Green"," Medium Slate Blue"," Medium Spring Green"," Medium Turquoise"," Medium Violet Red"," Midnight Blue"," Mint Cream"," Misty Rose"," Moccasin"," Navajo White"," Navy"," Old Lace"," Olive"," Olive Drab"," Orange"," Orange Red"," Orchid"," Pale Goldenrod"," Pale Green"," Pale Turquoise"," Pale Violet Red"," Papaya Whip"," Peach Puff"," Peru"," Pink"," Plum"," Powder Blue"," Purple"," Rebeccapurple"," Red"," Rosy Brown"," Royal Blue"," Saddle Brown"," Salmon"," Sandy Brown"," Seashell"," Sea Green"," Sienna"," Silver"," Sky Blue"," Slate Blue"," Slate Gray"," Snow"," Spring Green"," Steel Blue"," Tan"," Teal"," Thistle"," Tomato"," Turquoise"," Violet"," Wheat"," White"," White Smoke"," Yellow"," Yellow Green","Cyan color (R: 0%, G: 100%, B: 100%)","Green color (R: 0%, G: 100%, B: 0%)","2 bit grayscale color.","4 bit grayscale color.","8 bit grayscale color.","Grayscale color.","Convert a <code>PixelColor</code> into its underlying storage type","Magenta color (R: 100%, G: 0%, B: 100%)","The maximum value in the blue channel.","The maximum value in the green channel.","The maximum value in the red channel.","Inactive pixel.","Active pixel.","Pixel color trait.","Red color (R: 100%, G: 0%, B: 0%)","Raw data type.","Rgb555 color.","Rgb565 color.","Rgb666 color.","Rgb888 color.","RGB color.","The underlying storage type for the pixel color","White color (100% luma).","White color (R: 100%, G: 100%, B: 100%)","Named colors as defined in the CSS specification.","Yellow color (R: 100%, G: 100%, B: 0%)","","","","","","","","","","","","","Returns the blue channel value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Returns the green channel value.","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert the <code>PixelColor</code> into its raw storage form","","","","","","","","","","","","","Inverts the color.","Returns <code>true</code> if this color is <code>Off</code>.","Returns <code>true</code> if this color is <code>On</code>.","Returns the luma channel value.","","","","Creates a new grayscale color.","Creates a new grayscale color.","Creates a new grayscale color.","Creates a new Rgb555 color. Too large channel values will …","Creates a new Bgr555 color. Too large channel values will …","Creates a new Rgb565 color. Too large channel values will …","Creates a new Bgr565 color. Too large channel values will …","Creates a new Rgb666 color. Too large channel values will …","Creates a new Bgr666 color. Too large channel values will …","Creates a new Rgb888 color. Too large channel values will …","Creates a new Bgr888 color. Too large channel values will …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the red channel value.","","","","","","","","","Raw color types.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Bits per pixel.","Big endian byte order marker.","Raw data byte order.","Return type of methods in this trait.","Little endian byte order marker.","Trait implemented by all <code>RawUx</code> types.","1 bit per pixel raw data.","16 bits per pixel raw data.","2 bits per pixel raw data.","24 bits per pixel raw data.","32 bits per pixel raw data.","4 bits per pixel raw data.","8 bits per pixel raw data.","Storage type.","Trait to convert colors into a byte array.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Converts a <code>u32</code> into a <code>RawData</code> type.","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts this raw data into the storage type.","","","","","","","","Creates a new color from the least significant 1 bit of …","Creates a new color from the least significant 2 bits of …","Creates a new color from the least significant 4 bits of …","Creates a new color from the least significant 8 bits of …","Creates a new color from the least significant 16 bits of …","Creates a new color from the least significant 24 bits of …","Creates a new color from the least significant 32 bits of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts a color into a byte array with big endian byte …","","","","","","","","Converts a color into a byte array with little endian byte …","","","","","","","","Converts a color into a byte array with native byte order.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Iterator over all points inside the primitive.","Create an iterator over all points in the primitive.","","Returns an iterator over all points inside the primitive.","The rectangle primitive.","Iterator over all points inside the rectangle.","Rectangle primitive","Returns an anchor point.","Returns the X coordinate of a given anchor edge of the …","Returns the Y coordinate of a given anchor edge of the …","","","","","","","Returns the bottom right corner of this rectangle.","","","","Returns the center of this rectangle.","","","","","","","","Returns the range of X coordinates in this rectangle.","Return whether the rectangle contains a given point.","","Create a points iterator that returns no items.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns a new <code>Rectangle</code> containing the intersection of <code>self</code>…","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns <code>true</code> is the rectangle is zero sized.","Creates a new rectangle from the top left point and the …","","Offset the rectangle by a given value.","","","","","","","Returns a resized copy of this rectangle.","Returns a new rectangle with the given height, resized …","Returns a new rectangle with the given width, resized …","Returns the range of Y coordinates in this rectangle.","","","","","Size of the rectangle.","Top left point of the rectangle.","","","","","","","","","","","Creates a new rectangle from the center point and the size.","Creates a new rectangle from two corners.","","","","","Returns a zero sized rectangle."],"i":[54,0,54,0,4,4,4,4,4,4,4,4,4,54,4,0,4,4,4,0,4,0,4,4,4,4,0,0,0,4,4,4,4,4,4,4,4,4,8,0,8,8,8,8,8,0,0,0,25,23,23,23,23,24,25,23,23,0,24,0,0,24,0,25,23,23,23,21,21,21,22,21,21,22,21,22,23,24,25,21,22,23,24,25,21,22,23,24,25,55,21,22,23,24,25,21,22,23,24,25,21,22,23,24,25,21,22,23,24,25,21,22,23,24,25,21,22,21,22,21,22,21,22,21,22,21,22,21,22,21,22,23,24,25,21,21,22,22,23,24,25,21,21,21,21,22,22,22,22,23,24,25,23,21,22,23,24,25,22,21,22,21,22,23,24,25,21,22,21,22,21,21,22,21,22,21,22,23,24,25,21,22,23,24,25,21,22,23,24,25,22,21,22,23,24,25,21,22,23,24,25,22,56,21,21,22,21,21,22,21,21,21,21,22,23,24,25,21,22,23,24,25,21,22,23,24,25,21,22,23,24,25,21,22,23,24,25,22,21,22,23,24,25,21,22,23,24,25,23,21,21,22,23,21,21,22,21,22,57,58,0,0,57,57,58,59,60,60,0,0,0,0,0,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,60,60,0,0,0,0,0,60,60,60,60,38,38,0,60,2,0,0,0,0,0,62,59,60,0,60,38,39,40,41,30,31,32,33,34,35,36,37,60,30,31,32,33,34,35,36,37,38,39,40,41,30,31,32,33,34,35,36,37,38,39,40,41,30,31,32,33,34,35,36,37,38,39,40,41,30,31,32,33,34,35,36,37,38,39,40,41,30,31,32,33,34,35,36,37,38,39,40,41,30,31,32,33,34,35,36,37,38,39,40,41,30,31,32,33,34,35,36,37,38,39,40,41,30,31,32,33,34,35,36,37,38,39,40,41,30,31,32,33,34,35,36,37,38,39,40,41,30,31,32,33,34,35,36,37,38,39,40,41,30,31,32,33,34,35,36,37,38,38,38,38,38,38,38,38,38,38,38,38,38,38,39,39,39,39,39,39,39,39,39,39,39,39,39,40,40,40,40,40,40,40,40,40,40,40,40,40,41,41,41,41,41,41,41,41,41,41,41,41,41,30,30,30,30,30,30,30,30,30,30,30,30,30,31,31,31,31,31,31,31,31,31,31,31,31,31,32,32,32,32,32,32,32,32,32,32,32,32,32,33,33,33,33,33,33,33,33,33,33,33,33,33,34,34,34,34,34,34,34,34,34,34,34,34,34,35,35,35,35,35,35,35,35,35,35,35,35,35,36,36,36,36,36,36,36,36,36,36,36,36,36,37,37,37,37,37,37,37,37,37,37,37,37,37,60,30,31,32,33,34,35,36,37,38,39,40,41,30,31,32,33,34,35,36,37,38,39,40,41,30,31,32,33,34,35,36,37,62,38,39,40,41,30,31,32,33,34,35,36,37,38,38,38,59,39,40,41,39,40,41,30,31,32,33,34,35,36,37,38,39,40,41,30,31,32,33,34,35,36,37,38,39,40,41,30,31,32,33,34,35,36,37,38,39,40,41,30,31,32,33,34,35,36,37,60,30,31,32,33,34,35,36,37,0,38,39,40,41,30,31,32,33,34,35,36,37,38,39,40,41,30,31,32,33,34,35,36,37,38,39,40,41,30,31,32,33,34,35,36,37,38,39,40,41,30,31,32,33,34,35,36,37,38,39,40,41,30,31,32,33,34,35,36,37,38,39,40,41,30,31,32,33,34,35,36,37,38,39,40,41,30,31,32,33,34,35,36,37,38,39,40,41,30,31,32,33,34,35,36,37,38,39,40,41,30,31,32,33,34,35,36,37,63,0,0,64,0,0,0,0,0,0,0,0,0,63,0,42,43,44,45,46,47,48,49,50,42,43,44,45,46,47,48,49,50,42,43,44,45,46,47,48,49,50,42,43,44,45,46,47,48,49,50,42,43,44,45,46,47,48,49,50,42,43,44,45,46,47,48,49,50,42,43,44,45,46,47,48,49,50,42,43,44,45,46,47,48,49,50,42,43,44,45,46,47,48,42,43,44,45,46,47,48,49,50,42,43,44,45,46,47,48,49,50,42,42,42,43,43,43,44,44,44,45,45,45,46,46,46,46,46,46,47,47,47,47,47,47,48,48,49,50,63,42,43,44,45,46,47,48,42,43,44,45,46,47,48,49,50,42,43,44,45,46,47,48,49,50,63,42,43,44,45,46,47,48,42,43,44,45,46,47,48,42,43,44,45,46,47,48,49,50,42,43,44,45,46,47,48,49,50,42,43,44,45,46,47,48,49,50,42,43,44,45,46,47,48,49,50,42,43,44,45,46,47,48,49,50,64,42,43,44,45,46,47,48,64,42,43,44,45,46,47,48,64,42,43,44,45,46,47,48,42,43,44,45,46,47,48,49,50,42,43,44,45,46,47,48,49,50,42,43,44,45,46,47,48,49,50,42,43,44,45,46,47,48,49,50,42,43,44,45,46,47,48,49,50,42,43,44,45,46,47,48,49,50,42,43,44,45,46,47,48,49,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,0,0,65,0,0,0,20,20,20,52,20,52,20,52,20,20,20,52,20,20,52,20,52,20,52,20,20,20,20,20,52,52,20,52,20,52,20,52,20,20,52,20,52,20,20,52,20,52,20,52,20,20,20,20,20,20,20,52,20,52,20,20,20,52,20,52,20,52,20,52,20,52,20,20,20,52,20,52,20,20],"f":[0,0,0,0,[[]],[[]],[[]],[[]],[[],1],[[],1],[[[4,[[0,[2,3]]]]],[[4,[[0,[2,3]]]]]],[[[4,[[0,[2,5]]]],[4,[[0,[2,5]]]]],6],[[],[[4,[[0,[2,7]]]]]],[8,9],[[[4,[2]],8],9],0,[[[4,[[0,[2,10]]]],[4,[[0,[2,10]]]]],11],[[[4,[[0,[2,12]]]],13],14],[[]],0,[[[4,[[0,[2,15]]]],16]],0,[[]],[[]],[[]],[[[4,[[0,[2,17]]]],[4,[[0,[2,17]]]]],[[1,[6]]]],0,0,0,[[]],[[]],[[],9],[[],9],[[],18],[[]],[[]],[[]],[[]],0,0,0,[[],9],[19,9],[[20,19],9],[20,9],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[21,21],[[21,22],21],[[21,21],21],[[22,22],22],[[21,22]],[[21,21]],[[22,22]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],20],[[]],[[]],[[]],[[]],[[]],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[21,21],[22,22],[23,23],[24,24],[25,25],[[21,21],6],[[22,22],6],[[23,23],6],[[24,24],6],[[25,25],6],[[21,21],21],[[22,22],22],[[21,21],21],[[22,22],22],[[21,21],21],[[22,22],22],[[21,21],21],[[22,22],22],[[],21],[[],22],[[21,26],21],[[22,27],22],[[21,26]],[[22,27]],[[21,21],11],[[22,22],11],[[23,23],11],[[24,24],11],[[25,25],11],[[21,13],14],[[21,13],14],[[22,13],14],[[22,13],14],[[23,13],14],[[24,13],14],[[25,13],14],[[],21],[[],21],[[],21],[[]],[[],22],[[],22],[[],22],[[]],[[]],[[]],[[]],[[24,25],23],[[21,16]],[[22,16]],[[23,16]],[[24,16]],[[25,16]],0,[[21,28],26],[[22,28],27],[[]],[[]],[[]],[[]],[[]],[[21,26],21],[[22,27],22],[[21,26]],[[22,27]],[21],[[26,26],21],[[27,27],22],[26,21],[27,22],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[21,21],[[1,[6]]]],[[22,22],[[1,[6]]]],[[23,23],[[1,[6]]]],[[24,24],[[1,[6]]]],[[25,25],[[1,[6]]]],[[22,22],22],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[22,22],22],[[],22],[[21,21],21],[[21,22],21],[[22,22],22],[[21,22]],[[21,21]],[[22,22]],[[],[[9,[21]]]],[[],[[9,[21]]]],[[],[[9,[21]]]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],18],[[],18],[[],18],[[],18],[[],18],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[23,24],0,[21,21],[22,22],[23,25],0,[21,21],[22,22],[[],21],[[],22],0,0,0,0,[8,9],[[8,20],9],[21,1],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],29],[30,29],[31,29],[32,29],[33,29],[34,29],[35,29],[36,29],[37,29],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[38,38],[39,39],[40,40],[41,41],[30,30],[31,31],[32,32],[33,33],[34,34],[35,35],[36,36],[37,37],[[38,38],6],[[39,39],6],[[40,40],6],[[41,41],6],[[30,30],6],[[31,31],6],[[32,32],6],[[33,33],6],[[34,34],6],[[35,35],6],[[36,36],6],[[37,37],6],[[],38],[[],39],[[],40],[[],41],[[],30],[[],31],[[],32],[[],33],[[],34],[[],35],[[],36],[[],37],[[38,38],11],[[39,39],11],[[40,40],11],[[41,41],11],[[30,30],11],[[31,31],11],[[32,32],11],[[33,33],11],[[34,34],11],[[35,35],11],[[36,36],11],[[37,37],11],[[38,13],14],[[39,13],14],[[40,13],14],[[41,13],14],[[30,13],14],[[31,13],14],[[32,13],14],[[33,13],14],[[34,13],14],[[35,13],14],[[36,13],14],[[37,13],14],[41,38],[37,38],[30,38],[40,38],[11,38],[35,38],[39,38],[34,38],[[]],[31,38],[42,38],[33,38],[32,38],[36,38],[41,39],[36,39],[32,39],[40,39],[43,39],[38,39],[31,39],[35,39],[34,39],[30,39],[33,39],[37,39],[[]],[44,40],[35,40],[32,40],[31,40],[39,40],[38,40],[36,40],[30,40],[41,40],[34,40],[[]],[37,40],[33,40],[32,41],[38,41],[45,41],[39,41],[31,41],[[]],[36,41],[40,41],[35,41],[34,41],[33,41],[37,41],[30,41],[40,30],[[]],[38,30],[31,30],[35,30],[37,30],[32,30],[36,30],[41,30],[34,30],[46,30],[39,30],[33,30],[32,31],[41,31],[38,31],[36,31],[37,31],[46,31],[34,31],[35,31],[33,31],[39,31],[40,31],[[]],[30,31],[37,32],[36,32],[33,32],[35,32],[31,32],[30,32],[46,32],[34,32],[39,32],[[]],[38,32],[41,32],[40,32],[39,33],[30,33],[[]],[38,33],[46,33],[36,33],[32,33],[41,33],[34,33],[35,33],[31,33],[40,33],[37,33],[40,34],[39,34],[35,34],[30,34],[37,34],[36,34],[32,34],[41,34],[[]],[38,34],[47,34],[31,34],[33,34],[38,35],[39,35],[31,35],[33,35],[32,35],[36,35],[40,35],[34,35],[37,35],[30,35],[47,35],[41,35],[[]],[38,36],[47,36],[30,36],[40,36],[35,36],[32,36],[41,36],[33,36],[[]],[37,36],[31,36],[39,36],[34,36],[34,37],[33,37],[35,37],[40,37],[30,37],[39,37],[36,37],[32,37],[[]],[47,37],[41,37],[38,37],[31,37],[[],29],[30,29],[31,29],[32,29],[33,29],[34,29],[35,29],[36,29],[37,29],[[38,16]],[[39,16]],[[40,16]],[[41,16]],[[30,16]],[[31,16]],[[32,16]],[[33,16]],[[34,16]],[[35,16]],[[36,16]],[[37,16]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[38,38],[38,11],[38,11],[[],29],[39,29],[40,29],[41,29],[29,39],[29,40],[29,41],[[29,29,29],30],[[29,29,29],31],[[29,29,29],32],[[29,29,29],33],[[29,29,29],34],[[29,29,29],35],[[29,29,29],36],[[29,29,29],37],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[38,38],[[1,[6]]]],[[39,39],[[1,[6]]]],[[40,40],[[1,[6]]]],[[41,41],[[1,[6]]]],[[30,30],[[1,[6]]]],[[31,31],[[1,[6]]]],[[32,32],[[1,[6]]]],[[33,33],[[1,[6]]]],[[34,34],[[1,[6]]]],[[35,35],[[1,[6]]]],[[36,36],[[1,[6]]]],[[37,37],[[1,[6]]]],[[],29],[30,29],[31,29],[32,29],[33,29],[34,29],[35,29],[36,29],[37,29],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[42,42],[43,43],[44,44],[45,45],[46,46],[47,47],[48,48],[49,49],[50,50],[[42,42],6],[[43,43],6],[[44,44],6],[[45,45],6],[[46,46],6],[[47,47],6],[[48,48],6],[[49,49],6],[[50,50],6],[[],42],[[],43],[[],44],[[],45],[[],46],[[],47],[[],48],[[42,42],11],[[43,43],11],[[44,44],11],[[45,45],11],[[46,46],11],[[47,47],11],[[48,48],11],[[49,49],11],[[50,50],11],[[42,13],14],[[43,13],14],[[44,13],14],[[45,13],14],[[46,13],14],[[47,13],14],[[48,13],14],[[49,13],14],[[50,13],14],[29,42],[38,42],[[]],[29,43],[[]],[39,43],[40,44],[29,44],[[]],[[]],[41,45],[29,45],[51,46],[30,46],[32,46],[[]],[31,46],[33,46],[[]],[37,47],[35,47],[36,47],[27,47],[34,47],[27,48],[[]],[[]],[[]],[27],[27,42],[27,43],[27,44],[27,45],[27,46],[27,47],[27,48],[[42,16]],[[43,16]],[[44,16]],[[45,16]],[[46,16]],[[47,16]],[[48,16]],[[49,16]],[[50,16]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[42],[43],[44],[45],[46],[47],[48],[29,42],[29,43],[29,44],[29,45],[51,46],[27,47],[27,48],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[42,42],[[1,[6]]]],[[43,43],[[1,[6]]]],[[44,44],[[1,[6]]]],[[45,45],[[1,[6]]]],[[46,46],[[1,[6]]]],[[47,47],[[1,[6]]]],[[48,48],[[1,[6]]]],[[49,49],[[1,[6]]]],[[50,50],[[1,[6]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[42],[43],[44],[45],[46],[47],[48],[[]],[42],[43],[44],[45],[46],[47],[48],[[]],[42],[43],[44],[45],[46],[47],[48],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],0,0,0,[[20,23],21],[[20,24],26],[[20,25],26],[[]],[[]],[[]],[[]],[[]],[[]],[20,[[1,[21]]]],[20,20],[[]],[[]],[20,21],[[],1],[[],1],[[],1],[[],1],[52,52],[20,20],[[20,20],6],[20,[[53,[26]]]],[[20,21],11],[[],20],[[],52],[[52,52],11],[[20,20],11],[[52,13],14],[[20,13],14],[[]],[[]],[[52,16]],[[20,16]],[[20,20],20],[[]],[[]],[[]],[20,11],[[21,22],20],[52,1],[[20,26],20],[[]],[[]],[[]],[[]],[[20,20],[[1,[6]]]],[20],[[20,22,23],20],[[20,27,25],20],[[20,27,24],20],[20,[[53,[26]]]],[[]],[[]],[[]],[[]],0,0,[[],9],[[],9],[[],9],[[],9],[[],18],[[],18],[[]],[[]],[[]],[[]],[[21,22],20],[[21,21],20],[[]],[[]],[[]],[[]],[[],20]],"c":[],"p":[[4,"Option"],[8,"PixelColor"],[8,"Clone"],[3,"Pixel"],[8,"Ord"],[4,"Ordering"],[8,"Default"],[8,"DrawTarget"],[4,"Result"],[8,"PartialEq"],[15,"bool"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[8,"Hash"],[8,"Hasher"],[8,"PartialOrd"],[3,"TypeId"],[8,"IntoIterator"],[3,"Rectangle"],[3,"Point"],[3,"Size"],[4,"AnchorPoint"],[4,"AnchorX"],[4,"AnchorY"],[15,"i32"],[15,"u32"],[15,"usize"],[15,"u8"],[3,"Rgb555"],[3,"Bgr555"],[3,"Rgb565"],[3,"Bgr565"],[3,"Rgb666"],[3,"Bgr666"],[3,"Rgb888"],[3,"Bgr888"],[4,"BinaryColor"],[3,"Gray2"],[3,"Gray4"],[3,"Gray8"],[3,"RawU1"],[3,"RawU2"],[3,"RawU4"],[3,"RawU8"],[3,"RawU16"],[3,"RawU24"],[3,"RawU32"],[4,"LittleEndian"],[4,"BigEndian"],[15,"u16"],[3,"Points"],[3,"Range"],[8,"Drawable"],[8,"Dimensions"],[8,"OriginDimensions"],[8,"ImageDrawable"],[8,"GetPixel"],[8,"GrayColor"],[8,"RgbColor"],[8,"WebColors"],[8,"IntoStorage"],[8,"RawData"],[8,"ToBytes"],[8,"PointsIter"]]},\
"float_cmp":{"doc":"float-cmp","t":"IIIDDQQQIKOLLKLLLLLLOLLLLLLLLLLMMLLLLLLLLKKLLLLLLKLLMMLL","n":["ApproxEq","ApproxEqRatio","ApproxEqUlps","F32Margin","F64Margin","Flt","Margin","U","Ulps","approx_eq","approx_eq","approx_eq_ratio","approx_eq_ratio","approx_eq_ulps","approx_ne","approx_ne","approx_ne_ratio","approx_ne_ratio","approx_ne_ulps","approx_ne_ulps","assert_approx_eq","borrow","borrow","borrow_mut","borrow_mut","clone","clone","default","default","epsilon","epsilon","epsilon","epsilon","fmt","fmt","from","from","from","from","into","into","next","prev","try_from","try_from","try_into","try_into","type_id","type_id","ulps","ulps","ulps","ulps","ulps","zero","zero"],"q":[[0,"float_cmp"]],"d":["A trait for approximate equality comparisons.","ApproxEqRatio is a trait for approximate equality …","ApproxEqUlps is a trait for approximate equality …","This type defines a margin within two <code>f32</code> values might be …","This type defines a margin within two <code>f64</code> values might be …","","This type type defines a margin within which two values …","","","This method tests that the <code>self</code> and <code>other</code> values are equal …","","This method tests if <code>self</code> and <code>other</code> are nearly equal by …","This method tests if <code>self</code> and <code>other</code> are nearly equal by …","This method tests for <code>self</code> and <code>other</code> values to be …","This method tests that the <code>self</code> and <code>other</code> values are not …","This method tests that the <code>self</code> and <code>other</code> values are not …","This method tests if <code>self</code> and <code>other</code> are not nearly equal …","This method tests if <code>self</code> and <code>other</code> are not nearly equal …","This method tests for <code>self</code> and <code>other</code> values to be not …","This method tests for <code>self</code> and <code>other</code> values to be not …","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The next representable number above this one","The previous representable number below this one","","","","","","","The number of representable values or ULPs (Units of Least …","","","","","",""],"i":[0,0,0,0,0,13,14,15,0,14,0,16,16,13,14,14,16,16,13,13,0,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,3,4,4,3,4,15,15,3,4,3,4,3,4,15,3,4,3,4,3,4],"f":[0,0,0,0,0,0,0,0,0,[1,2],0,[[],2],[[],2],[[],2],[1,2],[1,2],[[],2],[[],2],[[],2],[[],2],0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[],3],[[],4],[[3,5],3],[[4,6],4],0,0,[[3,7],8],[[4,7],8],[[],3],[[]],[[]],[[],4],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[]],[[3,11],3],[[4,12],4],0,0,[[],3],[[],4]],"c":[],"p":[[8,"Into"],[15,"bool"],[3,"F32Margin"],[3,"F64Margin"],[15,"f32"],[15,"f64"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"],[15,"i32"],[15,"i64"],[8,"ApproxEqUlps"],[8,"ApproxEq"],[8,"Ulps"],[8,"ApproxEqRatio"]]},\
"micromath":{"doc":"Embedded-friendly (i.e. <code>#![no_std]</code>) math library featuring …","t":"SSDISSSSSSSSSSSSSSKLKLLLLKLKLKLKKLLLKLLKLKLLLLLLKLLLKLKLLLLLKLLLLLLLLLKLLKLKLLLLLLKLKLKLKLLLLLLLLKLKLLLLLLKLKLKLKLLLLLLKLLKLLLL","n":["DIGITS","EPSILON","F32","F32Ext","INFINITY","MANTISSA_DIGITS","MAX","MAX_10_EXP","MAX_EXP","MIN","MIN_10_EXP","MIN_EXP","MIN_POSITIVE","NAN","NEG_INFINITY","ONE","RADIX","ZERO","abs","abs","acos","add","add","add_assign","add_assign","asin","asin","atan","atan","atan2","atan2","atan2_norm","atan_norm","atan_norm","borrow","borrow_mut","ceil","ceil","clone","copysign","copysign","cos","cos","default","div","div","div_assign","div_assign","div_euclid","div_euclid","eq","eq","exp","exp","floor","floor","fmt","fmt","fmt","fmt","fract","fract","from","from","from","from","from","from","from_bits","from_str","hypot","hypot","into","inv","inv","invsqrt","invsqrt","is_finite","is_infinite","is_nan","is_sign_negative","is_sign_positive","ln","ln","log","log","log10","log10","log2","log2","mul","mul","mul_assign","mul_assign","neg","partial_cmp","partial_cmp","powf","powf","powi","powi","product","rem","rem","rem_assign","rem_assign","rem_euclid","rem_euclid","round","round","sin","sin","sqrt","sqrt","sub","sub","sub_assign","sub_assign","sum","tan","tan","to_bits","trunc","trunc","try_from","try_into","type_id"],"q":[[0,"micromath"]],"d":["Approximate number of significant digits in base 10.","Machine epsilon value for <code>f32</code>.","32-bit floating point wrapper which implements fast …","<code>f32</code> extension providing various arithmetic approximations …","Infinity (∞).","Number of significant digits in base 2.","Largest finite <code>f32</code> value.","Maximum possible power of 10 exponent.","Maximum possible power of 2 exponent.","Smallest finite <code>f32</code> value.","Minimum possible normal power of 10 exponent.","One greater than the minimum possible normal power of 2 …","Smallest positive normal <code>f32</code> value.","Not a Number (NaN).","Negative infinity (−∞).","The value <code>1.0</code>.","The radix or base of the internal representation of <code>f32</code>.","The value <code>0.0</code>.","Compute absolute value with a constant-time, …","Computes the absolute value of <code>self</code>.","Approximates <code>acos(x)</code> in radians in the range <code>[0, pi]</code>","","","","","Approximates <code>asin(x)</code> in radians in the range <code>[-pi/2, pi/2]</code>.","Computes <code>asin(x)</code> approximation in radians in the range …","Approximates <code>atan(x)</code> in radians with a maximum error of …","Approximates <code>atan(x)</code> approximation in radians with a …","Approximates the four quadrant arctangent <code>atan2(x)</code> in …","Approximates the four quadrant arctangent of <code>self</code> (<code>y</code>) and …","Approximates the four quadrant arctangent. Normalized to …","Approximates <code>atan(x)</code> normalized to the <code>[−1,1]</code> range with …","Approximates <code>atan(x)</code> normalized to the <code>[−1,1]</code> range with …","","","Approximates floating point ceiling.","Returns the smallest integer greater than or equal to a …","","Copies the sign from one number to another and returns it.","Returns a number composed of the magnitude of <code>self</code> and the …","Approximates cosine in radians with a maximum error of …","Approximates <code>cos(x)</code> in radians with a maximum error of …","","","","","","Calculates Euclidean division, the matching method for …","Calculates Euclidean division, the matching method for …","","","Approximates <code>e^x</code>.","Returns <code>e^(self)</code>, (the exponential function).","Approximates floating point floor.","Returns the largest integer less than or equal to a number.","","","","","Retrieve the fractional part of floating point with sign.","Returns the fractional part of a number with sign.","","Returns the argument unchanged.","","","","","Raw transmutation from <code>u32</code>.","","Approximates the length of the hypotenuse of a right-angle …","Calculate the length of the hypotenuse of a right-angle …","Calls <code>U::from(self)</code>.","Approximates <code>1/x</code> with an average deviation of ~8%.","Fast approximation of <code>1/x</code>.","Approximates inverse square root with an average deviation …","Approximate inverse square root with an average deviation …","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.","Returns <code>true</code> if this value is positive infinity or …","Returns <code>true</code> if this value is <code>NaN</code>.","Returns <code>true</code> if <code>self</code> has a negative sign, including <code>-0.0</code>, …","Returns <code>true</code> if <code>self</code> has a positive sign, including <code>+0.0</code>, …","Approximates <code>ln(x)</code>.","Approximates the natural logarithm of the number.","Approximates <code>log</code> with an arbitrary base.","Approximates the logarithm of the number with respect to …","Approximates <code>log10</code>.","Approximates the base 10 logarithm of the number.","Approximates <code>log2</code>.","Approximates the base 2 logarithm of the number.","","","","","","","","Approximates <code>self^n</code>.","Approximates a number raised to a floating point power.","Approximates <code>self^n</code> where n is an <code>i32</code>","Approximates a number raised to an integer power.","","","","","","Calculates the least nonnegative remainder of …","Calculates the least non-negative remainder of …","Round the number part of floating point with sign.","Returns the nearest integer to a number.","Approximates sine in radians with a maximum error of <code>0.002</code>.","Approximates <code>sin(x)</code> in radians with a maximum error of …","Approximates square root with an average deviation of ~5%.","Approximates the square root of a number with an average …","","","","","","Approximates <code>tan(x)</code> in radians with a maximum error of <code>0.6</code>.","Approximates <code>tan(x)</code> in radians with a maximum error of <code>0.6</code>.","Raw transmutation to <code>u32</code>.","Retrieve whole number part of floating point with sign.","Returns the integer part of a number.","","",""],"i":[2,2,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,19,2,19,2,2,2,2,19,2,19,2,19,2,19,19,2,2,2,19,2,2,19,2,19,2,2,2,2,2,2,19,2,2,2,19,2,19,2,2,2,2,2,19,2,2,2,2,2,2,2,2,2,19,2,2,19,2,19,2,2,2,2,2,2,19,2,19,2,19,2,19,2,2,2,2,2,2,2,2,19,2,19,2,2,2,2,2,2,19,2,19,2,19,2,19,2,2,2,2,2,2,19,2,2,19,2,2,2,2],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[2,2],[[],1],[[2,1],2],[[2,2],2],[[2,1]],[[2,2]],[[],1],[2,2],[[],1],[2,2],[1,1],[[2,2],2],[1,1],[[],1],[2,2],[[]],[[]],[[],1],[2,2],[2,2],[1,1],[[2,2],2],[[],1],[2,2],[[],2],[[2,2],2],[[2,1],2],[[2,2]],[[2,1]],[1,1],[[2,2],2],[[2,1],3],[[2,2],3],[[],1],[2,2],[[],1],[2,2],[[2,4],5],[[2,4],5],[[2,4],5],[[2,4],5],[[],1],[2,2],[6,2],[[]],[7,2],[1,2],[8,2],[9,2],[10,2],[11,[[13,[2,12]]]],[1,1],[[2,2],2],[[]],[[],1],[2,2],[[],1],[2,2],[2,3],[2,3],[2,3],[2,3],[2,3],[[],1],[2,2],[1,1],[[2,2],2],[[],1],[2,2],[[],1],[2,2],[[2,1],2],[[2,2],2],[[2,2]],[[2,1]],[2,2],[[2,1],[[15,[14]]]],[[2,2],[[15,[14]]]],[1,1],[[2,2],2],[16,1],[[2,16],2],[17,2],[[2,1],2],[[2,2],2],[[2,1]],[[2,2]],[1,1],[[2,2],2],[[],1],[2,2],[[],1],[2,2],[[],1],[2,2],[[2,2],2],[[2,1],2],[[2,2]],[[2,1]],[17,2],[[],1],[2,2],[2,10],[[],1],[2,2],[[],13],[[],13],[[],18]],"c":[],"p":[[15,"f32"],[3,"F32"],[15,"bool"],[3,"Formatter"],[6,"Result"],[15,"u8"],[15,"i8"],[15,"u16"],[15,"i16"],[15,"u32"],[15,"str"],[3,"ParseFloatError"],[4,"Result"],[4,"Ordering"],[4,"Option"],[15,"i32"],[8,"Iterator"],[3,"TypeId"],[8,"F32Ext"]]},\
"num_traits":{"doc":"Numeric traits for generic mathematics","t":"CCCCCCCCCCCNCCECQCNCCIIIICIICDCCICCCCCCCCCCCCCCCCLLLLAACCFFFALLLLLKAALLMCAACACLLLLLLCIIIKKKKIIIIKFKLLLLLKLLLLLKLLLLLLLKLLLLLKLLKKKKKKKKKKIIKKLKLKKKLLLKKLLKKLLLLLLLKLKKKKKLLLLKKLIILKFKLLFKIKKKKLKKLKKKKKKKLKKKAAAAAAAIIIIIIIIKKKKKKKKIIKKKKIQKIIQKKIIIKKKIIIIKKKKKIIIIIIKKKKKKQIFFKIIFKFKKKFK","n":["AsPrimitive","Bounded","CheckedAdd","CheckedDiv","CheckedEuclid","CheckedMul","CheckedNeg","CheckedRem","CheckedShl","CheckedShr","CheckedSub","Empty","Euclid","FloatConst","FloatErrorKind","FromPrimitive","FromStrRadixErr","Inv","Invalid","MulAdd","MulAddAssign","Num","NumAssign","NumAssignOps","NumAssignRef","NumCast","NumOps","NumRef","One","ParseFloatError","Pow","PrimInt","RefNum","Saturating","SaturatingAdd","SaturatingMul","SaturatingSub","Signed","ToPrimitive","Unsigned","WrappingAdd","WrappingMul","WrappingNeg","WrappingShl","WrappingShr","WrappingSub","Zero","abs","abs_sub","borrow","borrow","borrow_mut","borrow_mut","bounds","cast","cast","checked_pow","clamp","clamp_max","clamp_min","float","fmt","fmt","fmt","from","from","from_str_radix","identities","int","into","into","kind","one","ops","pow","pow","sign","signum","try_from","try_from","try_into","try_into","type_id","type_id","zero","Bounded","LowerBounded","UpperBounded","max_value","max_value","min_value","min_value","AsPrimitive","FromPrimitive","NumCast","ToPrimitive","as_","cast","from","from_f32","from_f64","from_i128","from_i16","from_i32","from_i64","from_i8","from_isize","from_u128","from_u16","from_u32","from_u64","from_u8","from_usize","to_f32","to_f64","to_i128","to_i16","to_i32","to_i64","to_i8","to_isize","to_u128","to_u16","to_u32","to_u64","to_u8","to_usize","E","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_3","FRAC_PI_4","FRAC_PI_6","FRAC_PI_8","FloatConst","FloatCore","LN_10","LN_2","LOG10_2","LOG10_E","LOG2_10","LOG2_E","PI","SQRT_2","TAU","abs","ceil","classify","epsilon","floor","fract","infinity","integer_decode","is_finite","is_infinite","is_nan","is_normal","is_sign_negative","is_sign_positive","max","max_value","min","min_positive_value","min_value","nan","neg_infinity","neg_zero","powi","recip","round","signum","to_degrees","to_radians","trunc","One","Zero","is_one","is_zero","one","one","set_one","set_zero","zero","zero","PrimInt","count_ones","count_zeros","from_be","from_le","leading_ones","leading_zeros","pow","reverse_bits","rotate_left","rotate_right","signed_shl","signed_shr","swap_bytes","to_be","to_le","trailing_ones","trailing_zeros","unsigned_shl","unsigned_shr","checked","euclid","inv","mul_add","overflowing","saturating","wrapping","CheckedAdd","CheckedDiv","CheckedMul","CheckedNeg","CheckedRem","CheckedShl","CheckedShr","CheckedSub","checked_add","checked_div","checked_mul","checked_neg","checked_rem","checked_shl","checked_shr","checked_sub","CheckedEuclid","Euclid","checked_div_euclid","checked_rem_euclid","div_euclid","rem_euclid","Inv","Output","inv","MulAdd","MulAddAssign","Output","mul_add","mul_add_assign","OverflowingAdd","OverflowingMul","OverflowingSub","overflowing_add","overflowing_mul","overflowing_sub","Saturating","SaturatingAdd","SaturatingMul","SaturatingSub","saturating_add","saturating_add","saturating_mul","saturating_sub","saturating_sub","WrappingAdd","WrappingMul","WrappingNeg","WrappingShl","WrappingShr","WrappingSub","wrapping_add","wrapping_mul","wrapping_neg","wrapping_shl","wrapping_shr","wrapping_sub","Output","Pow","checked_pow","pow","pow","Signed","Unsigned","abs","abs","abs_sub","abs_sub","is_negative","is_positive","signum","signum"],"q":[[0,"num_traits"],[85,"num_traits::bounds"],[92,"num_traits::cast"],[127,"num_traits::float"],[177,"num_traits::identities"],[187,"num_traits::int"],[207,"num_traits::ops"],[214,"num_traits::ops::checked"],[230,"num_traits::ops::euclid"],[236,"num_traits::ops::inv"],[239,"num_traits::ops::mul_add"],[244,"num_traits::ops::overflowing"],[250,"num_traits::ops::saturating"],[259,"num_traits::ops::wrapping"],[271,"num_traits::pow"],[276,"num_traits::sign"]],"d":["","","","","","","","","","","","","","","","","","","","","","The base trait for numeric types, covering <code>0</code> and <code>1</code> values, …","The trait for <code>Num</code> types which also implement assignment …","Generic trait for types implementing numeric assignment …","The trait for <code>NumAssign</code> types which also implement …","","Generic trait for types implementing basic numeric …","The trait for <code>Num</code> types which also implement numeric …","","","","","The trait for <code>Num</code> references which implement numeric …","","","","","","","","","","","","","","","","","","","","","","","","","A value bounded by a minimum and a maximum","A value bounded by a maximum value","A value bounded by a minimum value","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Convert from a string and radix (typically <code>2..=36</code>).","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Numbers which have upper and lower bounds","Numbers which have lower bounds","Numbers which have upper bounds","Returns the largest finite number this type can represent","Returns the largest finite number this type can represent","Returns the smallest finite number this type can represent","Returns the smallest finite number this type can represent","A generic interface for casting between machine scalars …","A generic trait for converting a number to a value.","An interface for casting between machine scalars.","A generic trait for converting a value to a number.","Convert a value to another, using the <code>as</code> operator.","Cast from one machine scalar to another.","Creates a number from another value that can be converted …","Converts a <code>f32</code> to return an optional value of this type. …","Converts a <code>f64</code> to return an optional value of this type. …","Converts an <code>i128</code> to return an optional value of this type. …","Converts an <code>i16</code> to return an optional value of this type. …","Converts an <code>i32</code> to return an optional value of this type. …","Converts an <code>i64</code> to return an optional value of this type. …","Converts an <code>i8</code> to return an optional value of this type. …","Converts an <code>isize</code> to return an optional value of this …","Converts an <code>u128</code> to return an optional value of this type. …","Converts an <code>u16</code> to return an optional value of this type. …","Converts an <code>u32</code> to return an optional value of this type. …","Converts an <code>u64</code> to return an optional value of this type. …","Converts an <code>u8</code> to return an optional value of this type. …","Converts a <code>usize</code> to return an optional value of this type. …","Converts the value of <code>self</code> to an <code>f32</code>. Overflows may map to …","Converts the value of <code>self</code> to an <code>f64</code>. Overflows may map to …","Converts the value of <code>self</code> to an <code>i128</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i16</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i32</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i64</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i8</code>. If the value cannot be","Converts the value of <code>self</code> to an <code>isize</code>. If the value …","Converts the value of <code>self</code> to a <code>u128</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u16</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u32</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u64</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u8</code>. If the value cannot be …","Converts the value of <code>self</code> to a <code>usize</code>. If the value cannot …","Return Euler’s number.","Return <code>1.0 / π</code>.","Return <code>1.0 / sqrt(2.0)</code>.","Return <code>2.0 / π</code>.","Return <code>2.0 / sqrt(π)</code>.","Return <code>π / 2.0</code>.","Return <code>π / 3.0</code>.","Return <code>π / 4.0</code>.","Return <code>π / 6.0</code>.","Return <code>π / 8.0</code>.","","Generic trait for floating point numbers that works with …","Return <code>ln(10.0)</code>.","Return <code>ln(2.0)</code>.","Return <code>log10(2.0)</code>.","Return <code>log10(e)</code>.","Return <code>log2(10.0)</code>.","Return <code>log2(e)</code>.","Return Archimedes’ constant <code>π</code>.","Return <code>sqrt(2.0)</code>.","Return the full circle constant <code>τ</code>.","Computes the absolute value of <code>self</code>. Returns …","Returns the smallest integer greater than or equal to a …","Returns the floating point category of the number. If only …","Returns epsilon, a small positive value.","Returns the largest integer less than or equal to a number.","Returns the fractional part of a number.","Returns positive infinity.","Returns the mantissa, base 2 exponent, and sign as …","Returns <code>true</code> if the number is neither infinite or NaN.","Returns <code>true</code> if the number is infinite.","Returns <code>true</code> if the number is NaN.","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code> and …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code> and …","Returns the maximum of the two numbers.","Returns the largest finite value that this type can …","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this …","Returns the smallest finite value that this type can …","Returns NaN.","Returns negative infinity.","Returns <code>-0.0</code>.","Raise a number to an integer power.","Returns the reciprocal (multiplicative inverse) of the …","Returns the nearest integer to a number. Round half-way …","Returns a number that represents the sign of <code>self</code>.","Converts to degrees, assuming the number is in radians.","Converts to radians, assuming the number is in degrees.","Return the integer part of a number.","Defines a multiplicative identity element for <code>Self</code>.","Defines an additive identity element for <code>Self</code>.","Returns <code>true</code> if <code>self</code> is equal to the multiplicative …","Returns <code>true</code> if <code>self</code> is equal to the additive identity.","Returns the multiplicative identity, <code>1</code>.","Returns the multiplicative identity element of <code>Self</code>, <code>1</code>.","Sets <code>self</code> to the multiplicative identity element of <code>Self</code>, <code>1</code>…","Sets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.","Returns the additive identity, <code>0</code>.","Returns the additive identity element of <code>Self</code>, <code>0</code>.","Generic trait for primitive integers.","Returns the number of ones in the binary representation of …","Returns the number of zeros in the binary representation …","Convert an integer from big endian to the target’s …","Convert an integer from little endian to the target’s …","Returns the number of leading ones in the binary …","Returns the number of leading zeros in the binary …","Raises self to the power of <code>exp</code>, using exponentiation by …","Reverses the order of bits in the integer.","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Reverses the byte order of the integer.","Convert <code>self</code> to big endian from the target’s endianness.","Convert <code>self</code> to little endian from the target’s …","Returns the number of trailing ones in the binary …","Returns the number of trailing zeros in the binary …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","","","","","","","","Performs addition that returns <code>None</code> instead of wrapping …","Performs division that returns <code>None</code> instead of panicking …","Performs multiplication that returns <code>None</code> instead of …","Performs negation that returns <code>None</code> if the result can’t …","Performs an integral remainder that returns <code>None</code> instead …","Performs a left shift that returns <code>None</code> on shifts larger …","Performs a right shift that returns <code>None</code> on shifts larger …","Performs subtraction that returns <code>None</code> instead of wrapping …","Adds two numbers, checking for overflow. If overflow …","Divides two numbers, checking for underflow, overflow and …","Multiplies two numbers, checking for underflow or …","Negates a number, returning <code>None</code> for results that can’t …","Finds the remainder of dividing two numbers, checking for …","Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …","Subtracts two numbers, checking for underflow. If …","","","Performs euclid division that returns <code>None</code> instead of …","Finds the euclid remainder of dividing two numbers, …","Calculates Euclidean division, the matching method for …","Calculates the least nonnegative remainder of <code>self (mod v)</code>.","Unary operator for retrieving the multiplicative inverse, …","The result after applying the operator.","Returns the multiplicative inverse of <code>self</code>.","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","The fused multiply-add assignment operation.","The resulting type after applying the fused multiply-add.","Performs the fused multiply-add operation.","Performs the fused multiply-add operation.","Performs addition with a flag for overflow.","Performs multiplication with a flag for overflow.","Performs substraction with a flag for overflow.","Returns a tuple of the sum along with a boolean indicating …","Returns a tuple of the product along with a boolean …","Returns a tuple of the difference along with a boolean …","Saturating math operations. Deprecated, use <code>SaturatingAdd</code>, …","Performs addition that saturates at the numeric bounds …","Performs multiplication that saturates at the numeric …","Performs subtraction that saturates at the numeric bounds …","Saturating addition operator. Returns a+b, saturating at …","Saturating addition. Computes <code>self + other</code>, saturating at …","Saturating multiplication. Computes <code>self * other</code>, …","Saturating subtraction operator. Returns a-b, saturating …","Saturating subtraction. Computes <code>self - other</code>, saturating …","Performs addition that wraps around on overflow.","Performs multiplication that wraps around on overflow.","Performs a negation that does not panic.","Performs a left shift that does not panic.","Performs a right shift that does not panic.","Performs subtraction that wraps around on overflow.","Wrapping (modular) addition. Computes <code>self + other</code>, …","Wrapping (modular) multiplication. Computes <code>self * other</code>, …","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …","Panic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>, …","Panic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>, …","Wrapping (modular) subtraction. Computes <code>self - other</code>, …","The result after applying the operator.","Binary operator for raising a value to a power.","Raises a value to the power of exp, returning <code>None</code> if an …","Raises a value to the power of exp, using exponentiation …","Returns <code>self</code> to the power <code>rhs</code>.","Useful functions for signed numbers (i.e. numbers that can …","A trait for values which cannot be negative","Computes the absolute value.","Computes the absolute value.","The positive difference of two numbers.","The positive difference of two numbers.","Returns true if the number is negative and false if the …","Returns true if the number is positive and false if the …","Returns the sign of the number.","Returns the sign of the number."],"i":[0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,38,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,5,2,5,0,0,0,0,0,0,0,0,2,5,5,2,5,38,0,0,2,5,5,0,0,0,0,0,0,2,5,2,5,2,5,0,0,0,0,39,40,39,41,0,0,0,0,42,0,10,43,43,43,43,43,43,43,43,43,43,43,43,43,43,12,12,12,12,12,12,12,12,12,12,12,12,12,12,44,44,44,44,44,44,44,44,44,44,0,0,44,44,44,44,44,44,44,44,44,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,0,0,32,33,0,32,32,33,0,33,0,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,48,35,49,50,51,52,53,0,0,54,54,55,55,0,56,56,0,0,57,57,58,0,0,0,59,60,61,0,0,0,0,62,63,64,62,65,0,0,0,0,0,0,66,67,68,69,70,71,72,0,0,0,72,0,0,0,37,0,37,37,37,0,37],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],0,0,0,0,[[1,1,1],1],[[1,1],1],[[1,1],1],0,[[2,3],4],[[5,3],4],[[5,3],4],[[]],[[]],[[6,7],8],0,0,[[]],[[]],0,0,0,0,0,0,0,[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],0,0,0,0,[[]],[[]],[[]],[[]],0,0,0,0,[[]],[10,[[11,[10]]]],[12,11],[13,11],[14,11],[15,11],[16,11],[17,11],[18,11],[19,11],[20,11],[21,11],[22,11],[7,11],[23,11],[24,11],[25,11],[[],[[11,[13]]]],[[],[[11,[14]]]],[[],[[11,[15]]]],[[],[[11,[16]]]],[[],[[11,[17]]]],[[],[[11,[18]]]],[[],[[11,[19]]]],[[],[[11,[20]]]],[[],[[11,[21]]]],[[],[[11,[22]]]],[[],[[11,[7]]]],[[],[[11,[23]]]],[[],[[11,[24]]]],[[],[[11,[25]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[]],[[]],[[],[[0,[26,[27,[[0,[26,[27,[[0,[26,[27,[[0,[26,[27,[[0,[26,27]]]]]]]]]]]]]]]]]]]],[[]],[[],[[0,[26,[27,[[0,[26,[27,[[0,[26,[27,[[0,[26,[27,[[0,[26,27]]]]]]]]]]]]]]]]]]]],[[]],[[]],[[]],[[],[[0,[26,[28,[[0,[26,[28,[[0,[26,[28,[[0,[26,[28,[[0,[26,28]]]]]]]]]]]]]]]]]]]],[[]],[[]],[[],29],[[]],[[]],[[]],[[]],[[]],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[17],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[31,30],[[],30],[[],32],[[]],[[]],[[]],[[],33],[[]],0,[[],7],[[],7],[[]],[[]],[[],7],[[],7],[7],[[]],[7],[7],[7],[7],[[]],[[]],[[]],[[],7],[[],7],[7],[7],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],11],[[],11],[[],11],[[],11],[[],11],[7,11],[7,11],[[],11],0,0,[[],11],[[],11],[[]],[[]],0,0,[[]],0,0,0,[[]],[[]],0,0,0,[[]],[[]],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[[]],[[]],[[]],[7],[7],[[]],0,0,[[[0,[34,32,35]],25],[[11,[[0,[34,32,35]]]]]],[[[0,[34,32,[36,[[0,[34,32,[36,[[0,[34,32,[36,[[0,[34,32,[36,[[0,[34,32,36]]]]]]]]]]]]]]]]]],25],[[0,[34,32,[36,[[0,[34,32,[36,[[0,[34,32,[36,[[0,[34,32,[36,[[0,[34,32,36]]]]]]]]]]]]]]]]]]]],[[]],0,0,[37,37],[[]],[[37,37],37],[[]],[[],30],[[],30],[37,37],[[]]],"c":[],"p":[[8,"PartialOrd"],[4,"FloatErrorKind"],[3,"Formatter"],[6,"Result"],[3,"ParseFloatError"],[15,"str"],[15,"u32"],[4,"Result"],[3,"TypeId"],[8,"NumCast"],[4,"Option"],[8,"ToPrimitive"],[15,"f32"],[15,"f64"],[15,"i128"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[15,"isize"],[15,"u128"],[15,"u16"],[15,"u64"],[15,"u8"],[15,"usize"],[8,"Sized"],[8,"Div"],[8,"Add"],[4,"FpCategory"],[15,"bool"],[8,"PartialEq"],[8,"One"],[8,"Zero"],[8,"Clone"],[8,"CheckedMul"],[8,"Mul"],[8,"Signed"],[8,"Num"],[8,"Bounded"],[8,"UpperBounded"],[8,"LowerBounded"],[8,"AsPrimitive"],[8,"FromPrimitive"],[8,"FloatConst"],[8,"FloatCore"],[8,"PrimInt"],[8,"CheckedAdd"],[8,"CheckedDiv"],[8,"CheckedNeg"],[8,"CheckedRem"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"CheckedSub"],[8,"CheckedEuclid"],[8,"Euclid"],[8,"Inv"],[8,"MulAdd"],[8,"MulAddAssign"],[8,"OverflowingAdd"],[8,"OverflowingMul"],[8,"OverflowingSub"],[8,"Saturating"],[8,"SaturatingAdd"],[8,"SaturatingMul"],[8,"SaturatingSub"],[8,"WrappingAdd"],[8,"WrappingMul"],[8,"WrappingNeg"],[8,"WrappingShl"],[8,"WrappingShr"],[8,"WrappingSub"],[8,"Pow"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
