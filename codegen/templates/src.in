// @generated

//! Auto-Generated Fonts.

use crate::BitmapFont;

/// Return the char offset in the raw bitmap data.
fn char_offset(c: char) -> u32 {
	match c {
		{% for range in char_ranges -%}
		'{{ range.start }}' ..= '{{ range.end }}' => (c as u32 - '{{ range.start }}' as u32){% if range.skip != 0 %} + {{ range.skip }}{% endif %},
		{% endfor -%}
		_ => '?' as u32 - ' ' as u32
	}
}

// ### Fonts

{%- for font in fonts %}

/// Tamzen {{ font.width }}x{{ font.height }}{% if font.bold %} Bold{% endif %} Font.
///
/// <img src="data:image/bmp;base64,{{ font.bmp }}"/>
///
/// Bitmap Size: {{ font.bitmap_len_str }} Byte <br/>
/// Font Source: <https://github.com/sunaku/tamzen-font/blob/master/bdf/Tamzen{{ font.width }}x{{ font.height }}
	{%- if font.bold %}b{% else %}r{% endif %}.bdf> <br/>
/// Font License: <https://github.com/sunaku/tamzen-font/blob/master/LICENSE>
#[allow(non_upper_case_globals)]
pub const FONT_{{ font.width }}x{{ font.height }}{% if font.bold %}_BOLD{% endif %}: BitmapFont = BitmapFont {
	// {{ font.img_width }} x {{ font.img_height }}
	bitmap: &[
		{%- for chunk in font.bitmap | chunks(16) %}
		{% for byte in chunk %}0x{{ "{:02x}"|format(byte) }}{% if !loop.last %}{{ ", " }}{% endif %}{% endfor %}
		{%- if !loop.last %},{% endif %}
		{%- endfor %}
	],
	bitmap_width: {{ font.img_width }},
	char_offset: &char_offset,
	width: {{ font.width }},
	height: {{ font.height }},
	pixels: 1
};

#[cfg(test)]
#[test]
fn test_font_{{ font.width }}x{{ font.height }}{% if font.bold %}_bold{% endif %}_bitmap_size() {
	assert_eq!({{ font.bitmap_len }}, FONT_{{ font.width }}x{{ font.height }}.bitmap.len());
}

{%- endfor %}

// ### Pixel-Double Fonts

{%- for font in fonts %}

/// Pixel-double version of [`FONT_{{ font.width }}x{{ font.height }}{% if font.bold %}_BOLD{% endif %}`].
///
/// <img src="data:image/bmp;base64,{{ font.bmp_double }}"/>
///
/// This font does not store its own bitmap and therefore does not increase the flash size significantly.
#[allow(non_upper_case_globals)]
pub const FONT_{{ 2*font.width }}x{{ 2*font.height }}{% if font.bold %}_BOLD{% endif %}: BitmapFont = {
	FONT_{{ font.width }}x{{ font.height }}{% if font.bold %}_BOLD{% endif %}.pixel_double()
};

{%- endfor %}
