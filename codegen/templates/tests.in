// @generated

macro_rules! test_font {
	($mod:ident: {
		font: $font:ident,
		width: $width:literal,
		height: $height:literal,
		{%- for range in char_ranges %}
		char_range_{{ loop.index }}_pattern: $char_range_{{ loop.index }}_pattern:expr,
		{%- endfor %}
		fallback_pattern: $fallback_pattern:expr
	}) => {
		mod $mod {
			use bitmap_font::*;
			use embedded_graphics::{
				Drawable,
				text::Text,
				geometry::{Dimensions, Point, Size},
				mock_display::MockDisplay,
				primitives::Rectangle
			};
			
			#[test]
			fn font_size() {
				assert_eq!($font.width(), $width);
				assert_eq!($font.height(), $height);
			}
			
			#[test]
			fn text_empty_bb() {
				let bb = Text::new("", Point::zero(), $font).bounding_box();
				assert_eq!(bb, Rectangle::new(Point::zero(), Size::zero()));
			}
			
			#[test]
			fn text_a_size() {
				let bb = Text::new("a", Point::zero(), $font).bounding_box();
				assert_eq!(bb, Rectangle::new(Point::zero(), Size::new($width, $height)));
			}
			
			#[test]
			fn text_multiline_size() {
				let bb = Text::new("aa\naaa\na", Point::zero(), $font).bounding_box();
				assert_eq!(bb, Rectangle::new(Point::zero(), Size::new(3 * $width, 3 * $height)));
			}
			
			{%- for range in char_ranges %}
			
			#[test]
			fn text_char_range_{{ loop.index }}() {
				let mut display = MockDisplay::new();
				Text::new("{{ range.start }}{{ range.mid }}{{ range.end }}", Point::zero(), $font)
					.draw(&mut display)
					.unwrap();
				assert_eq!(display, MockDisplay::from_pattern($char_range_{{ loop.index }}_pattern));
			}
			{%- endfor %}
			
			#[test]
			fn text_fallback() {
				let mut display = MockDisplay::new();
				Text::new("€?µ", Point::zero(), $font)
					.draw(&mut display)
					.unwrap();
				assert_eq!(display,MockDisplay::from_pattern($fallback_pattern));
			}
		}
	};
}

{%- for font in fonts %}

test_font! {
	font_{{ font.width }}x{{ font.height }}{% if font.bold %}_bold{% endif %}: {
		font: FONT_{{ font.width }}x{{ font.height }}{% if font.bold %}_BOLD{% endif %},
		width: {{ font.width }},
		height: {{ font.height }},
		{%- for range in char_ranges %}
		char_range_{{ loop.index }}_pattern: &[
			{%- for y in 0..font.height %}
			"{{ font.glyph(range.start).mock_line(y) }}{{ font.glyph(range.mid).mock_line(y) }}{{ font.glyph(range.end).mock_line(y) }}",
			{%- endfor %}
		],
		{%- endfor %}
		fallback_pattern: &[
			{%- for y in 0..font.height %}
			"{{ font.glyph('?').mock_line(y) }}{{ font.glyph('?').mock_line(y) }}{{ font.glyph('?').mock_line(y) }}",
			{%- endfor %}
		]
	}
}

{%- endfor %}
