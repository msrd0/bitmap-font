name: Rust

on:
  push:
    branches: [main]
  pull_request:

env:
  # speed up build by using clang/lld
  CC: "clang-14"
  CXX: "clang++-14"
  LD: "clang-14"
  LDFLAGS: "-fuse-ld=lld-14"
  RUSTFLAGS: "-C linker=clang-14 -C link-arg=-fuse-ld=lld-14"
  RUST_BACKTRACE: "1"

jobs:
  codegen:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - uses: dtolnay/rust-toolchain@stable
        id: rust-toolchain
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/git
            ~/.cargo/registry
            target
          key: "${{runner.os}} Rust ${{steps.rust-toolchain.outputs.cachekey}} (Codegen)"
      - run: cd codegen && cargo run
      - run: git diff --exit-code src/ tests/
  
  test:
    strategy:
      fail-fast: false
      matrix:
        rust:
          - name: "MSRV"
            toolchain: "1.61"
            nightly: false
          - name: "Stable"
            toolchain: "stable"
            nightly: false
          - name: "Nightly"
            toolchain: "nightly"
            nightly: true
    runs-on: ubuntu-latest
    name: "Test (Rust ${{matrix.rust.name}})"
    continue-on-error: ${{matrix.rust.nightly}}
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{matrix.rust.toolchain}}
        id: rust-toolchain
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/git
            ~/.cargo/registry
            target
          key: "${{runner.os}} Rust ${{steps.rust-toolchain.outputs.cachekey}}"
      - run: cargo test -p bitmap-font
  
  clippy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with:
          components: clippy
          toolchain: "1.69"
        id: rust-toolchain
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/git
            ~/.cargo/registry
            target
          key: "${{runner.os}} Rust ${{steps.rust-toolchain.outputs.cachekey}} (Clippy)"
      - run: cargo clippy --profile test -- -Dclippy::all
  
  rustfmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@nightly
        with:
          components: rustfmt
      - run: cargo fmt --all -- --check
  
  readme:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker://ghcr.io/msrd0/cargo-doc2readme
        with:
          entrypoint: ./readme.sh
          args: --check
  
  coverage:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        id: rust-toolchain
      - name: Get Tarpaulin Version
        id: tarpaulin-version
        run: echo "version=$(wget -qO- 'https://crates.io/api/v1/crates/cargo-tarpaulin' | jq -r '.crate.max_stable_version')" >>$GITHUB_OUTPUT
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/cargo-tarpaulin
            ~/.cargo/git
            ~/.cargo/registry
            target
          key: "${{runner.os}} Rust ${{steps.rust-toolchain.outputs.cachekey}} (Tarpaulin ${{steps.tarpaulin-version.outputs.version}})"
      - name: Install Tarpaulin
        run: |
          test -e ~/.cargo/bin/cargo-tarpaulin || cargo install cargo-tarpaulin --version ${{steps.tarpaulin-version.outputs.version}}
      - name: Run Tarpaulin coverage tests
        run: |
          cargo tarpaulin -v \
          	--target-dir target/tarpaulin \
            --exclude-files 'codegen/*' \
          	--exclude-files 'target/*' \
          	--ignore-panics --ignore-tests \
          	--out Html --out Json
      - uses: actions/upload-artifact@v3
        with:
          name: tarpaulin-report
          path: |
            tarpaulin-report.json
            tarpaulin-report.html
  
  doc:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        id: rust-toolchain
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/git
            ~/.cargo/registry
            target
          key: "${{runner.os}} Rust ${{steps.rust-toolchain.outputs.cachekey}} (Doc)"
      - run: cargo doc
      - run: tar cfj rustdoc.tar.bz2 target/doc/
      - uses: actions/upload-artifact@v3
        with:
          name: rustdoc
          path: rustdoc.tar.bz2
  
  pages:
    runs-on: ubuntu-latest
    needs: [coverage, doc]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
        with:
          ref: gh-pages
      - uses: actions/download-artifact@v3
        with:
          name: rustdoc
      - uses: actions/download-artifact@v3
        with:
          name: tarpaulin-report
      
      - run: |
          test ! -d ./doc || rm -r ./doc
          tar xfj rustdoc.tar.bz2 --strip-components=1
          rm rustdoc.tar.bz2
          
          coverage=$(jq '.files | { covered: map(.covered) | add, coverable: map(.coverable) | add } | .covered / .coverable * 10000 | round | . / 100' tarpaulin-report.json)
          color=$([[ $coverage < 80 ]] && printf yellow || printf brightgreen)
          wget -qO coverage.svg "https://img.shields.io/badge/coverage-$coverage%25-$color"
          
          git add ./doc coverage.svg || true
          git status
      
      - uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "GitHub Pages for ${{github.sha}}"
