var searchIndex = JSON.parse('{\
"bitmap_font":{"doc":"This crate provides bitmap fonts for the <code>embedded-graphics</code>…","i":[[17,"FONT_10x20","bitmap_font","Tamzen 10x20 Font.",null,null],[17,"FONT_5x9","","Tamzen 5x9 Font.",null,null],[17,"FONT_6x12","","Tamzen 6x12 Font.",null,null],[17,"FONT_7x13","","Tamzen 7x13 Font.",null,null],[17,"FONT_7x14","","Tamzen 7x14 Font.",null,null],[17,"FONT_8x15","","Tamzen 8x15 Font.",null,null],[17,"FONT_8x16","","Tamzen 8x16 Font.",null,null],[17,"FONT_20x40","","Pixel-double version of [FONT_10x20].",null,null],[17,"FONT_10x18","","Pixel-double version of [FONT_5x9].",null,null],[17,"FONT_12x24","","Pixel-double version of [FONT_6x12].",null,null],[17,"FONT_14x26","","Pixel-double version of [FONT_7x13].",null,null],[17,"FONT_14x28","","Pixel-double version of [FONT_7x14].",null,null],[17,"FONT_16x30","","Pixel-double version of [FONT_8x15].",null,null],[17,"FONT_16x32","","Pixel-double version of [FONT_8x16].",null,null],[3,"BitmapFont","","Stores the font bitmap and some additional info for each …",null,null],[11,"width","","Return the width of each character.",0,[[],["u32",15]]],[11,"height","","Return the height of each character.",0,[[],["u32",15]]],[11,"pixel","","Returns <code>true</code> if the pixel <code>(x, y)</code> is turned on in the …",0,[[["u32",15],["char",15]],["bool",15]]],[11,"pixel_double","","Returns a pixel-double version of this font.",0,[[]]],[8,"WithFont","","Style a [Text] with a font and color.",null,null],[10,"with_font","","Style this text with a font and color.",1,[[["bitmapfont",3],["binarycolor",4]],["styled",3]]],[11,"from","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"clone","","",0,[[],["bitmapfont",3]]]],"p":[[3,"BitmapFont"],[8,"WithFont"]]},\
"byteorder":{"doc":"This crate provides convenience methods for encoding and …","i":[[8,"ByteOrder","byteorder","<code>ByteOrder</code> describes types that can serialize integers as …",null,null],[10,"read_u16","","Reads an unsigned 16 bit integer from <code>buf</code>.",0,[[],["u16",15]]],[11,"read_u24","","Reads an unsigned 24 bit integer from <code>buf</code>, stored in u32.",0,[[],["u32",15]]],[10,"read_u32","","Reads an unsigned 32 bit integer from <code>buf</code>.",0,[[],["u32",15]]],[11,"read_u48","","Reads an unsigned 48 bit integer from <code>buf</code>, stored in u64.",0,[[],["u64",15]]],[10,"read_u64","","Reads an unsigned 64 bit integer from <code>buf</code>.",0,[[],["u64",15]]],[10,"read_u128","","Reads an unsigned 128 bit integer from <code>buf</code>.",0,[[],["u128",15]]],[10,"read_uint","","Reads an unsigned n-bytes integer from <code>buf</code>.",0,[[["usize",15]],["u64",15]]],[10,"read_uint128","","Reads an unsigned n-bytes integer from <code>buf</code>.",0,[[["usize",15]],["u128",15]]],[10,"write_u16","","Writes an unsigned 16 bit integer <code>n</code> to <code>buf</code>.",0,[[["u16",15]]]],[11,"write_u24","","Writes an unsigned 24 bit integer <code>n</code> to <code>buf</code>, stored in u32.",0,[[["u32",15]]]],[10,"write_u32","","Writes an unsigned 32 bit integer <code>n</code> to <code>buf</code>.",0,[[["u32",15]]]],[11,"write_u48","","Writes an unsigned 48 bit integer <code>n</code> to <code>buf</code>, stored in u64.",0,[[["u64",15]]]],[10,"write_u64","","Writes an unsigned 64 bit integer <code>n</code> to <code>buf</code>.",0,[[["u64",15]]]],[10,"write_u128","","Writes an unsigned 128 bit integer <code>n</code> to <code>buf</code>.",0,[[["u128",15]]]],[10,"write_uint","","Writes an unsigned integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.",0,[[["usize",15],["u64",15]]]],[10,"write_uint128","","Writes an unsigned integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.",0,[[["usize",15],["u128",15]]]],[11,"read_i16","","Reads a signed 16 bit integer from <code>buf</code>.",0,[[],["i16",15]]],[11,"read_i24","","Reads a signed 24 bit integer from <code>buf</code>, stored in i32.",0,[[],["i32",15]]],[11,"read_i32","","Reads a signed 32 bit integer from <code>buf</code>.",0,[[],["i32",15]]],[11,"read_i48","","Reads a signed 48 bit integer from <code>buf</code>, stored in i64.",0,[[],["i64",15]]],[11,"read_i64","","Reads a signed 64 bit integer from <code>buf</code>.",0,[[],["i64",15]]],[11,"read_i128","","Reads a signed 128 bit integer from <code>buf</code>.",0,[[],["i128",15]]],[11,"read_int","","Reads a signed n-bytes integer from <code>buf</code>.",0,[[["usize",15]],["i64",15]]],[11,"read_int128","","Reads a signed n-bytes integer from <code>buf</code>.",0,[[["usize",15]],["i128",15]]],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point …",0,[[],["f32",15]]],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point …",0,[[],["f64",15]]],[11,"write_i16","","Writes a signed 16 bit integer <code>n</code> to <code>buf</code>.",0,[[["i16",15]]]],[11,"write_i24","","Writes a signed 24 bit integer <code>n</code> to <code>buf</code>, stored in i32.",0,[[["i32",15]]]],[11,"write_i32","","Writes a signed 32 bit integer <code>n</code> to <code>buf</code>.",0,[[["i32",15]]]],[11,"write_i48","","Writes a signed 48 bit integer <code>n</code> to <code>buf</code>, stored in i64.",0,[[["i64",15]]]],[11,"write_i64","","Writes a signed 64 bit integer <code>n</code> to <code>buf</code>.",0,[[["i64",15]]]],[11,"write_i128","","Writes a signed 128 bit integer <code>n</code> to <code>buf</code>.",0,[[["i128",15]]]],[11,"write_int","","Writes a signed integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.",0,[[["i64",15],["usize",15]]]],[11,"write_int128","","Writes a signed integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.",0,[[["usize",15],["i128",15]]]],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating …",0,[[["f32",15]]]],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating …",0,[[["f64",15]]]],[10,"read_u16_into","","Reads unsigned 16 bit integers from <code>src</code> into <code>dst</code>.",0,[[]]],[10,"read_u32_into","","Reads unsigned 32 bit integers from <code>src</code> into <code>dst</code>.",0,[[]]],[10,"read_u64_into","","Reads unsigned 64 bit integers from <code>src</code> into <code>dst</code>.",0,[[]]],[10,"read_u128_into","","Reads unsigned 128 bit integers from <code>src</code> into <code>dst</code>.",0,[[]]],[11,"read_i16_into","","Reads signed 16 bit integers from <code>src</code> to <code>dst</code>.",0,[[]]],[11,"read_i32_into","","Reads signed 32 bit integers from <code>src</code> into <code>dst</code>.",0,[[]]],[11,"read_i64_into","","Reads signed 64 bit integers from <code>src</code> into <code>dst</code>.",0,[[]]],[11,"read_i128_into","","Reads signed 128 bit integers from <code>src</code> into <code>dst</code>.",0,[[]]],[11,"read_f32_into","","Reads IEEE754 single-precision (4 bytes) floating point …",0,[[]]],[11,"read_f32_into_unchecked","","<strong>DEPRECATED</strong>.",0,[[]]],[11,"read_f64_into","","Reads IEEE754 single-precision (4 bytes) floating point …",0,[[]]],[11,"read_f64_into_unchecked","","<strong>DEPRECATED</strong>.",0,[[]]],[10,"write_u16_into","","Writes unsigned 16 bit integers from <code>src</code> into <code>dst</code>.",0,[[]]],[10,"write_u32_into","","Writes unsigned 32 bit integers from <code>src</code> into <code>dst</code>.",0,[[]]],[10,"write_u64_into","","Writes unsigned 64 bit integers from <code>src</code> into <code>dst</code>.",0,[[]]],[10,"write_u128_into","","Writes unsigned 128 bit integers from <code>src</code> into <code>dst</code>.",0,[[]]],[11,"write_i8_into","","Writes signed 8 bit integers from <code>src</code> into <code>dst</code>.",0,[[]]],[11,"write_i16_into","","Writes signed 16 bit integers from <code>src</code> into <code>dst</code>.",0,[[]]],[11,"write_i32_into","","Writes signed 32 bit integers from <code>src</code> into <code>dst</code>.",0,[[]]],[11,"write_i64_into","","Writes signed 64 bit integers from <code>src</code> into <code>dst</code>.",0,[[]]],[11,"write_i128_into","","Writes signed 128 bit integers from <code>src</code> into <code>dst</code>.",0,[[]]],[11,"write_f32_into","","Writes IEEE754 single-precision (4 bytes) floating point …",0,[[]]],[11,"write_f64_into","","Writes IEEE754 double-precision (8 bytes) floating point …",0,[[]]],[10,"from_slice_u16","","Converts the given slice of unsigned 16 bit integers to a …",0,[[]]],[10,"from_slice_u32","","Converts the given slice of unsigned 32 bit integers to a …",0,[[]]],[10,"from_slice_u64","","Converts the given slice of unsigned 64 bit integers to a …",0,[[]]],[10,"from_slice_u128","","Converts the given slice of unsigned 128 bit integers to …",0,[[]]],[11,"from_slice_i16","","Converts the given slice of signed 16 bit integers to a …",0,[[]]],[11,"from_slice_i32","","Converts the given slice of signed 32 bit integers to a …",0,[[]]],[11,"from_slice_i64","","Converts the given slice of signed 64 bit integers to a …",0,[[]]],[11,"from_slice_i128","","Converts the given slice of signed 128 bit integers to a …",0,[[]]],[10,"from_slice_f32","","Converts the given slice of IEEE754 single-precision (4 …",0,[[]]],[10,"from_slice_f64","","Converts the given slice of IEEE754 double-precision (8 …",0,[[]]],[4,"BigEndian","","Defines big-endian serialization.",null,null],[6,"BE","","A type alias for <code>BigEndian</code>.",null,null],[4,"LittleEndian","","Defines little-endian serialization.",null,null],[6,"LE","","A type alias for <code>LittleEndian</code>.",null,null],[6,"NetworkEndian","","Defines network byte order serialization.",null,null],[6,"NativeEndian","","Defines system native-endian serialization.",null,null],[11,"from","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"read_u16","","",1,[[],["u16",15]]],[11,"read_u32","","",1,[[],["u32",15]]],[11,"read_u64","","",1,[[],["u64",15]]],[11,"read_u128","","",1,[[],["u128",15]]],[11,"read_uint","","",1,[[["usize",15]],["u64",15]]],[11,"read_uint128","","",1,[[["usize",15]],["u128",15]]],[11,"write_u16","","",1,[[["u16",15]]]],[11,"write_u32","","",1,[[["u32",15]]]],[11,"write_u64","","",1,[[["u64",15]]]],[11,"write_u128","","",1,[[["u128",15]]]],[11,"write_uint","","",1,[[["usize",15],["u64",15]]]],[11,"write_uint128","","",1,[[["usize",15],["u128",15]]]],[11,"read_u16_into","","",1,[[]]],[11,"read_u32_into","","",1,[[]]],[11,"read_u64_into","","",1,[[]]],[11,"read_u128_into","","",1,[[]]],[11,"write_u16_into","","",1,[[]]],[11,"write_u32_into","","",1,[[]]],[11,"write_u64_into","","",1,[[]]],[11,"write_u128_into","","",1,[[]]],[11,"from_slice_u16","","",1,[[]]],[11,"from_slice_u32","","",1,[[]]],[11,"from_slice_u64","","",1,[[]]],[11,"from_slice_u128","","",1,[[]]],[11,"from_slice_f32","","",1,[[]]],[11,"from_slice_f64","","",1,[[]]],[11,"read_u16","","",2,[[],["u16",15]]],[11,"read_u32","","",2,[[],["u32",15]]],[11,"read_u64","","",2,[[],["u64",15]]],[11,"read_u128","","",2,[[],["u128",15]]],[11,"read_uint","","",2,[[["usize",15]],["u64",15]]],[11,"read_uint128","","",2,[[["usize",15]],["u128",15]]],[11,"write_u16","","",2,[[["u16",15]]]],[11,"write_u32","","",2,[[["u32",15]]]],[11,"write_u64","","",2,[[["u64",15]]]],[11,"write_u128","","",2,[[["u128",15]]]],[11,"write_uint","","",2,[[["usize",15],["u64",15]]]],[11,"write_uint128","","",2,[[["usize",15],["u128",15]]]],[11,"read_u16_into","","",2,[[]]],[11,"read_u32_into","","",2,[[]]],[11,"read_u64_into","","",2,[[]]],[11,"read_u128_into","","",2,[[]]],[11,"write_u16_into","","",2,[[]]],[11,"write_u32_into","","",2,[[]]],[11,"write_u64_into","","",2,[[]]],[11,"write_u128_into","","",2,[[]]],[11,"from_slice_u16","","",2,[[]]],[11,"from_slice_u32","","",2,[[]]],[11,"from_slice_u64","","",2,[[]]],[11,"from_slice_u128","","",2,[[]]],[11,"from_slice_f32","","",2,[[]]],[11,"from_slice_f64","","",2,[[]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"eq","","",1,[[["bigendian",4]],["bool",15]]],[11,"eq","","",2,[[["littleendian",4]],["bool",15]]],[11,"cmp","","",1,[[["bigendian",4]],["ordering",4]]],[11,"cmp","","",2,[[["littleendian",4]],["ordering",4]]],[11,"partial_cmp","","",1,[[["bigendian",4]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",2,[[["littleendian",4]],[["ordering",4],["option",4]]]],[11,"hash","","",1,[[]]],[11,"hash","","",2,[[]]],[11,"clone","","",1,[[],["bigendian",4]]],[11,"clone","","",2,[[],["littleendian",4]]],[11,"default","","",1,[[],["bigendian",4]]],[11,"default","","",2,[[],["littleendian",4]]]],"p":[[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]},\
"embedded_graphics":{"doc":"This crate aims to make drawing 2D graphics primitives …","i":[[0,"drawable","embedded_graphics","<code>Drawable</code> trait and helpers",null,null],[8,"Drawable","embedded_graphics::drawable","Marks an object as \\\"drawable\\\". Must be implemented for …",null,null],[10,"draw","","Draw the graphics object using the supplied DrawTarget.",0,[[],["result",4]]],[3,"Pixel","","A single pixel.",null,null],[12,"0","","",1,null],[12,"1","","",1,null],[0,"fonts","embedded_graphics","Monospaced bitmap fonts.",null,null],[3,"StyledTextIterator","embedded_graphics::fonts","Pixel iterator for styled text.",null,null],[3,"Text","","A text object.",null,null],[12,"text","","The string.",2,null],[12,"position","","The position.",2,null],[3,"Font12x16","","12x16 pixel monospace font.",null,null],[3,"Font24x32","","24x32 pixel monospace font.",null,null],[3,"Font6x12","","6x12 pixel monospace font.",null,null],[3,"Font6x6","","6x6 pixel variable width font.",null,null],[3,"Font6x8","","6x8 pixel monospace font.",null,null],[3,"Font8x16","","8x16 pixel monospace font.",null,null],[8,"Font","","Monospaced bitmap font.",null,null],[18,"FONT_IMAGE","","Raw image data containing the font.",3,null],[18,"FONT_IMAGE_WIDTH","","The width of the raw image data.",3,null],[18,"CHARACTER_SIZE","","Size of a single character in pixel.",3,null],[18,"CHARACTER_SPACING","","Spacing between characters.",3,null],[18,"VARIABLE_WIDTH","","Whether characters have a variable width or not.",3,null],[10,"char_offset","","Returns the position a character in the font.",3,[[["char",15]],["u32",15]]],[11,"char_width","","Returns the actual width of a character in the font.",3,[[["char",15]],["u32",15]]],[11,"character_pixel","","Returns the value of a pixel in a character in the font.",3,[[["u32",15],["char",15]],["bool",15]]],[0,"geometry","embedded_graphics","Geometry module.",null,null],[3,"Point","embedded_graphics::geometry","2D point.",null,null],[12,"x","","The x coordinate.",4,null],[12,"y","","The y coordinate.",4,null],[3,"Size","","2D size.",null,null],[12,"width","","The width.",5,null],[12,"height","","The height.",5,null],[8,"Dimensions","","Adds the ability to get the dimensions/position of a …",null,null],[10,"top_left","","Get the top left corner of the bounding box for an object",6,[[],["point",3]]],[10,"bottom_right","","Get the bottom right corner of the bounding box for an …",6,[[],["point",3]]],[10,"size","","Get the width and height for an object",6,[[],["size",3]]],[0,"image","embedded_graphics","Image support for embedded-graphics",null,null],[3,"ImageRaw","embedded_graphics::image","An image constructed from a slice of raw pixel data.",null,null],[6,"ImageRawBE","","Image with big endian data.",null,null],[6,"ImageRawLE","","Image with little endian data.",null,null],[8,"IntoPixelIter","","Conversion into an iterator over the pixels of the image.",null,null],[16,"PixelIterator","","Iterator over pixels in the image",7,null],[10,"pixel_iter","","Get an iterator over the pixels of the image",7,[[]]],[8,"ImageDimensions","","A trait to get the dimensions of an image.",null,null],[10,"width","","Get the width in pixels of an image",8,[[],["u32",15]]],[10,"height","","Get the height in pixels of an image",8,[[],["u32",15]]],[3,"Image","","Image drawable.",null,null],[11,"new","","Create a new <code>Image</code> with the given image pixel data.",9,[[["point",3]]]],[3,"ImageIterator","","Pixel iterator over <code>Image</code> objects",null,null],[0,"mock_display","embedded_graphics","Mock display for use in tests.",null,null],[3,"MockDisplay","embedded_graphics::mock_display","Mock display struct",null,null],[11,"new","","Creates a new empty mock display.",10,[[]]],[11,"width","","Returns the width of the display.",10,[[],["usize",15]]],[11,"height","","Returns the height of the display.",10,[[],["usize",15]]],[11,"get_pixel","","Returns the color of a pixel.",10,[[["point",3]],["option",4]]],[11,"set_pixel","","Changes the color of a pixel.",10,[[["point",3],["option",4]]]],[11,"from_pattern","","Creates a new mock display from a character pattern.",10,[[],["mockdisplay",3]]],[8,"ColorMapping","","Mapping between <code>char</code>s and colors.",null,null],[10,"char_to_color","","Converts a char into a color of type <code>C</code>.",11,[[["char",15]]]],[10,"color_to_char","","Converts a color of type <code>C</code> into a char.",11,[[],["char",15]]],[0,"pixelcolor","embedded_graphics","Pixel color types.",null,null],[0,"raw","embedded_graphics::pixelcolor","Raw color types.",null,null],[8,"RawData","embedded_graphics::pixelcolor::raw","Trait implemented by all <code>RawUx</code> types.",null,null],[16,"Storage","","Storage type.",12,null],[18,"BITS_PER_PIXEL","","Bits per pixel.",12,null],[10,"into_inner","","Converts this raw data into the storage type.",12,[[]]],[10,"from_u32","","Converts a <code>u32</code> into a <code>RawData</code> type.",12,[[["u32",15]]]],[3,"RawU1","","1 bit per pixel raw data.",null,null],[11,"new","","Creates a new color from the least significant",13,[[["u8",15]]]],[3,"RawU2","","2 bits per pixel raw data.",null,null],[11,"new","","Creates a new color from the least significant",14,[[["u8",15]]]],[3,"RawU4","","4 bits per pixel raw data.",null,null],[11,"new","","Creates a new color from the least significant",15,[[["u8",15]]]],[3,"RawU8","","8 bits per pixel raw data.",null,null],[11,"new","","Creates a new color from the least significant",16,[[["u8",15]]]],[3,"RawU16","","16 bits per pixel raw data.",null,null],[11,"new","","Creates a new color from the least significant",17,[[["u16",15]]]],[3,"RawU24","","24 bits per pixel raw data.",null,null],[11,"new","","Creates a new color from the least significant",18,[[["u32",15]]]],[3,"RawU32","","32 bits per pixel raw data.",null,null],[11,"new","","Creates a new color from the least significant",19,[[["u32",15]]]],[8,"ByteOrder","","Raw data byte order.",null,null],[4,"LittleEndian","","Little endian byte order marker.",null,null],[4,"BigEndian","","Big endian byte order marker.",null,null],[4,"BinaryColor","embedded_graphics::pixelcolor","Binary color.",null,null],[13,"Off","","Inactive pixel.",20,null],[13,"On","","Active pixel.",20,null],[8,"GrayColor","","Grayscale color.",null,null],[10,"luma","","Returns the luma channel value.",21,[[],["u8",15]]],[18,"BLACK","","Black color (0% luma)",21,null],[18,"WHITE","","White color (100% luma)",21,null],[3,"Gray2","","2 bit grayscale color.",null,null],[3,"Gray4","","4 bit grayscale color.",null,null],[3,"Gray8","","8 bit grayscale color.",null,null],[8,"RgbColor","","RGB color.",null,null],[10,"r","","Returns the red channel value.",22,[[],["u8",15]]],[10,"g","","Returns the green channel value.",22,[[],["u8",15]]],[10,"b","","Returns the blue channel value.",22,[[],["u8",15]]],[18,"MAX_R","","The maximum value in the red channel.",22,null],[18,"MAX_G","","The maximum value in the green channel.",22,null],[18,"MAX_B","","The maximum value in the blue channel.",22,null],[18,"BLACK","","Black color (R: 0%, G: 0%, B: 0%)",22,null],[18,"RED","","Red color (R: 100%, G: 0%, B: 0%)",22,null],[18,"GREEN","","Green color (R: 0%, G: 100%, B: 0%)",22,null],[18,"BLUE","","Blue color (R: 0%, G: 0%, B: 100%)",22,null],[18,"YELLOW","","Yellow color (R: 100%, G: 100%, B: 0%)",22,null],[18,"MAGENTA","","Magenta color (R: 100%, G: 0%, B: 100%)",22,null],[18,"CYAN","","Cyan color (R: 0%, G: 100%, B: 100%)",22,null],[18,"WHITE","","White color (R: 100%, G: 100%, B: 100%)",22,null],[3,"Rgb555","","Rgb555 color.",null,null],[3,"Bgr555","","Bgr555 color.",null,null],[3,"Rgb565","","Rgb565 color.",null,null],[3,"Bgr565","","Bgr565 color.",null,null],[3,"Rgb888","","Rgb888 color.",null,null],[3,"Bgr888","","Bgr888 color.",null,null],[8,"PixelColor","","Pixel color trait.",null,null],[16,"Raw","","Raw data type.",23,null],[8,"IntoStorage","","Convert a <code>PixelColor</code> into its underlying storage type",null,null],[16,"Storage","","The underlying storage type for the pixel color",24,null],[10,"into_storage","","Convert the <code>PixelColor</code> into its raw storage form",24,[[]]],[0,"prelude","embedded_graphics","Prelude",null,null],[3,"Point","embedded_graphics::prelude","2D point.",null,null],[12,"x","","The x coordinate.",4,null],[12,"y","","The y coordinate.",4,null],[3,"Size","","2D size.",null,null],[12,"width","","The width.",5,null],[12,"height","","The height.",5,null],[8,"GrayColor","","Grayscale color.",null,null],[10,"luma","","Returns the luma channel value.",21,[[],["u8",15]]],[18,"BLACK","embedded_graphics::pixelcolor","Black color (0% luma)",21,null],[18,"WHITE","","White color (100% luma)",21,null],[8,"RgbColor","embedded_graphics::prelude","RGB color.",null,null],[10,"r","","Returns the red channel value.",22,[[],["u8",15]]],[10,"g","","Returns the green channel value.",22,[[],["u8",15]]],[10,"b","","Returns the blue channel value.",22,[[],["u8",15]]],[18,"MAX_R","embedded_graphics::pixelcolor","The maximum value in the red channel.",22,null],[18,"MAX_G","","The maximum value in the green channel.",22,null],[18,"MAX_B","","The maximum value in the blue channel.",22,null],[18,"BLACK","","Black color (R: 0%, G: 0%, B: 0%)",22,null],[18,"RED","","Red color (R: 100%, G: 0%, B: 0%)",22,null],[18,"GREEN","","Green color (R: 0%, G: 100%, B: 0%)",22,null],[18,"BLUE","","Blue color (R: 0%, G: 0%, B: 100%)",22,null],[18,"YELLOW","","Yellow color (R: 100%, G: 100%, B: 0%)",22,null],[18,"MAGENTA","","Magenta color (R: 100%, G: 0%, B: 100%)",22,null],[18,"CYAN","","Cyan color (R: 0%, G: 100%, B: 100%)",22,null],[18,"WHITE","","White color (R: 100%, G: 100%, B: 100%)",22,null],[8,"DrawTarget","embedded_graphics::prelude","Defines a display that can be used to render <code>Drawable</code> …",null,null],[16,"Error","","Error type to return when a drawing operation fails.",25,null],[10,"draw_pixel","","Draws a pixel on the display.",25,[[["pixel",3]],["result",4]]],[11,"draw_iter","","Draws an object from an iterator over its pixels.",25,[[],["result",4]]],[10,"size","","Returns the dimensions of the <code>DrawTarget</code> in pixels.",25,[[],["size",3]]],[11,"clear","","Clears the display with the supplied color.",25,[[],["result",4]]],[11,"draw_line","","Draws a styled line primitive.",25,[[["styled",3]],["result",4]]],[11,"draw_triangle","","Draws a styled triangle primitive.",25,[[["styled",3]],["result",4]]],[11,"draw_rectangle","","Draws a styled rectangle primitive.",25,[[["styled",3]],["result",4]]],[11,"draw_circle","","Draws a styled circle primitive.",25,[[["styled",3]],["result",4]]],[11,"draw_image","","Draws an image with known size",25,[[["image",3]],["result",4]]],[0,"primitives","embedded_graphics","Graphics primitives",null,null],[0,"circle","embedded_graphics::primitives","The circle primitive",null,null],[3,"Circle","embedded_graphics::primitives::circle","Circle primitive",null,null],[12,"center","","Center point of circle",26,null],[12,"radius","","Radius of the circle",26,null],[11,"new","","Create a new circle centered around a given point with a …",26,[[["u32",15],["point",3]]]],[3,"StyledCircleIterator","","Pixel iterator for each pixel in the circle border",null,null],[0,"line","embedded_graphics::primitives","The line primitive",null,null],[3,"Line","embedded_graphics::primitives::line","Line primitive",null,null],[12,"start","","Start point",27,null],[12,"end","","End point",27,null],[11,"new","","Create a new line",27,[[["point",3]]]],[3,"StyledLineIterator","","Pixel iterator for each pixel in the line",null,null],[0,"rectangle","embedded_graphics::primitives","The rectangle primitive. Also good for drawing squares.",null,null],[3,"Rectangle","embedded_graphics::primitives::rectangle","Rectangle primitive",null,null],[12,"top_left","","Top left point of the rect",28,null],[12,"bottom_right","","Bottom right point of the rect",28,null],[11,"new","","Create a new rectangle from the top left point to the …",28,[[["point",3]]]],[3,"StyledRectangleIterator","","Pixel iterator for each pixel in the rect border",null,null],[0,"triangle","embedded_graphics::primitives","The triangle primitive.",null,null],[3,"Triangle","embedded_graphics::primitives::triangle","Triangle primitive",null,null],[12,"p1","","First point of the triangle",29,null],[12,"p2","","Second point of the triangle",29,null],[12,"p3","","Third point of the triangle",29,null],[11,"new","","Create a new triangle with a given style",29,[[["point",3]]]],[11,"from_points","","Creates a new triangle from an array of points.",29,[[]]],[3,"StyledTriangleIterator","","Pixel iterator for each pixel in the triangle border",null,null],[8,"Primitive","embedded_graphics::primitives","Primitive trait",null,null],[11,"into_styled","","Converts this primitive into a <code>Styled</code>.",30,[[["primitivestyle",3]],[["styled",3],["primitivestyle",3]]]],[0,"style","embedded_graphics","Styling struct to customize the look of objects.",null,null],[3,"PrimitiveStyle","embedded_graphics::style","Style properties for primitives.",null,null],[12,"fill_color","","Fill color of the primitive.",31,null],[12,"stroke_color","","Stroke color of the primitive.",31,null],[12,"stroke_width","","Stroke width in pixels.",31,null],[3,"PrimitiveStyleBuilder","","Primitive style builder.",null,null],[3,"Styled","","Styled.",null,null],[12,"primitive","","Primitive.",32,null],[12,"style","","Style.",32,null],[3,"TextStyle","","Style properties for text.",null,null],[12,"text_color","","Text color.",33,null],[12,"background_color","","Background color.",33,null],[12,"font","","Font.",33,null],[3,"TextStyleBuilder","","Text style builder.",null,null],[0,"transform","embedded_graphics","Transformations for graphics objects",null,null],[8,"Transform","embedded_graphics::transform","Transform operations",null,null],[10,"translate","","Move the origin of an object by a given number of (x, y) …",34,[[["point",3]]]],[10,"translate_mut","","Move the origin of an object by a given number of (x, y) …",34,[[["point",3]]]],[8,"DrawTarget","embedded_graphics","Defines a display that can be used to render <code>Drawable</code> …",null,null],[16,"Error","","Error type to return when a drawing operation fails.",25,null],[10,"draw_pixel","","Draws a pixel on the display.",25,[[["pixel",3]],["result",4]]],[11,"draw_iter","embedded_graphics::prelude","Draws an object from an iterator over its pixels.",25,[[],["result",4]]],[10,"size","embedded_graphics","Returns the dimensions of the <code>DrawTarget</code> in pixels.",25,[[],["size",3]]],[11,"clear","embedded_graphics::prelude","Clears the display with the supplied color.",25,[[],["result",4]]],[11,"draw_line","","Draws a styled line primitive.",25,[[["styled",3]],["result",4]]],[11,"draw_triangle","","Draws a styled triangle primitive.",25,[[["styled",3]],["result",4]]],[11,"draw_rectangle","","Draws a styled rectangle primitive.",25,[[["styled",3]],["result",4]]],[11,"draw_circle","","Draws a styled circle primitive.",25,[[["styled",3]],["result",4]]],[11,"draw_image","","Draws an image with known size",25,[[["image",3]],["result",4]]],[14,"egtext","embedded_graphics","Creates a styled text.",null,null],[14,"egcircle","","Create a <code>Circle</code> with optional styling using a convenient …",null,null],[14,"egline","","Create a <code>Line</code> with optional styling using a convenient …",null,null],[14,"egrectangle","","Create a <code>Rectangle</code> with optional styling using a …",null,null],[14,"egtriangle","","Create a <code>Triangle</code> with optional styling using a …",null,null],[14,"primitive_style","","Create a <code>PrimitiveStyle</code>",null,null],[14,"text_style","","Create a <code>TextStyle</code>",null,null],[11,"from","embedded_graphics::drawable","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","embedded_graphics::fonts","",35,[[]]],[11,"borrow","","",35,[[]]],[11,"borrow_mut","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"into","","",35,[[]]],[11,"try_into","","",35,[[],["result",4]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"from","","",36,[[]]],[11,"borrow","","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"into","","",36,[[]]],[11,"try_into","","",36,[[],["result",4]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"from","","",37,[[]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"into","","",37,[[]]],[11,"try_into","","",37,[[],["result",4]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"from","","",38,[[]]],[11,"borrow","","",38,[[]]],[11,"borrow_mut","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"into","","",38,[[]]],[11,"try_into","","",38,[[],["result",4]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"from","","",39,[[]]],[11,"borrow","","",39,[[]]],[11,"borrow_mut","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"into","","",39,[[]]],[11,"try_into","","",39,[[],["result",4]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"from","","",40,[[]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"into","","",40,[[]]],[11,"try_into","","",40,[[],["result",4]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",41,[[]]],[11,"borrow","","",41,[[]]],[11,"borrow_mut","","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"into","","",41,[[]]],[11,"try_into","","",41,[[],["result",4]]],[11,"into_iter","","",41,[[]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"from","embedded_graphics::geometry","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"into","","",4,[[]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"into","","",5,[[]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","embedded_graphics::image","",42,[[]]],[11,"borrow","","",42,[[]]],[11,"borrow_mut","","",42,[[]]],[11,"try_from","","",42,[[],["result",4]]],[11,"into","","",42,[[]]],[11,"try_into","","",42,[[],["result",4]]],[11,"type_id","","",42,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"into","","",9,[[]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",43,[[]]],[11,"borrow","","",43,[[]]],[11,"borrow_mut","","",43,[[]]],[11,"try_from","","",43,[[],["result",4]]],[11,"into","","",43,[[]]],[11,"try_into","","",43,[[],["result",4]]],[11,"into_iter","","",43,[[]]],[11,"type_id","","",43,[[],["typeid",3]]],[11,"from","embedded_graphics::mock_display","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"into","","",10,[[]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","embedded_graphics::pixelcolor","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"into","","",20,[[]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"from","","",44,[[]]],[11,"borrow","","",44,[[]]],[11,"borrow_mut","","",44,[[]]],[11,"try_from","","",44,[[],["result",4]]],[11,"into","","",44,[[]]],[11,"try_into","","",44,[[],["result",4]]],[11,"type_id","","",44,[[],["typeid",3]]],[11,"from","","",45,[[]]],[11,"borrow","","",45,[[]]],[11,"borrow_mut","","",45,[[]]],[11,"try_from","","",45,[[],["result",4]]],[11,"into","","",45,[[]]],[11,"try_into","","",45,[[],["result",4]]],[11,"type_id","","",45,[[],["typeid",3]]],[11,"from","","",46,[[]]],[11,"borrow","","",46,[[]]],[11,"borrow_mut","","",46,[[]]],[11,"try_from","","",46,[[],["result",4]]],[11,"into","","",46,[[]]],[11,"try_into","","",46,[[],["result",4]]],[11,"type_id","","",46,[[],["typeid",3]]],[11,"from","embedded_graphics::pixelcolor::raw","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"into","","",13,[[]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"into","","",14,[[]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"into","","",15,[[]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"into","","",16,[[]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"from","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"into","","",17,[[]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"from","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"into","","",18,[[]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"from","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"into","","",19,[[]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"from","","",47,[[]]],[11,"borrow","","",47,[[]]],[11,"borrow_mut","","",47,[[]]],[11,"try_from","","",47,[[],["result",4]]],[11,"into","","",47,[[]]],[11,"try_into","","",47,[[],["result",4]]],[11,"type_id","","",47,[[],["typeid",3]]],[11,"from","","",48,[[]]],[11,"borrow","","",48,[[]]],[11,"borrow_mut","","",48,[[]]],[11,"try_from","","",48,[[],["result",4]]],[11,"into","","",48,[[]]],[11,"try_into","","",48,[[],["result",4]]],[11,"type_id","","",48,[[],["typeid",3]]],[11,"from","embedded_graphics::pixelcolor","",49,[[]]],[11,"borrow","","",49,[[]]],[11,"borrow_mut","","",49,[[]]],[11,"try_from","","",49,[[],["result",4]]],[11,"into","","",49,[[]]],[11,"try_into","","",49,[[],["result",4]]],[11,"type_id","","",49,[[],["typeid",3]]],[11,"from","","",50,[[]]],[11,"borrow","","",50,[[]]],[11,"borrow_mut","","",50,[[]]],[11,"try_from","","",50,[[],["result",4]]],[11,"into","","",50,[[]]],[11,"try_into","","",50,[[],["result",4]]],[11,"type_id","","",50,[[],["typeid",3]]],[11,"from","","",51,[[]]],[11,"borrow","","",51,[[]]],[11,"borrow_mut","","",51,[[]]],[11,"try_from","","",51,[[],["result",4]]],[11,"into","","",51,[[]]],[11,"try_into","","",51,[[],["result",4]]],[11,"type_id","","",51,[[],["typeid",3]]],[11,"from","","",52,[[]]],[11,"borrow","","",52,[[]]],[11,"borrow_mut","","",52,[[]]],[11,"try_from","","",52,[[],["result",4]]],[11,"into","","",52,[[]]],[11,"try_into","","",52,[[],["result",4]]],[11,"type_id","","",52,[[],["typeid",3]]],[11,"from","","",53,[[]]],[11,"borrow","","",53,[[]]],[11,"borrow_mut","","",53,[[]]],[11,"try_from","","",53,[[],["result",4]]],[11,"into","","",53,[[]]],[11,"try_into","","",53,[[],["result",4]]],[11,"type_id","","",53,[[],["typeid",3]]],[11,"from","","",54,[[]]],[11,"borrow","","",54,[[]]],[11,"borrow_mut","","",54,[[]]],[11,"try_from","","",54,[[],["result",4]]],[11,"into","","",54,[[]]],[11,"try_into","","",54,[[],["result",4]]],[11,"type_id","","",54,[[],["typeid",3]]],[11,"from","embedded_graphics::primitives::circle","",26,[[]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"into","","",26,[[]]],[11,"try_into","","",26,[[],["result",4]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"from","","",55,[[]]],[11,"borrow","","",55,[[]]],[11,"borrow_mut","","",55,[[]]],[11,"try_from","","",55,[[],["result",4]]],[11,"into","","",55,[[]]],[11,"try_into","","",55,[[],["result",4]]],[11,"into_iter","","",55,[[]]],[11,"type_id","","",55,[[],["typeid",3]]],[11,"from","embedded_graphics::primitives::line","",27,[[]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"into","","",27,[[]]],[11,"try_into","","",27,[[],["result",4]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"from","","",56,[[]]],[11,"borrow","","",56,[[]]],[11,"borrow_mut","","",56,[[]]],[11,"try_from","","",56,[[],["result",4]]],[11,"into","","",56,[[]]],[11,"try_into","","",56,[[],["result",4]]],[11,"into_iter","","",56,[[]]],[11,"type_id","","",56,[[],["typeid",3]]],[11,"from","embedded_graphics::primitives::rectangle","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"into","","",28,[[]]],[11,"try_into","","",28,[[],["result",4]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"from","","",57,[[]]],[11,"borrow","","",57,[[]]],[11,"borrow_mut","","",57,[[]]],[11,"try_from","","",57,[[],["result",4]]],[11,"into","","",57,[[]]],[11,"try_into","","",57,[[],["result",4]]],[11,"into_iter","","",57,[[]]],[11,"type_id","","",57,[[],["typeid",3]]],[11,"from","embedded_graphics::primitives::triangle","",29,[[]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"into","","",29,[[]]],[11,"try_into","","",29,[[],["result",4]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"from","","",58,[[]]],[11,"borrow","","",58,[[]]],[11,"borrow_mut","","",58,[[]]],[11,"try_from","","",58,[[],["result",4]]],[11,"into","","",58,[[]]],[11,"try_into","","",58,[[],["result",4]]],[11,"into_iter","","",58,[[]]],[11,"type_id","","",58,[[],["typeid",3]]],[11,"from","embedded_graphics::style","",31,[[]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"into","","",31,[[]]],[11,"try_into","","",31,[[],["result",4]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"from","","",59,[[]]],[11,"borrow","","",59,[[]]],[11,"borrow_mut","","",59,[[]]],[11,"try_from","","",59,[[],["result",4]]],[11,"into","","",59,[[]]],[11,"try_into","","",59,[[],["result",4]]],[11,"type_id","","",59,[[],["typeid",3]]],[11,"from","","",32,[[]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"into","","",32,[[]]],[11,"try_into","","",32,[[],["result",4]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"from","","",33,[[]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"into","","",33,[[]]],[11,"try_into","","",33,[[],["result",4]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"from","","",60,[[]]],[11,"borrow","","",60,[[]]],[11,"borrow_mut","","",60,[[]]],[11,"try_from","","",60,[[],["result",4]]],[11,"into","","",60,[[]]],[11,"try_into","","",60,[[],["result",4]]],[11,"type_id","","",60,[[],["typeid",3]]],[11,"draw_pixel","embedded_graphics::mock_display","",10,[[["pixel",3]],["result",4]]],[11,"size","","",10,[[],["size",3]]],[11,"draw","embedded_graphics::drawable","",1,[[],["result",4]]],[11,"char_offset","embedded_graphics::fonts","",35,[[["char",15]],["u32",15]]],[11,"char_offset","","",36,[[["char",15]],["u32",15]]],[11,"char_offset","","",37,[[["char",15]],["u32",15]]],[11,"char_offset","","",38,[[["char",15]],["u32",15]]],[11,"char_offset","","",39,[[["char",15]],["u32",15]]],[11,"char_offset","","",40,[[["char",15]],["u32",15]]],[11,"top_left","embedded_graphics::style","",32,[[],["point",3]]],[11,"bottom_right","","",32,[[],["point",3]]],[11,"size","","Returns the size of the bounding box of a styled text.",32,[[],["size",3]]],[11,"top_left","embedded_graphics::image","",9,[[],["point",3]]],[11,"bottom_right","","",9,[[],["point",3]]],[11,"size","","",9,[[],["size",3]]],[11,"top_left","embedded_graphics::primitives::circle","",26,[[],["point",3]]],[11,"bottom_right","","",26,[[],["point",3]]],[11,"size","","",26,[[],["size",3]]],[11,"top_left","embedded_graphics::primitives::line","",27,[[],["point",3]]],[11,"bottom_right","","",27,[[],["point",3]]],[11,"size","","",27,[[],["size",3]]],[11,"top_left","embedded_graphics::primitives::rectangle","",28,[[],["point",3]]],[11,"bottom_right","","",28,[[],["point",3]]],[11,"size","","",28,[[],["size",3]]],[11,"top_left","embedded_graphics::primitives::triangle","",29,[[],["point",3]]],[11,"bottom_right","","",29,[[],["point",3]]],[11,"size","","",29,[[],["size",3]]],[11,"top_left","embedded_graphics::style","",32,[[],["point",3]]],[11,"bottom_right","","",32,[[],["point",3]]],[11,"size","","",32,[[],["size",3]]],[11,"width","embedded_graphics::image","",42,[[],["u32",15]]],[11,"height","","",42,[[],["u32",15]]],[11,"char_to_color","embedded_graphics::pixelcolor","",20,[[["char",15]]]],[11,"color_to_char","","",20,[[["binarycolor",4]],["char",15]]],[11,"char_to_color","","",46,[[["char",15]]]],[11,"color_to_char","","",46,[[["gray8",3]],["char",15]]],[11,"char_to_color","","",53,[[["char",15]]]],[11,"color_to_char","","",53,[[["rgb888",3]],["char",15]]],[11,"luma","","",44,[[],["u8",15]]],[11,"luma","","",45,[[],["u8",15]]],[11,"luma","","",46,[[],["u8",15]]],[11,"into_inner","embedded_graphics::pixelcolor::raw","",13,[[]]],[11,"from_u32","","",13,[[["u32",15]]]],[11,"into_inner","","",14,[[]]],[11,"from_u32","","",14,[[["u32",15]]]],[11,"into_inner","","",15,[[]]],[11,"from_u32","","",15,[[["u32",15]]]],[11,"into_inner","","",16,[[]]],[11,"from_u32","","",16,[[["u32",15]]]],[11,"into_inner","","",17,[[]]],[11,"from_u32","","",17,[[["u32",15]]]],[11,"into_inner","","",18,[[]]],[11,"from_u32","","",18,[[["u32",15]]]],[11,"into_inner","","",19,[[]]],[11,"from_u32","","",19,[[["u32",15]]]],[11,"r","embedded_graphics::pixelcolor","",49,[[],["u8",15]]],[11,"g","","",49,[[],["u8",15]]],[11,"b","","",49,[[],["u8",15]]],[11,"r","","",50,[[],["u8",15]]],[11,"g","","",50,[[],["u8",15]]],[11,"b","","",50,[[],["u8",15]]],[11,"r","","",51,[[],["u8",15]]],[11,"g","","",51,[[],["u8",15]]],[11,"b","","",51,[[],["u8",15]]],[11,"r","","",52,[[],["u8",15]]],[11,"g","","",52,[[],["u8",15]]],[11,"b","","",52,[[],["u8",15]]],[11,"r","","",53,[[],["u8",15]]],[11,"g","","",53,[[],["u8",15]]],[11,"b","","",53,[[],["u8",15]]],[11,"r","","",54,[[],["u8",15]]],[11,"g","","",54,[[],["u8",15]]],[11,"b","","",54,[[],["u8",15]]],[11,"translate","embedded_graphics::fonts","",2,[[["point",3]]]],[11,"translate_mut","","",2,[[["point",3]]]],[11,"translate","embedded_graphics::image","Translate the image by a given delta, returning a new …",9,[[["point",3]]]],[11,"translate_mut","","Translate the image by a given delta, modifying the …",9,[[["point",3]]]],[11,"translate","embedded_graphics::primitives::circle","Translate the circle center from its current position to …",26,[[["point",3]]]],[11,"translate_mut","","Translate the circle center from its current position to …",26,[[["point",3]]]],[11,"translate","embedded_graphics::primitives::line","Translate the line from its current position to a new …",27,[[["point",3]]]],[11,"translate_mut","","Translate the line from its current position to a new …",27,[[["point",3]]]],[11,"translate","embedded_graphics::primitives::rectangle","Translate the rect from its current position to a new …",28,[[["point",3]]]],[11,"translate_mut","","Translate the rect from its current position to a new …",28,[[["point",3]]]],[11,"translate","embedded_graphics::primitives::triangle","Translate the triangle from its current position to a new …",29,[[["point",3]]]],[11,"translate_mut","","Translate the triangle from its current position to a new …",29,[[["point",3]]]],[11,"translate","embedded_graphics::style","",32,[[["point",3]]]],[11,"translate_mut","","",32,[[["point",3]]]],[11,"from","embedded_graphics::geometry","",4,[[]]],[11,"from","","",4,[[]]],[11,"from","","",4,[[]]],[11,"from","","",5,[[]]],[11,"from","","",5,[[]]],[11,"from","","",5,[[]]],[11,"from","embedded_graphics::pixelcolor","",20,[[["rawu1",3]]]],[11,"from","embedded_graphics::pixelcolor::raw","",13,[[["binarycolor",4]]]],[11,"from","embedded_graphics::pixelcolor","",20,[[["bool",15]]]],[11,"from","","",49,[[["bgr555",3]]]],[11,"from","","",49,[[["rgb565",3]]]],[11,"from","","",49,[[["bgr565",3]]]],[11,"from","","",49,[[["rgb888",3]]]],[11,"from","","",49,[[["bgr888",3]]]],[11,"from","","",50,[[["rgb555",3]]]],[11,"from","","",50,[[["rgb565",3]]]],[11,"from","","",50,[[["bgr565",3]]]],[11,"from","","",50,[[["rgb888",3]]]],[11,"from","","",50,[[["bgr888",3]]]],[11,"from","","",51,[[["rgb555",3]]]],[11,"from","","",51,[[["bgr555",3]]]],[11,"from","","",51,[[["bgr565",3]]]],[11,"from","","",51,[[["rgb888",3]]]],[11,"from","","",51,[[["bgr888",3]]]],[11,"from","","",52,[[["rgb555",3]]]],[11,"from","","",52,[[["bgr555",3]]]],[11,"from","","",52,[[["rgb565",3]]]],[11,"from","","",52,[[["rgb888",3]]]],[11,"from","","",52,[[["bgr888",3]]]],[11,"from","","",53,[[["rgb555",3]]]],[11,"from","","",53,[[["bgr555",3]]]],[11,"from","","",53,[[["rgb565",3]]]],[11,"from","","",53,[[["bgr565",3]]]],[11,"from","","",53,[[["bgr888",3]]]],[11,"from","","",54,[[["rgb555",3]]]],[11,"from","","",54,[[["bgr555",3]]]],[11,"from","","",54,[[["rgb565",3]]]],[11,"from","","",54,[[["bgr565",3]]]],[11,"from","","",54,[[["rgb888",3]]]],[11,"from","","",49,[[["gray2",3]]]],[11,"from","","",49,[[["gray4",3]]]],[11,"from","","",49,[[["gray8",3]]]],[11,"from","","",50,[[["gray2",3]]]],[11,"from","","",50,[[["gray4",3]]]],[11,"from","","",50,[[["gray8",3]]]],[11,"from","","",51,[[["gray2",3]]]],[11,"from","","",51,[[["gray4",3]]]],[11,"from","","",51,[[["gray8",3]]]],[11,"from","","",52,[[["gray2",3]]]],[11,"from","","",52,[[["gray4",3]]]],[11,"from","","",52,[[["gray8",3]]]],[11,"from","","",53,[[["gray2",3]]]],[11,"from","","",53,[[["gray4",3]]]],[11,"from","","",53,[[["gray8",3]]]],[11,"from","","",54,[[["gray2",3]]]],[11,"from","","",54,[[["gray4",3]]]],[11,"from","","",54,[[["gray8",3]]]],[11,"from","","",49,[[["binarycolor",4]]]],[11,"from","","",50,[[["binarycolor",4]]]],[11,"from","","",51,[[["binarycolor",4]]]],[11,"from","","",52,[[["binarycolor",4]]]],[11,"from","","",53,[[["binarycolor",4]]]],[11,"from","","",54,[[["binarycolor",4]]]],[11,"from","","",44,[[["binarycolor",4]]]],[11,"from","","",45,[[["binarycolor",4]]]],[11,"from","","",46,[[["binarycolor",4]]]],[11,"from","","",44,[[["rawu2",3]]]],[11,"from","embedded_graphics::pixelcolor::raw","",14,[[["gray2",3]]]],[11,"from","embedded_graphics::pixelcolor","",45,[[["rawu4",3]]]],[11,"from","embedded_graphics::pixelcolor::raw","",15,[[["gray4",3]]]],[11,"from","embedded_graphics::pixelcolor","",46,[[["rawu8",3]]]],[11,"from","embedded_graphics::pixelcolor::raw","",16,[[["gray8",3]]]],[11,"from","","",13,[[["u8",15]]]],[11,"from","","",14,[[["u8",15]]]],[11,"from","","",15,[[["u8",15]]]],[11,"from","","",16,[[["u8",15]]]],[11,"from","","",17,[[["u16",15]]]],[11,"from","","",18,[[["u32",15]]]],[11,"from","","",19,[[["u32",15]]]],[11,"from","embedded_graphics::pixelcolor","",49,[[["rawu16",3]]]],[11,"from","embedded_graphics::pixelcolor::raw","",17,[[["rgb555",3]]]],[11,"from","embedded_graphics::pixelcolor","",50,[[["rawu16",3]]]],[11,"from","embedded_graphics::pixelcolor::raw","",17,[[["bgr555",3]]]],[11,"from","embedded_graphics::pixelcolor","",51,[[["rawu16",3]]]],[11,"from","embedded_graphics::pixelcolor::raw","",17,[[["rgb565",3]]]],[11,"from","embedded_graphics::pixelcolor","",52,[[["rawu16",3]]]],[11,"from","embedded_graphics::pixelcolor::raw","",17,[[["bgr565",3]]]],[11,"from","embedded_graphics::pixelcolor","",53,[[["rawu24",3]]]],[11,"from","embedded_graphics::pixelcolor::raw","",18,[[["rgb888",3]]]],[11,"from","embedded_graphics::pixelcolor","",54,[[["rawu24",3]]]],[11,"from","embedded_graphics::pixelcolor::raw","",18,[[["bgr888",3]]]],[11,"fmt","embedded_graphics::drawable","",1,[[["formatter",3]],["result",6]]],[11,"fmt","embedded_graphics::fonts","",35,[[["formatter",3]],["result",6]]],[11,"fmt","","",36,[[["formatter",3]],["result",6]]],[11,"fmt","","",37,[[["formatter",3]],["result",6]]],[11,"fmt","","",38,[[["formatter",3]],["result",6]]],[11,"fmt","","",39,[[["formatter",3]],["result",6]]],[11,"fmt","","",40,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",41,[[["formatter",3]],["result",6]]],[11,"fmt","embedded_graphics::geometry","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","embedded_graphics::image","",42,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",43,[[["formatter",3]],["result",6]]],[11,"fmt","embedded_graphics::mock_display","",10,[[["formatter",3]],["result",6]]],[11,"fmt","embedded_graphics::pixelcolor","",20,[[["formatter",3]],["result",6]]],[11,"fmt","","",44,[[["formatter",3]],["result",6]]],[11,"fmt","","",45,[[["formatter",3]],["result",6]]],[11,"fmt","","",46,[[["formatter",3]],["result",6]]],[11,"fmt","embedded_graphics::pixelcolor::raw","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","","",19,[[["formatter",3]],["result",6]]],[11,"fmt","","",47,[[["formatter",3]],["result",6]]],[11,"fmt","","",48,[[["formatter",3]],["result",6]]],[11,"fmt","embedded_graphics::pixelcolor","",49,[[["formatter",3]],["result",6]]],[11,"fmt","","",50,[[["formatter",3]],["result",6]]],[11,"fmt","","",51,[[["formatter",3]],["result",6]]],[11,"fmt","","",52,[[["formatter",3]],["result",6]]],[11,"fmt","","",53,[[["formatter",3]],["result",6]]],[11,"fmt","","",54,[[["formatter",3]],["result",6]]],[11,"fmt","embedded_graphics::primitives::circle","",26,[[["formatter",3]],["result",6]]],[11,"fmt","","",55,[[["formatter",3]],["result",6]]],[11,"fmt","embedded_graphics::primitives::line","",27,[[["formatter",3]],["result",6]]],[11,"fmt","","",56,[[["formatter",3]],["result",6]]],[11,"fmt","embedded_graphics::primitives::rectangle","",28,[[["formatter",3]],["result",6]]],[11,"fmt","","",57,[[["formatter",3]],["result",6]]],[11,"fmt","embedded_graphics::primitives::triangle","",29,[[["formatter",3]],["result",6]]],[11,"fmt","","",58,[[["formatter",3]],["result",6]]],[11,"fmt","embedded_graphics::style","",31,[[["formatter",3]],["result",6]]],[11,"fmt","","",59,[[["formatter",3]],["result",6]]],[11,"fmt","","",32,[[["formatter",3]],["result",6]]],[11,"fmt","","",33,[[["formatter",3]],["result",6]]],[11,"fmt","","",60,[[["formatter",3]],["result",6]]],[11,"div","embedded_graphics::geometry","",4,[[["i32",15]],["point",3]]],[11,"div","","",5,[[["u32",15]],["size",3]]],[11,"sub","","",4,[[["point",3]],["point",3]]],[11,"sub","","Offsets a point by subtracting a size.",4,[[["size",3]],["point",3]]],[11,"sub","","",5,[[["size",3]],["size",3]]],[11,"eq","embedded_graphics::drawable","",1,[[["pixel",3]],["bool",15]]],[11,"ne","","",1,[[["pixel",3]],["bool",15]]],[11,"eq","embedded_graphics::fonts","",35,[[["font12x16",3]],["bool",15]]],[11,"eq","","",36,[[["font24x32",3]],["bool",15]]],[11,"eq","","",37,[[["font6x12",3]],["bool",15]]],[11,"eq","","",38,[[["font6x6",3]],["bool",15]]],[11,"eq","","",39,[[["font6x8",3]],["bool",15]]],[11,"eq","","",40,[[["font8x16",3]],["bool",15]]],[11,"eq","","",2,[[["text",3]],["bool",15]]],[11,"ne","","",2,[[["text",3]],["bool",15]]],[11,"eq","","",41,[[["styledtextiterator",3]],["bool",15]]],[11,"ne","","",41,[[["styledtextiterator",3]],["bool",15]]],[11,"eq","embedded_graphics::geometry","",4,[[["point",3]],["bool",15]]],[11,"ne","","",4,[[["point",3]],["bool",15]]],[11,"eq","","",5,[[["size",3]],["bool",15]]],[11,"ne","","",5,[[["size",3]],["bool",15]]],[11,"eq","embedded_graphics::image","",42,[[["imageraw",3]],["bool",15]]],[11,"ne","","",42,[[["imageraw",3]],["bool",15]]],[11,"eq","embedded_graphics::mock_display","",10,[[["mockdisplay",3]],["bool",15]]],[11,"eq","embedded_graphics::pixelcolor","",20,[[["binarycolor",4]],["bool",15]]],[11,"eq","","",44,[[["gray2",3]],["bool",15]]],[11,"ne","","",44,[[["gray2",3]],["bool",15]]],[11,"eq","","",45,[[["gray4",3]],["bool",15]]],[11,"ne","","",45,[[["gray4",3]],["bool",15]]],[11,"eq","","",46,[[["gray8",3]],["bool",15]]],[11,"ne","","",46,[[["gray8",3]],["bool",15]]],[11,"eq","embedded_graphics::pixelcolor::raw","",13,[[["rawu1",3]],["bool",15]]],[11,"ne","","",13,[[["rawu1",3]],["bool",15]]],[11,"eq","","",14,[[["rawu2",3]],["bool",15]]],[11,"ne","","",14,[[["rawu2",3]],["bool",15]]],[11,"eq","","",15,[[["rawu4",3]],["bool",15]]],[11,"ne","","",15,[[["rawu4",3]],["bool",15]]],[11,"eq","","",16,[[["rawu8",3]],["bool",15]]],[11,"ne","","",16,[[["rawu8",3]],["bool",15]]],[11,"eq","","",17,[[["rawu16",3]],["bool",15]]],[11,"ne","","",17,[[["rawu16",3]],["bool",15]]],[11,"eq","","",18,[[["rawu24",3]],["bool",15]]],[11,"ne","","",18,[[["rawu24",3]],["bool",15]]],[11,"eq","","",19,[[["rawu32",3]],["bool",15]]],[11,"ne","","",19,[[["rawu32",3]],["bool",15]]],[11,"eq","","",47,[[["littleendian",4]],["bool",15]]],[11,"eq","","",48,[[["bigendian",4]],["bool",15]]],[11,"eq","embedded_graphics::pixelcolor","",49,[[["rgb555",3]],["bool",15]]],[11,"ne","","",49,[[["rgb555",3]],["bool",15]]],[11,"eq","","",50,[[["bgr555",3]],["bool",15]]],[11,"ne","","",50,[[["bgr555",3]],["bool",15]]],[11,"eq","","",51,[[["rgb565",3]],["bool",15]]],[11,"ne","","",51,[[["rgb565",3]],["bool",15]]],[11,"eq","","",52,[[["bgr565",3]],["bool",15]]],[11,"ne","","",52,[[["bgr565",3]],["bool",15]]],[11,"eq","","",53,[[["rgb888",3]],["bool",15]]],[11,"ne","","",53,[[["rgb888",3]],["bool",15]]],[11,"eq","","",54,[[["bgr888",3]],["bool",15]]],[11,"ne","","",54,[[["bgr888",3]],["bool",15]]],[11,"eq","embedded_graphics::primitives::circle","",26,[[["circle",3]],["bool",15]]],[11,"ne","","",26,[[["circle",3]],["bool",15]]],[11,"eq","","",55,[[["styledcircleiterator",3]],["bool",15]]],[11,"ne","","",55,[[["styledcircleiterator",3]],["bool",15]]],[11,"eq","embedded_graphics::primitives::line","",27,[[["line",3]],["bool",15]]],[11,"ne","","",27,[[["line",3]],["bool",15]]],[11,"eq","","",56,[[["styledlineiterator",3]],["bool",15]]],[11,"ne","","",56,[[["styledlineiterator",3]],["bool",15]]],[11,"eq","embedded_graphics::primitives::rectangle","",28,[[["rectangle",3]],["bool",15]]],[11,"ne","","",28,[[["rectangle",3]],["bool",15]]],[11,"eq","","",57,[[["styledrectangleiterator",3]],["bool",15]]],[11,"ne","","",57,[[["styledrectangleiterator",3]],["bool",15]]],[11,"eq","embedded_graphics::primitives::triangle","",29,[[["triangle",3]],["bool",15]]],[11,"ne","","",29,[[["triangle",3]],["bool",15]]],[11,"eq","","",58,[[["styledtriangleiterator",3]],["bool",15]]],[11,"ne","","",58,[[["styledtriangleiterator",3]],["bool",15]]],[11,"eq","embedded_graphics::style","",31,[[["primitivestyle",3]],["bool",15]]],[11,"ne","","",31,[[["primitivestyle",3]],["bool",15]]],[11,"eq","","",59,[[["primitivestylebuilder",3]],["bool",15]]],[11,"ne","","",59,[[["primitivestylebuilder",3]],["bool",15]]],[11,"eq","","",32,[[["styled",3]],["bool",15]]],[11,"ne","","",32,[[["styled",3]],["bool",15]]],[11,"eq","","",33,[[["textstyle",3]],["bool",15]]],[11,"ne","","",33,[[["textstyle",3]],["bool",15]]],[11,"eq","","",60,[[["textstylebuilder",3]],["bool",15]]],[11,"ne","","",60,[[["textstylebuilder",3]],["bool",15]]],[11,"cmp","embedded_graphics::drawable","",1,[[["pixel",3]],["ordering",4]]],[11,"cmp","embedded_graphics::fonts","",35,[[["font12x16",3]],["ordering",4]]],[11,"cmp","","",36,[[["font24x32",3]],["ordering",4]]],[11,"cmp","","",37,[[["font6x12",3]],["ordering",4]]],[11,"cmp","","",38,[[["font6x6",3]],["ordering",4]]],[11,"cmp","","",39,[[["font6x8",3]],["ordering",4]]],[11,"cmp","","",40,[[["font8x16",3]],["ordering",4]]],[11,"cmp","","",2,[[["text",3]],["ordering",4]]],[11,"cmp","","",41,[[["styledtextiterator",3]],["ordering",4]]],[11,"cmp","embedded_graphics::geometry","",4,[[["point",3]],["ordering",4]]],[11,"cmp","","",5,[[["size",3]],["ordering",4]]],[11,"cmp","embedded_graphics::image","",42,[[["imageraw",3]],["ordering",4]]],[11,"cmp","embedded_graphics::pixelcolor","",20,[[["binarycolor",4]],["ordering",4]]],[11,"cmp","","",44,[[["gray2",3]],["ordering",4]]],[11,"cmp","","",45,[[["gray4",3]],["ordering",4]]],[11,"cmp","","",46,[[["gray8",3]],["ordering",4]]],[11,"cmp","embedded_graphics::pixelcolor::raw","",13,[[["rawu1",3]],["ordering",4]]],[11,"cmp","","",14,[[["rawu2",3]],["ordering",4]]],[11,"cmp","","",15,[[["rawu4",3]],["ordering",4]]],[11,"cmp","","",16,[[["rawu8",3]],["ordering",4]]],[11,"cmp","","",17,[[["rawu16",3]],["ordering",4]]],[11,"cmp","","",18,[[["rawu24",3]],["ordering",4]]],[11,"cmp","","",19,[[["rawu32",3]],["ordering",4]]],[11,"cmp","","",47,[[["littleendian",4]],["ordering",4]]],[11,"cmp","","",48,[[["bigendian",4]],["ordering",4]]],[11,"cmp","embedded_graphics::pixelcolor","",49,[[["rgb555",3]],["ordering",4]]],[11,"cmp","","",50,[[["bgr555",3]],["ordering",4]]],[11,"cmp","","",51,[[["rgb565",3]],["ordering",4]]],[11,"cmp","","",52,[[["bgr565",3]],["ordering",4]]],[11,"cmp","","",53,[[["rgb888",3]],["ordering",4]]],[11,"cmp","","",54,[[["bgr888",3]],["ordering",4]]],[11,"cmp","embedded_graphics::primitives::circle","",26,[[["circle",3]],["ordering",4]]],[11,"cmp","","",55,[[["styledcircleiterator",3]],["ordering",4]]],[11,"cmp","embedded_graphics::primitives::line","",27,[[["line",3]],["ordering",4]]],[11,"cmp","","",56,[[["styledlineiterator",3]],["ordering",4]]],[11,"cmp","embedded_graphics::primitives::rectangle","",28,[[["rectangle",3]],["ordering",4]]],[11,"cmp","","",57,[[["styledrectangleiterator",3]],["ordering",4]]],[11,"cmp","embedded_graphics::primitives::triangle","",29,[[["triangle",3]],["ordering",4]]],[11,"cmp","","",58,[[["styledtriangleiterator",3]],["ordering",4]]],[11,"cmp","embedded_graphics::style","",31,[[["primitivestyle",3]],["ordering",4]]],[11,"cmp","","",59,[[["primitivestylebuilder",3]],["ordering",4]]],[11,"cmp","","",32,[[["styled",3]],["ordering",4]]],[11,"cmp","","",33,[[["textstyle",3]],["ordering",4]]],[11,"cmp","","",60,[[["textstylebuilder",3]],["ordering",4]]],[11,"partial_cmp","embedded_graphics::drawable","",1,[[["pixel",3]],[["ordering",4],["option",4]]]],[11,"lt","","",1,[[["pixel",3]],["bool",15]]],[11,"le","","",1,[[["pixel",3]],["bool",15]]],[11,"gt","","",1,[[["pixel",3]],["bool",15]]],[11,"ge","","",1,[[["pixel",3]],["bool",15]]],[11,"partial_cmp","embedded_graphics::fonts","",35,[[["font12x16",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",36,[[["font24x32",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",37,[[["font6x12",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",38,[[["font6x6",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",39,[[["font6x8",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",40,[[["font8x16",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",2,[[["text",3]],[["ordering",4],["option",4]]]],[11,"lt","","",2,[[["text",3]],["bool",15]]],[11,"le","","",2,[[["text",3]],["bool",15]]],[11,"gt","","",2,[[["text",3]],["bool",15]]],[11,"ge","","",2,[[["text",3]],["bool",15]]],[11,"partial_cmp","","",41,[[["styledtextiterator",3]],[["ordering",4],["option",4]]]],[11,"lt","","",41,[[["styledtextiterator",3]],["bool",15]]],[11,"le","","",41,[[["styledtextiterator",3]],["bool",15]]],[11,"gt","","",41,[[["styledtextiterator",3]],["bool",15]]],[11,"ge","","",41,[[["styledtextiterator",3]],["bool",15]]],[11,"partial_cmp","embedded_graphics::geometry","",4,[[["point",3]],[["ordering",4],["option",4]]]],[11,"lt","","",4,[[["point",3]],["bool",15]]],[11,"le","","",4,[[["point",3]],["bool",15]]],[11,"gt","","",4,[[["point",3]],["bool",15]]],[11,"ge","","",4,[[["point",3]],["bool",15]]],[11,"partial_cmp","","",5,[[["size",3]],[["ordering",4],["option",4]]]],[11,"lt","","",5,[[["size",3]],["bool",15]]],[11,"le","","",5,[[["size",3]],["bool",15]]],[11,"gt","","",5,[[["size",3]],["bool",15]]],[11,"ge","","",5,[[["size",3]],["bool",15]]],[11,"partial_cmp","embedded_graphics::image","",42,[[["imageraw",3]],[["ordering",4],["option",4]]]],[11,"lt","","",42,[[["imageraw",3]],["bool",15]]],[11,"le","","",42,[[["imageraw",3]],["bool",15]]],[11,"gt","","",42,[[["imageraw",3]],["bool",15]]],[11,"ge","","",42,[[["imageraw",3]],["bool",15]]],[11,"partial_cmp","embedded_graphics::pixelcolor","",20,[[["binarycolor",4]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",44,[[["gray2",3]],[["ordering",4],["option",4]]]],[11,"lt","","",44,[[["gray2",3]],["bool",15]]],[11,"le","","",44,[[["gray2",3]],["bool",15]]],[11,"gt","","",44,[[["gray2",3]],["bool",15]]],[11,"ge","","",44,[[["gray2",3]],["bool",15]]],[11,"partial_cmp","","",45,[[["gray4",3]],[["ordering",4],["option",4]]]],[11,"lt","","",45,[[["gray4",3]],["bool",15]]],[11,"le","","",45,[[["gray4",3]],["bool",15]]],[11,"gt","","",45,[[["gray4",3]],["bool",15]]],[11,"ge","","",45,[[["gray4",3]],["bool",15]]],[11,"partial_cmp","","",46,[[["gray8",3]],[["ordering",4],["option",4]]]],[11,"lt","","",46,[[["gray8",3]],["bool",15]]],[11,"le","","",46,[[["gray8",3]],["bool",15]]],[11,"gt","","",46,[[["gray8",3]],["bool",15]]],[11,"ge","","",46,[[["gray8",3]],["bool",15]]],[11,"partial_cmp","embedded_graphics::pixelcolor::raw","",13,[[["rawu1",3]],[["ordering",4],["option",4]]]],[11,"lt","","",13,[[["rawu1",3]],["bool",15]]],[11,"le","","",13,[[["rawu1",3]],["bool",15]]],[11,"gt","","",13,[[["rawu1",3]],["bool",15]]],[11,"ge","","",13,[[["rawu1",3]],["bool",15]]],[11,"partial_cmp","","",14,[[["rawu2",3]],[["ordering",4],["option",4]]]],[11,"lt","","",14,[[["rawu2",3]],["bool",15]]],[11,"le","","",14,[[["rawu2",3]],["bool",15]]],[11,"gt","","",14,[[["rawu2",3]],["bool",15]]],[11,"ge","","",14,[[["rawu2",3]],["bool",15]]],[11,"partial_cmp","","",15,[[["rawu4",3]],[["ordering",4],["option",4]]]],[11,"lt","","",15,[[["rawu4",3]],["bool",15]]],[11,"le","","",15,[[["rawu4",3]],["bool",15]]],[11,"gt","","",15,[[["rawu4",3]],["bool",15]]],[11,"ge","","",15,[[["rawu4",3]],["bool",15]]],[11,"partial_cmp","","",16,[[["rawu8",3]],[["ordering",4],["option",4]]]],[11,"lt","","",16,[[["rawu8",3]],["bool",15]]],[11,"le","","",16,[[["rawu8",3]],["bool",15]]],[11,"gt","","",16,[[["rawu8",3]],["bool",15]]],[11,"ge","","",16,[[["rawu8",3]],["bool",15]]],[11,"partial_cmp","","",17,[[["rawu16",3]],[["ordering",4],["option",4]]]],[11,"lt","","",17,[[["rawu16",3]],["bool",15]]],[11,"le","","",17,[[["rawu16",3]],["bool",15]]],[11,"gt","","",17,[[["rawu16",3]],["bool",15]]],[11,"ge","","",17,[[["rawu16",3]],["bool",15]]],[11,"partial_cmp","","",18,[[["rawu24",3]],[["ordering",4],["option",4]]]],[11,"lt","","",18,[[["rawu24",3]],["bool",15]]],[11,"le","","",18,[[["rawu24",3]],["bool",15]]],[11,"gt","","",18,[[["rawu24",3]],["bool",15]]],[11,"ge","","",18,[[["rawu24",3]],["bool",15]]],[11,"partial_cmp","","",19,[[["rawu32",3]],[["ordering",4],["option",4]]]],[11,"lt","","",19,[[["rawu32",3]],["bool",15]]],[11,"le","","",19,[[["rawu32",3]],["bool",15]]],[11,"gt","","",19,[[["rawu32",3]],["bool",15]]],[11,"ge","","",19,[[["rawu32",3]],["bool",15]]],[11,"partial_cmp","","",47,[[["littleendian",4]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",48,[[["bigendian",4]],[["ordering",4],["option",4]]]],[11,"partial_cmp","embedded_graphics::pixelcolor","",49,[[["rgb555",3]],[["ordering",4],["option",4]]]],[11,"lt","","",49,[[["rgb555",3]],["bool",15]]],[11,"le","","",49,[[["rgb555",3]],["bool",15]]],[11,"gt","","",49,[[["rgb555",3]],["bool",15]]],[11,"ge","","",49,[[["rgb555",3]],["bool",15]]],[11,"partial_cmp","","",50,[[["bgr555",3]],[["ordering",4],["option",4]]]],[11,"lt","","",50,[[["bgr555",3]],["bool",15]]],[11,"le","","",50,[[["bgr555",3]],["bool",15]]],[11,"gt","","",50,[[["bgr555",3]],["bool",15]]],[11,"ge","","",50,[[["bgr555",3]],["bool",15]]],[11,"partial_cmp","","",51,[[["rgb565",3]],[["ordering",4],["option",4]]]],[11,"lt","","",51,[[["rgb565",3]],["bool",15]]],[11,"le","","",51,[[["rgb565",3]],["bool",15]]],[11,"gt","","",51,[[["rgb565",3]],["bool",15]]],[11,"ge","","",51,[[["rgb565",3]],["bool",15]]],[11,"partial_cmp","","",52,[[["bgr565",3]],[["ordering",4],["option",4]]]],[11,"lt","","",52,[[["bgr565",3]],["bool",15]]],[11,"le","","",52,[[["bgr565",3]],["bool",15]]],[11,"gt","","",52,[[["bgr565",3]],["bool",15]]],[11,"ge","","",52,[[["bgr565",3]],["bool",15]]],[11,"partial_cmp","","",53,[[["rgb888",3]],[["ordering",4],["option",4]]]],[11,"lt","","",53,[[["rgb888",3]],["bool",15]]],[11,"le","","",53,[[["rgb888",3]],["bool",15]]],[11,"gt","","",53,[[["rgb888",3]],["bool",15]]],[11,"ge","","",53,[[["rgb888",3]],["bool",15]]],[11,"partial_cmp","","",54,[[["bgr888",3]],[["ordering",4],["option",4]]]],[11,"lt","","",54,[[["bgr888",3]],["bool",15]]],[11,"le","","",54,[[["bgr888",3]],["bool",15]]],[11,"gt","","",54,[[["bgr888",3]],["bool",15]]],[11,"ge","","",54,[[["bgr888",3]],["bool",15]]],[11,"partial_cmp","embedded_graphics::primitives::circle","",26,[[["circle",3]],[["ordering",4],["option",4]]]],[11,"lt","","",26,[[["circle",3]],["bool",15]]],[11,"le","","",26,[[["circle",3]],["bool",15]]],[11,"gt","","",26,[[["circle",3]],["bool",15]]],[11,"ge","","",26,[[["circle",3]],["bool",15]]],[11,"partial_cmp","","",55,[[["styledcircleiterator",3]],[["ordering",4],["option",4]]]],[11,"lt","","",55,[[["styledcircleiterator",3]],["bool",15]]],[11,"le","","",55,[[["styledcircleiterator",3]],["bool",15]]],[11,"gt","","",55,[[["styledcircleiterator",3]],["bool",15]]],[11,"ge","","",55,[[["styledcircleiterator",3]],["bool",15]]],[11,"partial_cmp","embedded_graphics::primitives::line","",27,[[["line",3]],[["ordering",4],["option",4]]]],[11,"lt","","",27,[[["line",3]],["bool",15]]],[11,"le","","",27,[[["line",3]],["bool",15]]],[11,"gt","","",27,[[["line",3]],["bool",15]]],[11,"ge","","",27,[[["line",3]],["bool",15]]],[11,"partial_cmp","","",56,[[["styledlineiterator",3]],[["ordering",4],["option",4]]]],[11,"lt","","",56,[[["styledlineiterator",3]],["bool",15]]],[11,"le","","",56,[[["styledlineiterator",3]],["bool",15]]],[11,"gt","","",56,[[["styledlineiterator",3]],["bool",15]]],[11,"ge","","",56,[[["styledlineiterator",3]],["bool",15]]],[11,"partial_cmp","embedded_graphics::primitives::rectangle","",28,[[["rectangle",3]],[["ordering",4],["option",4]]]],[11,"lt","","",28,[[["rectangle",3]],["bool",15]]],[11,"le","","",28,[[["rectangle",3]],["bool",15]]],[11,"gt","","",28,[[["rectangle",3]],["bool",15]]],[11,"ge","","",28,[[["rectangle",3]],["bool",15]]],[11,"partial_cmp","","",57,[[["styledrectangleiterator",3]],[["ordering",4],["option",4]]]],[11,"lt","","",57,[[["styledrectangleiterator",3]],["bool",15]]],[11,"le","","",57,[[["styledrectangleiterator",3]],["bool",15]]],[11,"gt","","",57,[[["styledrectangleiterator",3]],["bool",15]]],[11,"ge","","",57,[[["styledrectangleiterator",3]],["bool",15]]],[11,"partial_cmp","embedded_graphics::primitives::triangle","",29,[[["triangle",3]],[["ordering",4],["option",4]]]],[11,"lt","","",29,[[["triangle",3]],["bool",15]]],[11,"le","","",29,[[["triangle",3]],["bool",15]]],[11,"gt","","",29,[[["triangle",3]],["bool",15]]],[11,"ge","","",29,[[["triangle",3]],["bool",15]]],[11,"partial_cmp","","",58,[[["styledtriangleiterator",3]],[["ordering",4],["option",4]]]],[11,"lt","","",58,[[["styledtriangleiterator",3]],["bool",15]]],[11,"le","","",58,[[["styledtriangleiterator",3]],["bool",15]]],[11,"gt","","",58,[[["styledtriangleiterator",3]],["bool",15]]],[11,"ge","","",58,[[["styledtriangleiterator",3]],["bool",15]]],[11,"partial_cmp","embedded_graphics::style","",31,[[["primitivestyle",3]],[["ordering",4],["option",4]]]],[11,"lt","","",31,[[["primitivestyle",3]],["bool",15]]],[11,"le","","",31,[[["primitivestyle",3]],["bool",15]]],[11,"gt","","",31,[[["primitivestyle",3]],["bool",15]]],[11,"ge","","",31,[[["primitivestyle",3]],["bool",15]]],[11,"partial_cmp","","",59,[[["primitivestylebuilder",3]],[["ordering",4],["option",4]]]],[11,"lt","","",59,[[["primitivestylebuilder",3]],["bool",15]]],[11,"le","","",59,[[["primitivestylebuilder",3]],["bool",15]]],[11,"gt","","",59,[[["primitivestylebuilder",3]],["bool",15]]],[11,"ge","","",59,[[["primitivestylebuilder",3]],["bool",15]]],[11,"partial_cmp","","",32,[[["styled",3]],[["ordering",4],["option",4]]]],[11,"lt","","",32,[[["styled",3]],["bool",15]]],[11,"le","","",32,[[["styled",3]],["bool",15]]],[11,"gt","","",32,[[["styled",3]],["bool",15]]],[11,"ge","","",32,[[["styled",3]],["bool",15]]],[11,"partial_cmp","","",33,[[["textstyle",3]],[["ordering",4],["option",4]]]],[11,"lt","","",33,[[["textstyle",3]],["bool",15]]],[11,"le","","",33,[[["textstyle",3]],["bool",15]]],[11,"gt","","",33,[[["textstyle",3]],["bool",15]]],[11,"ge","","",33,[[["textstyle",3]],["bool",15]]],[11,"partial_cmp","","",60,[[["textstylebuilder",3]],[["ordering",4],["option",4]]]],[11,"lt","","",60,[[["textstylebuilder",3]],["bool",15]]],[11,"le","","",60,[[["textstylebuilder",3]],["bool",15]]],[11,"gt","","",60,[[["textstylebuilder",3]],["bool",15]]],[11,"ge","","",60,[[["textstylebuilder",3]],["bool",15]]],[11,"add","embedded_graphics::geometry","",4,[[["point",3]],["point",3]]],[11,"add","","Offsets a point by adding a size.",4,[[["size",3]],["point",3]]],[11,"add","","",5,[[["size",3]],["size",3]]],[11,"mul","","",4,[[["i32",15]],["point",3]]],[11,"mul","","",5,[[["u32",15]],["size",3]]],[11,"neg","","",4,[[]]],[11,"add_assign","","",4,[[["point",3]]]],[11,"add_assign","","Offsets a point by adding a size.",4,[[["size",3]]]],[11,"add_assign","","",5,[[["size",3]]]],[11,"sub_assign","","",4,[[["point",3]]]],[11,"sub_assign","","Offsets a point by subtracting a size.",4,[[["size",3]]]],[11,"sub_assign","","",5,[[["size",3]]]],[11,"mul_assign","","",4,[[["i32",15]]]],[11,"mul_assign","","",5,[[["u32",15]]]],[11,"div_assign","","",4,[[["i32",15]]]],[11,"div_assign","","",5,[[["u32",15]]]],[11,"index","","",4,[[["usize",15]],["i32",15]]],[11,"index","","",5,[[["usize",15]],["u32",15]]],[11,"hash","embedded_graphics::drawable","",1,[[]]],[11,"hash","embedded_graphics::fonts","",35,[[]]],[11,"hash","","",36,[[]]],[11,"hash","","",37,[[]]],[11,"hash","","",38,[[]]],[11,"hash","","",39,[[]]],[11,"hash","","",40,[[]]],[11,"hash","","",2,[[]]],[11,"hash","","",41,[[]]],[11,"hash","embedded_graphics::geometry","",4,[[]]],[11,"hash","","",5,[[]]],[11,"hash","embedded_graphics::image","",42,[[]]],[11,"hash","embedded_graphics::pixelcolor","",20,[[]]],[11,"hash","","",44,[[]]],[11,"hash","","",45,[[]]],[11,"hash","","",46,[[]]],[11,"hash","embedded_graphics::pixelcolor::raw","",13,[[]]],[11,"hash","","",14,[[]]],[11,"hash","","",15,[[]]],[11,"hash","","",16,[[]]],[11,"hash","","",17,[[]]],[11,"hash","","",18,[[]]],[11,"hash","","",19,[[]]],[11,"hash","","",47,[[]]],[11,"hash","","",48,[[]]],[11,"hash","embedded_graphics::pixelcolor","",49,[[]]],[11,"hash","","",50,[[]]],[11,"hash","","",51,[[]]],[11,"hash","","",52,[[]]],[11,"hash","","",53,[[]]],[11,"hash","","",54,[[]]],[11,"hash","embedded_graphics::primitives::circle","",26,[[]]],[11,"hash","","",55,[[]]],[11,"hash","embedded_graphics::primitives::line","",27,[[]]],[11,"hash","","",56,[[]]],[11,"hash","embedded_graphics::primitives::rectangle","",28,[[]]],[11,"hash","","",57,[[]]],[11,"hash","embedded_graphics::primitives::triangle","",29,[[]]],[11,"hash","","",58,[[]]],[11,"hash","embedded_graphics::style","",31,[[]]],[11,"hash","","",59,[[]]],[11,"hash","","",32,[[]]],[11,"hash","","",33,[[]]],[11,"hash","","",60,[[]]],[11,"try_from","embedded_graphics::geometry","",4,[[],["result",4]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_from","","",4,[[],["result",4]]],[11,"next","embedded_graphics::fonts","",41,[[],["option",4]]],[11,"next","embedded_graphics::image","",43,[[],["option",4]]],[11,"next","embedded_graphics::primitives::circle","",55,[[],["option",4]]],[11,"next","embedded_graphics::primitives::line","",56,[[],["option",4]]],[11,"next","embedded_graphics::primitives::rectangle","",57,[[],["option",4]]],[11,"next","embedded_graphics::primitives::triangle","",58,[[],["option",4]]],[11,"clone","embedded_graphics::drawable","",1,[[],["pixel",3]]],[11,"clone","embedded_graphics::fonts","",35,[[],["font12x16",3]]],[11,"clone","","",36,[[],["font24x32",3]]],[11,"clone","","",37,[[],["font6x12",3]]],[11,"clone","","",38,[[],["font6x6",3]]],[11,"clone","","",39,[[],["font6x8",3]]],[11,"clone","","",40,[[],["font8x16",3]]],[11,"clone","","",2,[[],["text",3]]],[11,"clone","","",41,[[],["styledtextiterator",3]]],[11,"clone","embedded_graphics::geometry","",4,[[],["point",3]]],[11,"clone","","",5,[[],["size",3]]],[11,"clone","embedded_graphics::image","",42,[[],["imageraw",3]]],[11,"clone","","",9,[[],["image",3]]],[11,"clone","embedded_graphics::mock_display","",10,[[],["mockdisplay",3]]],[11,"clone","embedded_graphics::pixelcolor","",20,[[],["binarycolor",4]]],[11,"clone","","",44,[[],["gray2",3]]],[11,"clone","","",45,[[],["gray4",3]]],[11,"clone","","",46,[[],["gray8",3]]],[11,"clone","embedded_graphics::pixelcolor::raw","",13,[[],["rawu1",3]]],[11,"clone","","",14,[[],["rawu2",3]]],[11,"clone","","",15,[[],["rawu4",3]]],[11,"clone","","",16,[[],["rawu8",3]]],[11,"clone","","",17,[[],["rawu16",3]]],[11,"clone","","",18,[[],["rawu24",3]]],[11,"clone","","",19,[[],["rawu32",3]]],[11,"clone","","",47,[[],["littleendian",4]]],[11,"clone","","",48,[[],["bigendian",4]]],[11,"clone","embedded_graphics::pixelcolor","",49,[[],["rgb555",3]]],[11,"clone","","",50,[[],["bgr555",3]]],[11,"clone","","",51,[[],["rgb565",3]]],[11,"clone","","",52,[[],["bgr565",3]]],[11,"clone","","",53,[[],["rgb888",3]]],[11,"clone","","",54,[[],["bgr888",3]]],[11,"clone","embedded_graphics::primitives::circle","",26,[[],["circle",3]]],[11,"clone","","",55,[[],["styledcircleiterator",3]]],[11,"clone","embedded_graphics::primitives::line","",27,[[],["line",3]]],[11,"clone","","",56,[[],["styledlineiterator",3]]],[11,"clone","embedded_graphics::primitives::rectangle","",28,[[],["rectangle",3]]],[11,"clone","","",57,[[],["styledrectangleiterator",3]]],[11,"clone","embedded_graphics::primitives::triangle","",29,[[],["triangle",3]]],[11,"clone","","",58,[[],["styledtriangleiterator",3]]],[11,"clone","embedded_graphics::style","",31,[[],["primitivestyle",3]]],[11,"clone","","",59,[[],["primitivestylebuilder",3]]],[11,"clone","","",32,[[],["styled",3]]],[11,"clone","","",33,[[],["textstyle",3]]],[11,"clone","","",60,[[],["textstylebuilder",3]]],[11,"default","embedded_graphics::drawable","",1,[[],["pixel",3]]],[11,"default","embedded_graphics::fonts","",35,[[],["font12x16",3]]],[11,"default","","",36,[[],["font24x32",3]]],[11,"default","","",37,[[],["font6x12",3]]],[11,"default","","",38,[[],["font6x6",3]]],[11,"default","","",39,[[],["font6x8",3]]],[11,"default","","",40,[[],["font8x16",3]]],[11,"default","","",41,[[],["styledtextiterator",3]]],[11,"default","embedded_graphics::geometry","",4,[[],["point",3]]],[11,"default","","",5,[[],["size",3]]],[11,"default","embedded_graphics::mock_display","",10,[[]]],[11,"default","embedded_graphics::pixelcolor","",20,[[]]],[11,"default","","",44,[[],["gray2",3]]],[11,"default","","",45,[[],["gray4",3]]],[11,"default","","",46,[[],["gray8",3]]],[11,"default","embedded_graphics::pixelcolor::raw","",13,[[],["rawu1",3]]],[11,"default","","",14,[[],["rawu2",3]]],[11,"default","","",15,[[],["rawu4",3]]],[11,"default","","",16,[[],["rawu8",3]]],[11,"default","","",17,[[],["rawu16",3]]],[11,"default","","",18,[[],["rawu24",3]]],[11,"default","","",19,[[],["rawu32",3]]],[11,"default","embedded_graphics::pixelcolor","",49,[[],["rgb555",3]]],[11,"default","","",50,[[],["bgr555",3]]],[11,"default","","",51,[[],["rgb565",3]]],[11,"default","","",52,[[],["bgr565",3]]],[11,"default","","",53,[[],["rgb888",3]]],[11,"default","","",54,[[],["bgr888",3]]],[11,"default","embedded_graphics::primitives::circle","",26,[[],["circle",3]]],[11,"default","embedded_graphics::primitives::line","",27,[[],["line",3]]],[11,"default","embedded_graphics::primitives::rectangle","",28,[[],["rectangle",3]]],[11,"default","embedded_graphics::primitives::triangle","",29,[[],["triangle",3]]],[11,"default","embedded_graphics::style","",31,[[]]],[11,"default","","",59,[[],["primitivestylebuilder",3]]],[11,"default","","",32,[[],["styled",3]]],[11,"default","","",33,[[],["textstyle",3]]],[11,"default","","",60,[[],["textstylebuilder",3]]],[11,"draw_iter","embedded_graphics::prelude","Draws an object from an iterator over its pixels.",25,[[],["result",4]]],[11,"clear","","Clears the display with the supplied color.",25,[[],["result",4]]],[11,"draw_line","","Draws a styled line primitive.",25,[[["styled",3]],["result",4]]],[11,"draw_triangle","","Draws a styled triangle primitive.",25,[[["styled",3]],["result",4]]],[11,"draw_rectangle","","Draws a styled rectangle primitive.",25,[[["styled",3]],["result",4]]],[11,"draw_circle","","Draws a styled circle primitive.",25,[[["styled",3]],["result",4]]],[11,"draw_image","","Draws an image with known size",25,[[["image",3]],["result",4]]],[11,"new","embedded_graphics::fonts","Creates a text.",2,[[["point",3],["str",15]]]],[11,"into_styled","","Attaches a text style to the text object.",2,[[["textstyle",3]],[["styled",3],["textstyle",3]]]],[11,"new","embedded_graphics::geometry","Creates a point from  X and Y coordinates.",4,[[["i32",15]]]],[11,"zero","","Creates a point with X and Y equal to zero.",4,[[]]],[11,"abs","","Remove the sign from a coordinate",4,[[]]],[11,"new","","Creates a size from a width and a height.",5,[[["u32",15]]]],[11,"zero","","Creates a size with width and height equal to zero.",5,[[]]],[11,"new","embedded_graphics::image","Creates a new image.",42,[[["u32",15]]]],[11,"invert","embedded_graphics::pixelcolor","Inverts the color.",20,[[]]],[11,"is_on","","Returns <code>true</code> if this color is <code>On</code>.",20,[[],["bool",15]]],[11,"is_off","","Returns <code>true</code> if this color is <code>Off</code>.",20,[[],["bool",15]]],[18,"BLACK","","Black color (0% luma)",21,null],[18,"WHITE","","White color (100% luma)",21,null],[11,"new","","Creates a new grayscale color.",44,[[["u8",15]]]],[11,"new","","Creates a new grayscale color.",45,[[["u8",15]]]],[11,"new","","Creates a new grayscale color.",46,[[["u8",15]]]],[18,"MAX_R","","The maximum value in the red channel.",22,null],[18,"MAX_G","","The maximum value in the green channel.",22,null],[18,"MAX_B","","The maximum value in the blue channel.",22,null],[18,"BLACK","","Black color (R: 0%, G: 0%, B: 0%)",22,null],[18,"RED","","Red color (R: 100%, G: 0%, B: 0%)",22,null],[18,"GREEN","","Green color (R: 0%, G: 100%, B: 0%)",22,null],[18,"BLUE","","Blue color (R: 0%, G: 0%, B: 100%)",22,null],[18,"YELLOW","","Yellow color (R: 100%, G: 100%, B: 0%)",22,null],[18,"MAGENTA","","Magenta color (R: 100%, G: 0%, B: 100%)",22,null],[18,"CYAN","","Cyan color (R: 0%, G: 100%, B: 100%)",22,null],[18,"WHITE","","White color (R: 100%, G: 100%, B: 100%)",22,null],[11,"new","","Creates a new Rgb555 color. Too large channel values will …",49,[[["u8",15]]]],[11,"new","","Creates a new Bgr555 color. Too large channel values will …",50,[[["u8",15]]]],[11,"new","","Creates a new Rgb565 color. Too large channel values will …",51,[[["u8",15]]]],[11,"new","","Creates a new Bgr565 color. Too large channel values will …",52,[[["u8",15]]]],[11,"new","","Creates a new Rgb888 color. Too large channel values will …",53,[[["u8",15]]]],[11,"new","","Creates a new Bgr888 color. Too large channel values will …",54,[[["u8",15]]]],[11,"new","embedded_graphics::style","Creates a primitive style without fill and stroke.",31,[[]]],[11,"with_stroke","","Creates a stroke primitive style.",31,[[["u32",15]]]],[11,"with_fill","","Creates a fill primitive style.",31,[[]]],[11,"new","","Creates a new primitive style builder.",59,[[]]],[11,"fill_color","","Sets the fill color.",59,[[]]],[11,"stroke_color","","Sets the stroke color.",59,[[]]],[11,"stroke_width","","Sets the stroke width.",59,[[["u32",15]]]],[11,"build","","Builds the primitive style.",59,[[],["primitivestyle",3]]],[11,"new","","Creates a styled.",32,[[]]],[11,"new","","Creates a text style with transparent background.",33,[[]]],[11,"new","","Creates a new text style builder with a given font.",60,[[]]],[11,"text_color","","Sets the text color.",60,[[]]],[11,"background_color","","Sets the background color.",60,[[]]],[11,"build","","Builds the text style.",60,[[],["textstyle",3]]]],"p":[[8,"Drawable"],[3,"Pixel"],[3,"Text"],[8,"Font"],[3,"Point"],[3,"Size"],[8,"Dimensions"],[8,"IntoPixelIter"],[8,"ImageDimensions"],[3,"Image"],[3,"MockDisplay"],[8,"ColorMapping"],[8,"RawData"],[3,"RawU1"],[3,"RawU2"],[3,"RawU4"],[3,"RawU8"],[3,"RawU16"],[3,"RawU24"],[3,"RawU32"],[4,"BinaryColor"],[8,"GrayColor"],[8,"RgbColor"],[8,"PixelColor"],[8,"IntoStorage"],[8,"DrawTarget"],[3,"Circle"],[3,"Line"],[3,"Rectangle"],[3,"Triangle"],[8,"Primitive"],[3,"PrimitiveStyle"],[3,"Styled"],[3,"TextStyle"],[8,"Transform"],[3,"Font12x16"],[3,"Font24x32"],[3,"Font6x12"],[3,"Font6x6"],[3,"Font6x8"],[3,"Font8x16"],[3,"StyledTextIterator"],[3,"ImageRaw"],[3,"ImageIterator"],[3,"Gray2"],[3,"Gray4"],[3,"Gray8"],[4,"LittleEndian"],[4,"BigEndian"],[3,"Rgb555"],[3,"Bgr555"],[3,"Rgb565"],[3,"Bgr565"],[3,"Rgb888"],[3,"Bgr888"],[3,"StyledCircleIterator"],[3,"StyledLineIterator"],[3,"StyledRectangleIterator"],[3,"StyledTriangleIterator"],[3,"PrimitiveStyleBuilder"],[3,"TextStyleBuilder"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);