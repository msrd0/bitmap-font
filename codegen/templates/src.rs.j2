// @generated

//! [Tamzen font](https://github.com/sunaku/tamzen-font)-based bitmap fonts. The included glyphs
//! are a subset of ISO 8859-1 plus the unicode powerline symbols. Additional symbols might be added
//! in the future. If you are missing a glyph that is included in the Tamzen font, please open an
//! issue.
//!
//! Each font comes with a pixel-double version that can be used with no significant additional flash
//! size cost. You can also adjust the pixel multiplier yourself if you want even bigger fonts, or
//! save even more flash space.
//!
//! | Font | Flash Size (in Byte) | Screenshot | Pixel-double Font | Pixel-double Screenshot |
//! | ---- | --------------------:|:----------:| ----------------- |:-----------------------:|
{%- for font in fonts %}
//! | [`FONT_{{ font.width }}x{{ font.height }}{% if font.bold %}_BOLD{% endif %}`] | {{ font.bitmap_len_str }} | ![Screenshot](data:image/bmp;base64,{{ font.bmp }}) | [`FONT_{{ 2*font.width }}x{{ 2*font.height }}{% if font.bold %}_BOLD{% endif %}`] | ![Pixel-double Screenshot](data:image/bmp;base64,{{ font.bmp_double }}) |
{%- endfor %}

use crate::BitmapFont;
use embedded_graphics::{
	geometry::Size,
	image::ImageRaw,
	mono_font::mapping::GlyphMapping
};

struct Mapping;

impl GlyphMapping for Mapping {
	fn index(&self, c: char) -> usize {
		match c {
			{% for range in char_ranges -%}
			'{{ range.start }}' ..= '{{ range.end }}' => (c as usize - '{{ range.start }}' as usize){% if range.skip != 0 %} + {{ range.skip }}{% endif %},
			{% endfor -%}
			_ => '?' as usize - ' ' as usize
		}
	}
}

const GLYPH_MAPPING: Mapping = Mapping;

{%- for font in fonts %}

/// Tamzen {{ font.width }}x{{ font.height }}{% if font.bold %} Bold{% endif %} Font.
///
/// ![Screenshot](data:image/bmp;base64,{{ font.bmp }})
///
/// Bitmap Size: {{ font.bitmap_len_str }} Byte <br/>
/// Font Source: <https://github.com/sunaku/tamzen-font/blob/master/bdf/Tamzen{{ font.width }}x{{ font.height }}
	{%- if font.bold %}b{% else %}r{% endif %}.bdf> <br/>
/// Font License: <https://github.com/sunaku/tamzen-font/blob/master/LICENSE>
#[allow(non_upper_case_globals)]
pub const FONT_{{ font.width }}x{{ font.height }}{% if font.bold %}_BOLD{% endif %}: BitmapFont<'static> = BitmapFont {
	bitmap: ImageRaw::new_binary(
		// {{ font.img_width }} x {{ font.img_height }} ({{ font.bitmap_len }})
		&[
			{%- for chunk in font.bitmap | chunks(16) %}
			{% for byte in chunk %}0x{{ "{:02x}"|format(byte) }}{% if !loop.last %}{{ ", " }}{% endif %}{% endfor %}
			{%- if !loop.last %},{% endif %}
			{%- endfor %}
		],
		{{ font.img_width }}
	),
	glyph_mapping: &GLYPH_MAPPING,
	size: Size::new({{ font.width }}, {{ font.height }}),
	pixels: 1
};

{%- endfor %}

{%- for font in fonts %}

/// Pixel-double version of [`FONT_{{ font.width }}x{{ font.height }}{% if font.bold %}_BOLD{% endif %}`].
///
/// ![Screenshot](data:image/bmp;base64,{{ font.bmp_double }})
///
/// This font does not store its own bitmap and therefore does not increase the flash size significantly.
#[allow(non_upper_case_globals)]
pub const FONT_{{ 2*font.width }}x{{ 2*font.height }}{% if font.bold %}_BOLD{% endif %}: BitmapFont<'static> = {
	FONT_{{ font.width }}x{{ font.height }}{% if font.bold %}_BOLD{% endif %}.pixel_double()
};

{%- endfor %}
